<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[macOS 原生输入法设置自然码]]></title>
    <url>%2FmacOS-Input-Method-ZRM.html</url>
    <content type="text"><![CDATA[用了 macOS 一段时间了，一直使用的是搜狗输入法，因为系统自带的双拼输入法不支持自然码。 不过最近在网上看相关的双拼练习时，发现原来用过的双拼练习的作者 @BlueSky 给出了提示，macOS 其实内置隐藏了双拼的自然码方案。 只需在终端内输入以下命令即可：1$ defaults write com.apple.inputmethod.CoreChineseEngineFramework shuangpinLayout 5 在输入法偏好设置中会看到这样的效果： 此时即可使用自然码方案了。 附：系统为 macOS 10.14.4]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>双拼</tag>
        <tag>自然码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 GPG 签名你的 Commits]]></title>
    <url>%2FGit-GPG-Signing-Commits.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月15日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 准备工作首先要安装好 GPG 工具。1$ brew install gnupg gnupg2 pinentry-mac 配置使用环境。123456$ test -r ~/.bash_profile &amp;&amp; echo 'export GPG_TTY=$(tty)' &gt;&gt; ~/.bash_profile$ echo 'export GPG_TTY=$(tty)' &gt;&gt; ~/.profile$ echo "pinentry-program /usr/local/bin/pinentry-mac" &gt;&gt; ~/.gnupg/gpg-agent.conf$ killall gpg-agent 检查现有的 GPG 秘钥1$ gpg --list-secret-keys --keyid-format LONG 如果没有返回值，则说明此电脑上没有配置 GPG 秘钥。如果有，则可以跳过生成 GPG 秘钥的步骤。 生成一个新的 GPG 秘钥1$ gpg --full-generate-key 第一步，选择加密类型，可以直接回车选择默认的 RSA and RSA。第二步，输入秘钥的强度，推荐输入 4096。第三步，选择秘钥的过期时间，嫌麻烦的同学可以直接回车选择默认的永不过期。第四步，确认一下以上信息有没有错。第五步，输入你的名字。第六步，输入你的邮箱，注意此邮箱需要是你的 Github 账号中添加过的邮箱。第七步，设置此秘钥的密码，使用此秘钥需要用这个密码来解密。之后稍等片刻，GPG 秘钥即生成完毕。 使用 GPG 秘钥在终端中使用 gpg --list-secret-keys --keyid-format LONG 命令查看当前秘钥的信息。123456$ gpg --list-secret-keys --keyid-format LONG/Users/hubot/.gnupg/secring.gpg ------------------------------------sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 在这里 3AA5C34371567BD2 就是秘钥的 ID。 使用以下命令来获得 GPG 秘钥的公钥，注意 &lt;ID&gt; 需要替换为自己秘钥的 ID。1$ gpg --armor --export &lt;ID&gt; 复制以上公钥，去往 Github 账户设置页面即可添加 GPG 秘钥。 接着使用以下命令配置 git 以使用 GPG 秘钥。123$ git config --global user.signingkey &lt;ID&gt;$ git config --global commit.gpgsign true$ git config --global gpg.program gpg 带有 GPG 验证的 commit 只是多了 -S 参数。1$ git commit -S -m "your commit message" 验证在提交改动之后，可以使用以下命令来检验以下是否成功使用 GPG 秘钥来签名 commit。1$ git log --show-signature -1 若带有下面的提示，则说明成功。1gpg: Good signature from "Your Name &lt;your@email.com&gt;"]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>GPG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 18.04 配置开机启动项]]></title>
    <url>%2FUbuntu-18-Startup.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月14日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 在 Ubuntu 16.04 版本中，配置开机启动项是一件很简单的事情，只需在 /etc/rc.local 中添加即可。 但在 Ubuntu 18.04 中，此方法失效。经搜索实践，总结了一下较为简单的设置开机启动项的方法。 首先运行1$ crontab -e 之后可能会出现以下提示123456789no crontab for neo - using an empty oneSelect an editor. To change later, run 'select-editor'. 1. /bin/nano &lt;---- easiest 2. /usr/bin/vim.basic 3. /usr/bin/vim.tiny 4. /bin/edChoose 1-4 [1]: 推荐选 1。 在末尾添加新的一行1@reboot /path/to/your/boot.sh 之后把开机启动命令都写在 /path/to/your/boot.sh 这个文件里。 最后别忘了给文件加上可执行属性1$ chmod +x /path/to/your/boot.sh 此时重启即可看到效果。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最强日期正则表达式]]></title>
    <url>%2FDate-Regex.html</url>
    <content type="text"><![CDATA[简单的日期判断（YYYY/MM/DD）1^\d&#123;4&#125;(\-|\/|\.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$ 演化的日期判断（YYYY/MM/DD| YY/MM/DD）1^(^(\d&#123;4&#125;|\d&#123;2&#125;)(\-|\/|\.)\d&#123;1,2&#125;\3\d&#123;1,2&#125;$)|(^\d&#123;4&#125;年\d&#123;1,2&#125;月\d&#123;1,2&#125;日$)$ 加入闰年的判断1^((((1[6-9]|[2-9]\d)\d&#123;2&#125;)-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d&#123;2&#125;)-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d&#123;2&#125;)-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$ 分析首先需要验证年份，显然，年份范围为 0001-9999，匹配 YYYY 的正则表达式为：[0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3}其中 [0-9] 也可以表示为 \d，但 \d 不如 [0-9] 直观，因此下面我将一直采用 [0-9] 用正则表达式验证日期的难点有二：一是大小月份的天数不同，二是闰年的考虑。对于第一个难点，我们首先不考虑闰年，假设 2 月份都是 28 天，这样，月份和日期可以分成三种情况： 月份为 1、3、5、7、8、10、12，天数范围为 01-31，匹配 MM-DD 的正则表达式为：(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]) 月份为 4、6、9、11，天数范围为 01-30，匹配 MM-DD 的正则表达式为：(0[469]|11)-(0[1-9]|[12][0-9]|30) 月份为 2，考虑平年情况，匹配 MM-DD 的正则表达式为：02-(0[1-9]|[1][0-9]|2[0-8]) 根据上面的成果，我们可以得到匹配平年日期格式为 YYYY-MM-DD 的正则表达式：1([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))) 接着我们来解决第二个难点：闰年的考虑。根据闰年的定义，我们可以将闰年分为两类： 能被4整除但不能被100整除的年份。寻找后两位的变化规律，可以很快得到下面的正则匹配：([0-9]{2})(0[48]|[2468][048]|[13579][26]) 能被400整除的年份。能被400整除的数肯定能被100整除，因此后两位肯定是00，我们只要保证前两位能被4整除即可，相应的正则表达式为：(0[48]|[2468][048]|[3579][26])00 最强验证日期的正则表达式这个日期正则表达式支持1234YYYY-MM-DD YYYY/MM/DD YYYY_MM_DD YYYY.MM.DD 这些形式。 完整的正则表达式如下:1((^((1[8-9]\d&#123;2&#125;)|([2-9]\d&#123;3&#125;))([-\/\._])(10|12|0?[13578])([-\/\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d&#123;2&#125;)|([2-9]\d&#123;3&#125;))([-\/\._])(11|0?[469])([-\/\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d&#123;2&#125;)|([2-9]\d&#123;3&#125;))([-\/\._])(0?2)([-\/\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([3579][26]00)([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][0][48])([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][2468][048])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][2468][048])([-\/\._])(0?2)([-\/\._])(29)$)|(^([1][89][13579][26])([-\/\._])(0?2)([-\/\._])(29)$)|(^([2-9][0-9][13579][26])([-\/\._])(0?2)([-\/\._])(29)$))]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 下的包管理器 Homebrew]]></title>
    <url>%2FmacOS-Package-Manager-Homebrew.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月8日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 介绍之前使用 Ubuntu 和 CentOS 的时候，它们都各自拥有便捷的包管理器 APT 和 YUM，使用它们安装卸载软件，自动解决依赖问题，非常方便。最近在换用 macOS 系统之后，却没有了类似的管理器，安装软件又回到了和 Windows 一样的体验。虽说 App Store 拥有一些很优秀的软件，但是作为一个未来的码农，需要的很多软件并没有 App Store 版，如果手动下载安装，以后软件更新了还需要再下载安装一次，这些无意义的重复劳动需要解决掉。 早在换 Mac 之前就听说过了 Homebrew 的名字，它自己的介绍就是 The missing package manager for macOS (or Linux)，很厉害的一个项目，方便实用。它的野心不小，不满足于 macOS 系统，还将支持扩展到了 Linux 发行版系统上，甚至还支持在 WSL 中使用。 安装安装非常简单，终端中一行命令即可完成。1$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 使用搜索软件在 Homebrew 中搜索软件很很简单。1$ brew search chrome 如上图可以看到，我搜索 Chrome 的结果。搜索结果有两部分，Formulae 和 Casks，前者指命令行工具，后者指图形化程序。 如果想查询相关程序的信息，可以使用以下命令，对于 Formulae 程序1$ brew info chrome-cli 对于 Casks 程序1$ brew cask info google-chrome 安装软件在知道程序准确名称之后，可以使用以下命令安装，对于 Formulae 程序1$ brew install chrome-cli 对于 Casks 程序1$ brew cask install google-chrome 卸载软件卸载软件同样很简单，对于 Formulae 程序1$ brew uninstall chrome-cli 对于 Casks 程序1$ brew cask uninstall google-chrome 升级软件更新软件源和 Homebrew 本身。1$ brew update 列出没有更新到最新版本的 Formulae 程序。1$ brew outdated 更新所有 Formulae 程序，1$ brew upgrade 或者更新特定 Formulae 程序。1$ brew upgrade node 对于 Casks 程序来说，更新并没有如此简单，不过可以使用一个小插件来使之简化。1$ brew tap buo/cask-upgrade 之后，只需运行以下命令即可检查 Casks 程序的更新。1$ brew cu 默认不会检查带有自动更新功能的程序，不过我想要的是让它检查，帮我更新，只需添加一个参数即可。1$ brew cu -a]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 下 Android 平台工具的 PATH 配置]]></title>
    <url>%2FmacOS-Android-Platform-Tools.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月7日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 在安装了 Android Studio 之后，相关的 adb fastboot 等工具应该都应经下载在电脑里了。但是 AS 并没有把相关的目录加入 PATH，导致在终端里不可以方便的直接使用，需要加上很长的一串路径才可可以。这个文章记录下解决的办法。 编辑 BASH 的配置文件1$ nano ~/.bash_profile 在文件最后追加几行123export ANDROID_HOME=$HOME/Library/Android/sdkexport PATH="$PATH:$ANDROID_HOME/platform-tools"export PATH="$PATH:$ANDROID_HOME/tools" macOS 下的默认 ANDROID_HOME 位置就是如上配置，无需修改，其他系统下的路径需要根据实际情况修改。 之后再使刚改好的配置生效，或者重新打开终端。1$ source ~/.bash_profile 配置好后的效果如下图。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[去除 Next 主题图片的灰色边框]]></title>
    <url>%2FRemove-Next-Gray-Border.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月6日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 最近发了篇文章，带了些截图，发现对于 macOS 处理过的截图，Next 主题在图片周围加一圈灰色边框并不美观。 于是便想办法去掉它。打开浏览器检查图片样式，发现图片周围加了一圈一个像素宽度的灰色边框。 打开 Hexo 博客目录，直接搜索整个目录，果然在 themes/next/source/css/_common/components/post/post-expand.styl 这个文件里找到了配置。 只需将以下代码123456img &#123; box-sizing: border-box; margin: 0 auto 25px; padding: 3px; border: 1px solid $gray-lighter;&#125; 改为123456img &#123; box-sizing: border-box; margin: 0 auto 25px; padding: 3px; border: none;&#125; 即可去除边框。 去除边框之后的效果，看起来舒服多了。 最后记得一点，一定要先执行 hexo clean 再部署，否则样式表文件并不会更新导致修改不生效。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建 Localhost 证书]]></title>
    <url>%2FCreate-Localhost-Certificate.html</url>
    <content type="text"><![CDATA[本文最后更新于 2019年3月5日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 有时因为开发的需求，需要为本地的网页服务器设置 https 访问。在这里记录一下在 macOS 系统下快速创建自签名证书并设置可信的方法。 Xcode Command Line Tools基本所有在 macOS 中开发的人应该都已经安装过了命令行工具，在终端中一句命令即可安装。1$ xcode-select --install 生成证书在终端里运行以下命令即可在用户目录里生成证书和秘钥。1234$ openssl req -x509 -days 3650 -out localhost.crt -keyout localhost.key \ -newkey rsa:2048 -nodes -sha256 \ -subj '/CN=localhost' -extensions EXT -config &lt;( \ printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth") 其中 -days 3650 参数是指定证书的有效时间为 3650 天。 设置信任最后，需要在系统中设置信任，否则直接使用仍会提示不信任。 直接搜索打开“钥匙串访问”，“文件” - “导入项目” - 选择刚生成的 crt 文件。 双击打开刚导入的证书，设置“使用此证书时：始终信任”。 效果如下图。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>证书</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修复 Ubuntu 下拼音输入法崩溃问题]]></title>
    <url>%2FFix-Ubuntu-Input-Method-Crash.html</url>
    <content type="text"><![CDATA[最近在使用 Ubuntu 18.04 的过程中，遇到了一个拼音输入法总是在选字的时候崩溃的问题。 崩溃表现crashed with SIGABRT in __assert_fail_base() 具体表现为：在打字时，无法使用数字键选择字词，鼠标点选也无效，只能按空格打出第一个字词。当按数字键选择字词时，输入法会崩溃，并输出字母和数字，例如我想打出“谷歌”，“谷歌”在候选列表第二个位置，按下 2，输入法崩溃，输出 guge2。 我搜索了一下，并没有找到解决办法，只好退而求其次，使用 fcitx 代替了 ibus，就这么过了半个月。然而我今天再次搜索的时候竟然找到了解决办法：Selecting a number does not always return a Chinese character with ibus pinyin。 解决办法直接删除输入法的缓存就好：rm ~/.cache/ibus/libpinyin/*]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>ibus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[又一次更换了评论系统]]></title>
    <url>%2FChange-Comment-System-Again.html</url>
    <content type="text"><![CDATA[去年暑期的时候 HyperComments 开始收费，并且不给钱就不给看历史数据，一声不吭就直接进入收费模式，这也太狗了。去他妈的 HyperComments 吧，不用就不用了。于是在那个时候换了 Disqus 这个经典的评论系统。 Disqus 虽好，但国内访问不了，我那时还感叹了一下，以后评论随缘吧（说的好像能访问就有很多评论一样）。思来想去，国内用户看不到评论系统，少了点东西，那样的话看我这个网站总是怪怪的。 今天在升级 NexT 主题时，又详细看了一下配置信息，看到了 Gitment 和 Gitalk 这个玩意儿，在 GitHub 的仓库中开 Issue 为每个页面记录评论。不得不说，这个思路很清奇。本身 Hexo 博客就是托管在 GitHub 仓库中的，那么一个 Issue 就对应一个文章，这个 Issue 下面的评论就对应文章下面的评论。 现在你看到的评论框就是 Gitalk 了，比 Gitment 更新的勤快，比 Gitment 维护的人多，比 Gitment 好看，是我选择 Gitalk 的理由。 有一点不太方便的地方就是，每篇文章都需要手动初始化评论，不能自动初始化。新文章的初始化还简单些，就是访问一下页面，老文章的初始化就有些蛋疼，毕竟也有几十个呢。还好网上找到了一键脚本，得以解决这个问题。话虽是这么说，但我还是没有用一键脚本，仍是访问了每篇文章来初始化。别问为什么，就是想顺便回顾一下历史。 现在，国内用户终于可以访问我的评论系统了，不过真的会有多少人来评论吗？#捂脸]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Disqus</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Assessed Lab]]></title>
    <url>%2FCOM6516-Assessed-Lab.html</url>
    <content type="text"><![CDATA[Assessed Lab 1 12345678910111213141516171819202122232425262728293031/* * Developed by Neo on 05/11/18 11:12. * Last modified 05/11/18 10:39. * Copyright (c) 2018. All rights reserved. */import sheffield.EasyReader;/** * This class can generate a walking plan for a old person */public class GenerateWalkingPlan &#123; /** * Program starts here. * * @param args command line arguments. */ public static void main(String[] args) &#123; // Ask for user's name and age for creating plan EasyReader myReader = new EasyReader(); String name = myReader.readString("What is your name? "); int age = myReader.readInt("Hello " + name + ", how old are you? "); // Create a walk plan and print it WalkingPlan newPlan = new WalkingPlan(name, age); newPlan.generate(); newPlan.toPrint(); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899/* * Developed by Neo on 05/11/18 11:10. * Last modified 05/11/18 10:45. * Copyright (c) 2018. All rights reserved. */import java.util.Random;/** * This is walk plan for old person */class WalkingPlan &#123; /** * This plan only contains 14 days plan */ private static final int PLAN_DAYS = 14; /** * We define more than 1500 meters as hard day */ private static final int HARD_MODE = 1500; /** * If two hard days in a row, we need change second day as relax day */ private static final int RELAX_MODE = 1000; /** * User's name */ private String name; /** * User's age */ private int age; /** * Every days plan */ private int[] plan; /** * The total meters of whole plan */ private int total; /** * Average meters of this plan */ private long average; /** * Constructor method for WalkingPlan * * @param name user's name * @param age user's age */ WalkingPlan(String name, int age) &#123; this.name = name; this.age = age; // Initialize these variables plan = new int[PLAN_DAYS]; total = 0; average = 0; &#125; /** * This method will generate a waling plan */ void generate() &#123; Random random = new Random(); for (int i = 0; i &lt; PLAN_DAYS; i++) &#123; plan[i] = 10 * (10 + random.nextInt(240)); // Generate a int in [100, 2500) if (i &gt; 0) &#123; if (plan[i] &gt; HARD_MODE &amp;&amp; plan[i - 1] &gt; HARD_MODE) plan[i] = RELAX_MODE; &#125; total += plan[i]; &#125; average = Math.round((double) total / PLAN_DAYS); &#125; /** * This method will print walking plan */ void toPrint() &#123; System.out.println(); System.out.println(name + "(age=" + age + ") - this is your walking plan:"); for (int i = 0; i &lt; PLAN_DAYS; i++) &#123; System.out.print("Day " + (i + 1) + ": walk " + plan[i] + "m"); if (plan[i] &gt; HARD_MODE) System.out.println(" &lt;--- hard"); else System.out.println(); &#125; System.out.println(); System.out.println("Total number of meters walked = " + total); System.out.println("Average number of meters walked per day = " + average); &#125;&#125; Assessed Lab 2 1234567891011121314151617181920212223/* * Developed by Neo on 12/10/18 5:17 PM. * Last modified 12/10/18 11:24 AM. * Copyright (c) 2018. All rights reserved. */import javax.swing.*;/** * This class will show the Scorer GUI. */public class ScorerGUI &#123; /** * Program starts here. * * @param args command line arguments */ public static void main(String[] args) &#123; JFrame f = new ScoringFrame(); //Set the frame visible f.setVisible(true); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* * Developed by Neo on 12/10/18 5:17 PM. * Last modified 12/10/18 11:24 AM. * Copyright (c) 2018. All rights reserved. *//** * This class is a score record. */class Scorer &#123; /** * Scorer's name. */ private String name; /** * Scorer's score. */ private int score; /** * Constructor method of Scorer. * * @param name Scorer's name. * @param score Scorer's score. */ Scorer(String name, int score) &#123; this.name = name; this.score = score; &#125; /** * Getter method of name. * * @return Scorer's name. */ String getName() &#123; return name; &#125; /** * Getter method of score. * * @return Scorer's score. */ int getScore() &#123; return score; &#125;&#125; 123456789101112131415161718192021222324/* * Developed by Neo on 12/10/18 5:17 PM. * Last modified 12/10/18 11:38 AM. * Copyright (c) 2018. All rights reserved. */import java.util.Comparator;/** * This comparator will compare two scorer's score. */public class ScoreComparator implements Comparator&lt;Scorer&gt; &#123; /** * Compare to scorer's score. * * @param a First scorer. * @param b Second scorer. * @return The difference of two scorers' score. */ @Override public int compare(Scorer a, Scorer b) &#123; return b.getScore() - a.getScore(); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133/* * Developed by Neo on 12/10/18 5:17 PM. * Last modified 12/10/18 11:47 AM. * Copyright (c) 2018. All rights reserved. */import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Set;import java.util.TreeSet;/** * This class will create a score frame. */class ScoringFrame extends JFrame implements ActionListener &#123; /** * "Enter Score" button. */ private JButton enterButton; /** * "Quit" button. */ private JButton quitButton; /** * Name text field. */ private JTextField nameText; /** * Score text field. */ private JTextField scoreText; /** * This label show the highest score. */ private JLabel highestLabel; /** * This set stores all scores. */ private Set&lt;Scorer&gt; scorerList; /** * Constructor method of ScoringFrame. */ ScoringFrame() &#123; //Set title super("Competition score GUI"); //Set window's size setSize(960, 270); //Set window's position in the centre of screen this.setLocationRelativeTo(null); //Set this windows can only be closed by quit button this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); //Components of this frame JLabel nameLabel = new JLabel("Name: "); nameText = new JTextField(20); JLabel scoreLabel = new JLabel("Score: "); scoreText = new JTextField(5); enterButton = new JButton("Enter Score"); enterButton.addActionListener(this); //Top JPanel topPanel = new JPanel(); topPanel.add(nameLabel); topPanel.add(nameText); topPanel.add(scoreLabel); topPanel.add(scoreText); topPanel.add(enterButton); this.add(topPanel, BorderLayout.NORTH); //Centre highestLabel = new JLabel("Top scorer is", JLabel.CENTER); highestLabel.setFont(new Font("Arial", Font.PLAIN, 36)); highestLabel.setForeground(Color.RED); this.add(highestLabel, BorderLayout.CENTER); //Bottom JPanel bottomPanel = new JPanel(); quitButton = new JButton("Quit"); quitButton.addActionListener(this); bottomPanel.add(quitButton); this.add(bottomPanel, BorderLayout.SOUTH); //Use comparator to sort this set scorerList = new TreeSet&lt;&gt;(new ScoreComparator()); &#125; /** * This method execute every time when action happens. * * @param e Action event. */ @Override public void actionPerformed(ActionEvent e) &#123; //If clicked "Enter Score" button if (e.getSource().equals(enterButton)) &#123; //If user did not input correct data, popup a message if (nameText.getText().equals("") || scoreText.getText().equals("")) &#123; JLabel promptLabel = new JLabel("Please input correct data!", JLabel.CENTER); JOptionPane.showMessageDialog(null, promptLabel, "Oops!", JOptionPane.ERROR_MESSAGE); return; &#125; try &#123; int tempScore = Integer.parseInt(scoreText.getText()); //Check if user input correct number if (tempScore &lt; 0 || tempScore &gt;= 100) throw new NumberFormatException(); //No problem, create new scorer, and store it Scorer newScorer = new Scorer(nameText.getText(), tempScore); scorerList.add(newScorer); //No need to check if has next Scorer highestScorer = scorerList.iterator().next(); //Then set the text of high label highestLabel.setText("Top scorer is " + highestScorer.getName() + " with " + highestScorer.getScore() + "points"); &#125; catch (NumberFormatException ex) &#123; //If user did not input correct number JLabel promptLabel = new JLabel("Please input correct data!", JLabel.CENTER); JOptionPane.showMessageDialog(null, promptLabel, "Oops!", JOptionPane.ERROR_MESSAGE); &#125; &#125; else if (e.getSource().equals(quitButton)) &#123; //If clicked "Quit" button //Print all scorer's name and score. for (Scorer s : scorerList) System.out.println("Name = " + s.getName() + ", Score = " + s.getScore()); //At last, goodbye my friend! System.exit(0); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6506-Assignment]]></title>
    <url>%2FCOM6506-Assignment.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertEquals;class MetaMorphicTestingExample &#123; /** * Illustration of how one might test the Metamorphic relation MA, * given as example in the assignment (that the day of the week can * be optional. */ @Test void MA() &#123; //Imagine that the following string had been in our CatPart tests: String originalInput = "Tue, 3 Jun 2008 11:05:30 GMT"; //Now we compute the output from the original test case. LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /*Now we generate a new test input to test the Metamorphic relation. * For the relation MA, we remove the 'Tue' part of the input, and make * the assumption that we should also remove the subsequent comma and space * as well to avoid a parsing error: */ String metaMorphInput = "3 Jun 2008 11:05:30 GMT"; LocalDateTime metaMorphDateTime = LocalDateTime.parse(metaMorphInput, DateTimeFormatter.RFC_1123_DATE_TIME); /*Our Metamorphic relation suggests that the resulting time should remain * equal to the original time. Therefore we make this our test oracle: */ assertEquals(originalDateTime, metaMorphDateTime); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;class CatPart &#123; @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 10:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertEquals;class MA &#123; /* * The year plus 1 should equals to the day plus 365 or 366(when leap year). */ @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 10:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ String metamorphicInput = "Wed, 6 Jan 2021 10:05:04 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(366)); &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Wed, 17 Apr 2019 09:06:07 -0100"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ String metamorphicInput = "Thu, 22 Jul 2021 08:12:33 -0130"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Fri, 4 Oct 2019 13:16:21 +0230"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sun, 14 Feb 2021 14:05:30 +0330"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(366)); &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Sun, 26 May 2019 07:03:40 -0500"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ String metamorphicInput = "Sun, 8 Aug 2021 06:35:07 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sun, 17 Nov 2019 15:08:02 +0630"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Mon, 22 Mar 2021 17:09:03 -0700"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ String metamorphicInput = "Mon, 3 Jun 2019 18:50:20 +0800"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime.minusDays(365)); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertEquals;class MB &#123; /* * When year changes, the month of year of two time should be equal. */ @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 10:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ String metamorphicInput = "Mon, 6 Jan 2025 10:05:04 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Mon, 17 Apr 2017 09:06:07 -0100"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ String metamorphicInput = "Sat, 22 Jul 2028 08:12:33 -0130"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sat, 4 Oct 2008 13:16:21 +0230"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Tue, 14 Feb 2012 14:05:30 +0330"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Tue, 26 May 2218 07:03:40 -0500"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ String metamorphicInput = "Thu, 8 Aug 2120 06:35:07 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sun, 17 Nov 1996 15:08:02 +0630"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Mon, 22 Mar 1920 17:09:03 -0700"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ String metamorphicInput = "Sat, 3 Jun 2000 18:50:20 +0800"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime.getMonth(), metamorphicDateTime.getMonth()); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertNotEquals;class MC &#123; /* * The second of minute is optional. * Missing out this value should affect the time where second is not zero. */ @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 10:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ String metamorphicInput = "Mon, 6 Jan 2020 10:05 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Tue, 17 Apr 2018 09:06 -0100"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ String metamorphicInput = "Wed, 22 Jul 2020 08:12 -0130"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Thu, 4 Oct 2018 13:16 +0230"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Fri, 14 Feb 2020 14:05 +0330"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Sat, 26 May 2018 07:03 -0500"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ String metamorphicInput = "Sat, 8 Aug 2020 06:35 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sat, 17 Nov 2018 15:08 +0630"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Sun, 22 Mar 2020 17:09 -0700"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ String metamorphicInput = "Sun, 3 Jun 2018 18:50 +0800"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertNotEquals(originalDateTime, metamorphicDateTime); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertEquals;class MD &#123; /* * Case insensitive. */ @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 10:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ String metamorphicInput = "mon, 6 jan 2020 10:05:04 gmt"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "tue, 17 apr 2018 09:06:07 -0100"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ String metamorphicInput = "wed, 22 jul 2020 08:12:33 -0130"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "thu, 4 oct 2018 13:16:21 +0230"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "fri, 14 feb 2020 14:05:30 +0330"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ String metamorphicInput = "sAt, 26 mAy 2018 07:03:40 -0500"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ String metamorphicInput = "saT, 8 auG 2020 06:35:07 gmT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "SAT, 17 NOV 2018 15:08:02 +0630"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "SUn, 22 MAr 2020 17:09:03 -0700"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ String metamorphicInput = "SuN, 3 JuN 2018 18:50:20 +0800"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213package dateTests;import org.junit.jupiter.api.Test;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import static org.junit.jupiter.api.Assertions.assertEquals;class ME &#123; /* * The month of year can be number or words. */ @Test void test0() &#123; String originalInput = "Mon, 6 Jan 2020 0010:05:04 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: am, even * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, even * offset ID: GMT */ String metamorphicInput = "Mon, 6 1 2020 0010:05:04 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test1() &#123; String originalInput = "Tue, 17 Apr 2018 09:06:07 -0100"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, even * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Tue, 17 4 2018 09:06:07 -0100"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test2() &#123; String originalInput = "Wed, 22 Jul 2020 08:12:33 -0130"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: last third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: -, is not a multiple of an hour */ String metamorphicInput = "Wed, 22 7 2020 08:12:33 -0130"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test3() &#123; String originalInput = "Thu, 4 Oct 2018 13:16:21 +0230"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: first third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, odd * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Thu, 4 10 2018 13:16:21 +0230"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test4() &#123; String originalInput = "Fri, 14 Feb 2020 14:05:30 +0330"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekdays * day-of-month: middle third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, even * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Fri, 14 2 2020 14:05:30 +0330"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test5() &#123; String originalInput = "Sat, 26 May 2018 07:03:40 -0500"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 2 * year: common year * hour-of-day: am, odd * minute-of-hour: &lt;10, odd * second-of-minute: &gt;=10, even * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Sat, 26 5 2018 07:03:40 -0500"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test6() &#123; String originalInput = "Sat, 8 Aug 2020 06:35:07 GMT"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 3 * year: leap year * hour-of-day: am, even * minute-of-hour: &gt;=10, odd * second-of-minute: &lt;10, odd * offset ID: GMT */ String metamorphicInput = "Sat, 8 8 2020 06:35:07 GMT"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test7() &#123; String originalInput = "Sat, 17 Nov 2018 15:08:02 +0630"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: middle third of month * month-of-year: quarter 4 * year: common year * hour-of-day: pm, odd * minute-of-hour: &gt;=10, even * second-of-minute: &lt;10, even * offset ID: +, is not a multiple of an hour */ String metamorphicInput = "Sat, 17 11 2018 15:08:02 +0630"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test8() &#123; String originalInput = "Sun, 22 Mar 2020 17:09:03 -0700"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: last third of month * month-of-year: quarter 1 * year: leap year * hour-of-day: pm, odd * minute-of-hour: &lt;10, odd * second-of-minute: &lt;10, odd * offset ID: -, is a multiple of an hour */ String metamorphicInput = "Sun, 22 3 2020 17:09:03 -0700"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125; @Test void test9() &#123; String originalInput = "Sun, 3 Jun 2018 18:50:20 +0800"; LocalDateTime originalDateTime = LocalDateTime.parse(originalInput, DateTimeFormatter.RFC_1123_DATE_TIME); /* * day-of-week: weekends * day-of-month: first third of month * month-of-year: quarter 2 * year: common year * hour-of-day: pm, even * minute-of-hour: &gt;=10, even * second-of-minute: &gt;=10, even * offset ID: +, is a multiple of an hour */ String metamorphicInput = "Sun, 3 6 2018 18:50:20 +0800"; LocalDateTime metamorphicDateTime = LocalDateTime.parse(metamorphicInput, DateTimeFormatter.RFC_1123_DATE_TIME); assertEquals(originalDateTime, metamorphicDateTime); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6506</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week11]]></title>
    <url>%2FCOM6516-Week11.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839/* * Developed by Neo on 12/8/18 7:39 PM. * Last modified 11/24/17 2:18 PM. * Copyright (c) 2018. All rights reserved. *//* * JCalculator.java * Class to produce a simple calculator in a window */import javax.swing.*;import java.awt.*;public class JCalculator extends JFrame &#123; private JCalculator() &#123; super("JCalculator"); Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); setSize(300, 400); setLocationRelativeTo(null); Container contentPane = this.getContentPane(); JTextArea display = new JTextArea(1, 20); display.setEditable(false); display.setFont(new Font("Courier", Font.BOLD, 40)); display.setPreferredSize(new Dimension(300, 100)); contentPane.add(display, BorderLayout.NORTH); CalculatorButtons buttons = new CalculatorButtons(display); contentPane.add(buttons, BorderLayout.CENTER); &#125; public static void main(String[] args) &#123; JFrame frm = new JCalculator(); frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frm.setVisible(true); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131/* * Developed by Neo on 12/8/18 7:48 PM. * Last modified 11/24/17 2:18 PM. * Copyright (c) 2018. All rights reserved. *//* * CalculatorButtons.java * COM6516 */import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Arrays;class CalculatorButtons extends JPanel &#123; private static final String[] buttonLabels = &#123;"7", "8", "9", "+", "4", "5", "6", "-", "1", "2", "3", "*", "0", "=", "+/-", "/"&#125;; private static final String[] opButtonLabels = &#123;"+", "-", "*", "=", "+/-", "/"&#125;; private String displayedValue = "0"; private String operand1; private enum OP &#123;PLUS, MINUS, MULT, DIV&#125; private OP operation = null; CalculatorButtons(JTextArea display) &#123; setLayout(new GridLayout(4, 4)); // create buttons using factory method for (int i = 0; i &lt; 16; i++) &#123; makeButton(this, buttonLabels[i], display); &#125; &#125; // factory method for making buttons private void makeButton(JPanel panel, String name, JTextArea display) &#123; JButton button = new JButton(name); panel.add(button); // ADD CODE HERE TO CREATE NEW BUTTON ACTION, AND LINK BUTTON TO DISPLAY button.addActionListener(new ButtonAction(name, display)); &#125; private class ButtonAction implements ActionListener &#123; private String theLabel; private JTextArea theDisplay; ButtonAction(String name, JTextArea display) &#123; theLabel = name; theDisplay = display; &#125; public void actionPerformed(ActionEvent actionEvent) &#123; if (Arrays.asList(opButtonLabels).contains(theLabel)) &#123; //If pressed + - * / = +/- if (theLabel.equals("=")) &#123; //= if (operation == null) &#123; //No second value //No need to update display System.out.println("No-op " + displayedValue); &#125; else &#123; //Calculate int result = 0; try &#123; switch (operation) &#123; case PLUS: result = Math.addExact(Integer.parseInt(operand1), Integer.parseInt(displayedValue)); break; case MINUS: result = Math.subtractExact(Integer.parseInt(operand1), Integer.parseInt(displayedValue)); break; case MULT: result = Math.multiplyExact(Integer.parseInt(operand1), Integer.parseInt(displayedValue)); break; case DIV: //No need to check result if overflow result = Integer.parseInt(operand1) / Integer.parseInt(displayedValue); break; &#125; System.out.println("Operands are " + operand1 + " and " + displayedValue); System.out.println("Result = " + result); displayedValue = Integer.toString(result); theDisplay.setText(displayedValue); &#125; catch (ArithmeticException e) &#123; displayedValue = "0"; theDisplay.setText(e.getMessage()); &#125; operation = null; &#125; &#125; else if (theLabel.equals("+/-")) &#123; //+/- int temp = Integer.parseInt(displayedValue) * -1; displayedValue = Integer.toString(temp); theDisplay.setText(displayedValue); &#125; else &#123; //+-*/ if (operation == null) &#123; //Continue only null operation switch (theLabel) &#123; case "+": operation = OP.PLUS; theDisplay.setText("+"); break; case "-": operation = OP.MINUS; theDisplay.setText("-"); break; case "*": operation = OP.MULT; theDisplay.setText("*"); break; case "/": operation = OP.DIV; theDisplay.setText("/"); break; &#125; operand1 = displayedValue; displayedValue = "0"; &#125; &#125; &#125; else &#123; //If pressed number if (displayedValue.equals("0")) displayedValue = theLabel; else &#123; if (displayedValue.length() &lt; 8) //Cannot larger than 10M to prevent overflow displayedValue += theLabel; &#125; theDisplay.setText(displayedValue); &#125; &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137/* * Developed by Neo on 12/8/18 7:48 PM. * Last modified 11/24/17 2:18 PM. * Copyright (c) 2018. All rights reserved. *//* * CalculatorButtons.java * COM6516 */import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Arrays;class CalculatorButtons extends JPanel &#123; private static final String[] buttonLabels = &#123;"7", "8", "9", "+", "4", "5", "6", "-", "1", "2", "3", "*", "0", "=", ".", "/"&#125;; private static final String[] opButtonLabels = &#123;"+", "-", "*", "=", "/"&#125;; private String displayedValue = "0"; private String operand1; private enum OP &#123;PLUS, MINUS, MULT, DIV&#125; private OP operation = null; private boolean dotPressed = false; CalculatorButtons(JTextArea display) &#123; setLayout(new GridLayout(4, 4)); // create buttons using factory method for (int i = 0; i &lt; 16; i++) &#123; makeButton(this, buttonLabels[i], display); &#125; &#125; // factory method for making buttons private void makeButton(JPanel panel, String name, JTextArea display) &#123; JButton button = new JButton(name); panel.add(button); // ADD CODE HERE TO CREATE NEW BUTTON ACTION, AND LINK BUTTON TO DISPLAY button.addActionListener(new ButtonAction(name, display)); &#125; private class ButtonAction implements ActionListener &#123; private String theLabel; private JTextArea theDisplay; ButtonAction(String name, JTextArea display) &#123; theLabel = name; theDisplay = display; &#125; public void actionPerformed(ActionEvent actionEvent) &#123; if (Arrays.asList(opButtonLabels).contains(theLabel)) &#123; //If pressed + - * / = if (theLabel.equals("=")) &#123; //= if (operation == null) &#123; //No second value //No need to update display System.out.println("No-op " + displayedValue); &#125; else &#123; //Calculate float result = 0; try &#123; switch (operation) &#123; case PLUS: result = Float.parseFloat(operand1) + Float.parseFloat(displayedValue); break; case MINUS: result = Float.parseFloat(operand1) - Float.parseFloat(displayedValue); break; case MULT: result = Float.parseFloat(operand1) * Float.parseFloat(displayedValue); break; case DIV: result = Float.parseFloat(operand1) / Float.parseFloat(displayedValue); break; &#125; System.out.println("Operands are " + operand1 + " and " + displayedValue); System.out.println("Result = " + result); displayedValue = Float.toString(result); theDisplay.setText(displayedValue); &#125; catch (ArithmeticException e) &#123; displayedValue = "0"; theDisplay.setText(e.getMessage()); &#125; dotPressed = true; //Because result must be float and have a "." operation = null; &#125; &#125; else &#123; //+-*/ if (operation == null) &#123; //Continue only null operation switch (theLabel) &#123; case "+": operation = OP.PLUS; theDisplay.setText("+"); break; case "-": operation = OP.MINUS; theDisplay.setText("-"); break; case "*": operation = OP.MULT; theDisplay.setText("*"); break; case "/": operation = OP.DIV; theDisplay.setText("/"); break; &#125; dotPressed = false; operand1 = displayedValue; displayedValue = "0"; &#125; &#125; &#125; else &#123; //If pressed number or "." if (displayedValue.length() &lt; 8) &#123; //Prevent overflow if (theLabel.equals(".")) &#123; //Press "." if (!dotPressed) &#123; displayedValue += theLabel; &#125; dotPressed = true; &#125; else &#123; //Press number if (displayedValue.equals("0")) displayedValue = theLabel; else &#123; displayedValue += theLabel; &#125; &#125; &#125; theDisplay.setText(displayedValue); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week10]]></title>
    <url>%2FCOM6516-Week10.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;public class MyFrame extends JFrame implements ActionListener &#123; private MyPanel drawingPanel; private MyFrame() &#123; int width = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2.0); int height = (int) (width / 16.0 * 9.0); setSize(width, height); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); //For better looks. try &#123; UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; drawingPanel = new MyPanel(); drawingPanel.setPolygon(5); Container contentPane = this.getContentPane(); contentPane.add(drawingPanel, BorderLayout.CENTER); JPanel columnOfButtons = new JPanel(new GridLayout(8, 1)); ButtonGroup buttonGroup = new ButtonGroup(); for (int i = 3; i &lt; 10; i++) &#123; makeRadioButton(columnOfButtons, String.valueOf(i), buttonGroup, this); &#125; JButton exit = new JButton("Exit"); exit.addActionListener(this); columnOfButtons.add(exit); contentPane.add(columnOfButtons, BorderLayout.EAST); setVisible(true); &#125; public static void main(String[] args) &#123; javax.swing.SwingUtilities.invokeLater(MyFrame::new); &#125; private void makeRadioButton(JPanel p, String name, ButtonGroup group, ActionListener target) &#123; JRadioButton b = new JRadioButton(name); group.add(b); // add it to the specified JPanel and make the JPanel listen p.add(b); b.addActionListener(target); &#125; public void actionPerformed(ActionEvent e) &#123; // Do the appropriate thing depending on which button is pressed. // Use the getActionCommand() method to identify the button. switch (e.getActionCommand()) &#123; case "Exit": System.exit(0); case "3": drawingPanel.setPolygon(3); break; case "4": drawingPanel.setPolygon(4); break; case "5": drawingPanel.setPolygon(5); break; case "6": drawingPanel.setPolygon(6); break; case "7": drawingPanel.setPolygon(7); break; case "8": drawingPanel.setPolygon(8); break; case "9": drawingPanel.setPolygon(9); break; &#125; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/* * Developed by Neo on 26/11/18 15:37. * Last modified 17/11/17 14:21. * Copyright (c) 2018. All rights reserved. */import javax.swing.*;import java.awt.*;public class MyPanel extends JPanel &#123; private int sides = 0; void setPolygon(int sides) &#123; this.sides = sides; this.repaint(); &#125; @Override protected void paintComponent(Graphics g) &#123; super.paintComponent(g); Graphics2D g2 = (Graphics2D) g; g2.setColor(Color.RED); // Make text and shapes appear smoother g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); if (sides == 0) sides = 5; int[] x = new int[sides]; int[] y = new int[sides]; int width = getWidth(); int height = getHeight(); int r = (width &gt; height ? height : width) / 3; for (int i = 0; i &lt; sides; i++) &#123; x[i] = (int) (width / 2 + r * Math.cos(2 * Math.PI / sides * i)); y[i] = (int) (height / 2 + r * Math.sin(2 * Math.PI / sides * i)); &#125; Shape shape = new Polygon(x, y, sides); g2.draw(shape); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week09]]></title>
    <url>%2FCOM6516-Week09.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/* * Developed by Neo on 19/11/18 11:54. * Last modified 19/11/18 11:54. * Copyright (c) 2018. All rights reserved. */import javax.swing.*;import java.awt.*;public class CornerString extends JFrame &#123; public CornerString() &#123; super("Corner String"); //For better looks. try &#123; UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); this.setSize(960, 480); this.setResizable(false); this.setLocationRelativeTo(null); this.setContentPane(new StringPanel()); this.setVisible(true); &#125; public static void main(String[] args) &#123; new CornerString(); &#125; public class StringPanel extends JPanel &#123; public StringPanel() &#123; super(new BorderLayout()); JLabel label1 = new JLabel("To be or not to be"); JLabel label2 = new JLabel("To be or not to be"); JLabel label3 = new JLabel("To be or not to be"); JLabel label4 = new JLabel("To be or not to be"); label1.setFont(new Font("Consolas", Font.PLAIN, 32)); label1.setForeground(Color.BLUE); label2.setFont(new Font("Comic Sans MS", Font.PLAIN, 32)); label2.setForeground(Color.GREEN); label3.setFont(new Font("Monospaced", Font.PLAIN, 32)); label3.setForeground(Color.RED); label4.setFont(new Font("Courier", Font.PLAIN, 32)); label4.setForeground(Color.YELLOW); JPanel northPanel = new JPanel(); northPanel.setLayout(new BoxLayout(northPanel, BoxLayout.X_AXIS)); northPanel.add(label1); northPanel.add(Box.createHorizontalGlue()); northPanel.add(label2); JPanel southPanel = new JPanel(); southPanel.setLayout(new BoxLayout(southPanel, BoxLayout.X_AXIS)); southPanel.add(label3); southPanel.add(Box.createHorizontalGlue()); southPanel.add(label4); add(northPanel, BorderLayout.NORTH); add(southPanel, BorderLayout.SOUTH); &#125; &#125;&#125; 12345678910111213141516171819202122232425262728293031/* * Developed by Neo on 19/11/18 15:44. * Last modified 19/11/18 15:44. * Copyright (c) 2018. All rights reserved. */import javax.swing.*;public class GIFFrame extends JFrame &#123; public GIFFrame() &#123; super("GIF Frame"); setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); ImageIcon imageIcon = new ImageIcon("globe.gif", "globe"); setSize(imageIcon.getIconWidth(), imageIcon.getIconHeight()); JLabel imageLabel = new JLabel(imageIcon); add(imageLabel); setLocationRelativeTo(null); setVisible(true); &#125; public static void main(String[] args) &#123; new GIFFrame(); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week08]]></title>
    <url>%2FCOM6516-Week08.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425/* * Developed by Neo on 12/11/18 10:21. * Last modified 12/11/18 10:21. * Copyright (c) 2018. All rights reserved. */import java.util.*;public class ListStringConvert &#123; public static void main(String[] args) &#123; List&lt;String&gt; fixedList = Arrays.asList("elephant","lion","leopard", "tiger"); System.out.println(fixedList); List&lt;String&gt; myList = new LinkedList&lt;String&gt;(fixedList);// Iterator&lt;String&gt; iter = myList.iterator(); ListIterator&lt;String&gt; iter = myList.listIterator(); ArrayList&lt;String&gt; newList = new ArrayList&lt;&gt;(); while (iter.hasNext()) &#123; newList.add(iter.next().toUpperCase()); &#125; System.out.println(newList); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import java.io.File;import java.io.FileNotFoundException;import java.util.*;/* HashSetTest.java Example class that demonstrates used of HashSet Collection. */public class HashSetTest &#123; public static void main(String args[]) &#123; Set&lt;Person&gt; people = new TreeSet&lt;Person&gt;(new AgeComparator());// here we declare people to be the most general type, which makes it possible to swap HashSet for TreeSet. StringTokenizer st; String firstName, surname, line; int age; // read data from file // (The try/catch construction catches an exception, ie. error, // if the file is not found) try &#123; Scanner file = new Scanner(new File("Person.txt")); // assume file has at least one line // that specifies the number of records int numData = file.nextInt(); // read in each line, and split into tokens for (int i = 0; i &lt; numData; i++) &#123; line = file.next(); st = new StringTokenizer(line, "|"); firstName = st.nextToken(); surname = st.nextToken(); age = Integer.parseInt(st.nextToken()); people.add(new Person(firstName, surname, age)); &#125; file.close(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); return; &#125; // iterate through hash set Iterator&lt;Person&gt; iter = people.iterator(); while (iter.hasNext()) &#123; Person p = iter.next(); if (!p.getSurname().equals("James") &amp;&amp; !p.getSurname().equals("Cole")) &#123; iter.remove(); &#125; &#125; Iterator&lt;Person&gt; iter = people.iterator(); while (iter.hasNext()) &#123; Person p = iter.next(); if (p.getSurname().equals("Wright-Phillips")) &#123; iter.remove(); &#125; &#125; // iterate through hash set Iterator&lt;Person&gt; i = people.iterator(); while (i.hasNext()) &#123; Person p = i.next(); System.out.print(p); System.out.print(", hash code "); System.out.println(p.hashCode()); &#125; System.out.println("Using a comparator of a person class :"); Person firstPerson = people.iterator().next();//grab the first one for (Person p : people) System.out.println(firstPerson + " compared to " + p + " returns " + firstPerson.compareTo(p)); System.out.println("Using AgeComparator :"); Comparator&lt;Person&gt; comparator = new AgeComparator(); firstPerson = people.iterator().next();//grab the first one for (Person p : people) System.out.println(firstPerson + " compared to " + p + " returns " + comparator.compare(firstPerson, p)); &#125;&#125; 12345678import java.util.*;public class AgeComparator implements Comparator&lt;Person&gt; &#123; public int compare(Person a, Person b) &#123; return b.getAge() - a.getAge(); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/* Shakespeare.java Reads information from Shakespeare.txt */import java.io.File;import java.io.FileNotFoundException;import java.util.*;public class Shakespeare &#123; public static void main(String args[]) &#123; String line; String wd; StringTokenizer st; List&lt;String&gt; words = new LinkedList&lt;String&gt;(); // Read data from file and split into tokens, i.e. words // (The try/catch construction catches an exception, ie. error, // if the file is not found) try &#123; Scanner file = new Scanner(new File("Shakespeare.txt")); // read in each line, and split into tokens while (file.hasNext()) &#123; line = file.next(); st = new StringTokenizer(line, " .,:?'"); // space, full stop, comma, etc. // are included as token delimiters // and are thus not tokens themselves while (st.hasMoreTokens()) &#123; wd = st.nextToken(); words.add(wd); &#125; &#125; file.close(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); return; &#125; System.out.println("words: " + words); for (String word : words) &#123; if (word.charAt(0) == 'a') System.out.print(word + ", "); &#125; System.out.println(); // Produce a sorted list Set&lt;String&gt; wds = new TreeSet&lt;String&gt;(new StringComparator()); wds.addAll(words); System.out.println("sorted words: " + wds); List&lt;String&gt; lowerWords = new LinkedList&lt;String&gt;(); for (String word : words) lowerWords.add(word.toLowerCase()); Set&lt;String&gt; lowerWds = new TreeSet&lt;String&gt;(new StringComparator()); lowerWds.addAll(lowerWords); for (String word : lowerWds) System.out.println(word + ": " + Collections.frequency(lowerWords, word)); &#125;&#125; 1234567891011121314/* * Developed by Neo on 12/11/18 11:40. * Last modified 12/11/18 11:40. * Copyright (c) 2018. All rights reserved. */import java.util.Comparator;public class StringComparator implements Comparator&lt;String&gt; &#123; @Override public int compare(String o1, String o2) &#123; return o1.compareTo(o2); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637/* * Developed by Neo on 12/11/18 14:40. * Last modified 12/11/18 14:40. * Copyright (c) 2018. All rights reserved. */import java.util.ArrayList;import java.util.List;public class ListAgain &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; listA = new ArrayList&lt;&gt;(); listA.add(1); listA.add(2); listA.add(3); listA.add(4); listA.add(5); List&lt;Integer&gt; listB = new ArrayList&lt;&gt;(); listB.add(3); listB.add(4); listB.add(5); listB.add(6); listB.add(7); List&lt;Integer&gt; listC = new ArrayList&lt;&gt;(listA); listC.retainAll(listB); listA.addAll(listB); listA.removeAll(listC); System.out.println(listA); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/* * Developed by Neo on 12/11/18 15:26. * Last modified 12/11/18 15:26. * Copyright (c) 2018. All rights reserved. */import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;public class MoreList &#123; public static void main(String[] args) &#123; LinkedList&lt;Integer&gt; listA = new LinkedList&lt;&gt;(); listA.add(0); listA.add(1); listA.add(2); listA.add(3); listA.add(4); List&lt;Integer&gt; listB = new ArrayList&lt;&gt;(); listB.add(5); listB.add(6); listB.add(7); listB.add(8); listB.add(9); ListIterator&lt;Integer&gt; iteratorA; ListIterator&lt;Integer&gt; iteratorB; // 1 iteratorA = listA.listIterator(); iteratorB = listB.listIterator(); while (iteratorA.hasNext()) &#123; iteratorA.next(); if (iteratorB.hasNext()) iteratorA.add(iteratorB.next()); &#125; while (iteratorB.hasNext()) &#123; iteratorA.add(iteratorB.next()); &#125; System.out.println("List A=" + listA); System.out.println("List B=" + listB); // 2 iteratorB = listB.listIterator(); while (iteratorB.hasNext()) &#123; iteratorB.next(); if (iteratorB.hasNext()) &#123; iteratorB.next(); iteratorB.remove(); &#125; &#125; System.out.println("List A=" + listA); System.out.println("List B=" + listB); // 3 listA.removeAll(listB); System.out.println("List A=" + listA); System.out.println("List B=" + listB); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week07]]></title>
    <url>%2FCOM6516-Week07.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031/* * Developed by Neo on 05/11/18 11:12. * Last modified 05/11/18 10:39. * Copyright (c) 2018. All rights reserved. */import sheffield.EasyReader;/** * This class can generate a walking plan for a old person */public class GenerateWalkingPlan &#123; /** * Program starts here. * * @param args command line arguments. */ public static void main(String[] args) &#123; // Ask for user's name and age for creating plan EasyReader myReader = new EasyReader(); String name = myReader.readString("What is your name? "); int age = myReader.readInt("Hello " + name + ", how old are you? "); // Create a walk plan and print it WalkingPlan newPlan = new WalkingPlan(name, age); newPlan.generate(); newPlan.toPrint(); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899/* * Developed by Neo on 05/11/18 11:10. * Last modified 05/11/18 10:45. * Copyright (c) 2018. All rights reserved. */import java.util.Random;/** * This is walk plan for old person */class WalkingPlan &#123; /** * This plan only contains 14 days plan */ private static final int PLAN_DAYS = 14; /** * We define more than 1500 meters as hard day */ private static final int HARD_MODE = 1500; /** * If two hard days in a row, we need change second day as relax day */ private static final int RELAX_MODE = 1000; /** * User's name */ private String name; /** * User's age */ private int age; /** * Every days plan */ private int[] plan; /** * The total meters of whole plan */ private int total; /** * Average meters of this plan */ private long average; /** * Constructor method for WalkingPlan * * @param name user's name * @param age user's age */ WalkingPlan(String name, int age) &#123; this.name = name; this.age = age; // Initialize these variables plan = new int[PLAN_DAYS]; total = 0; average = 0; &#125; /** * This method will generate a waling plan */ void generate() &#123; Random random = new Random(); for (int i = 0; i &lt; PLAN_DAYS; i++) &#123; plan[i] = 10 * (10 + random.nextInt(240)); // Generate a int in [100, 2500) if (i &gt; 0) &#123; if (plan[i] &gt; HARD_MODE &amp;&amp; plan[i - 1] &gt; HARD_MODE) plan[i] = RELAX_MODE; &#125; total += plan[i]; &#125; average = Math.round((double) total / PLAN_DAYS); &#125; /** * This method will print walking plan */ void toPrint() &#123; System.out.println(); System.out.println(name + "(age=" + age + ") - this is your walking plan:"); for (int i = 0; i &lt; PLAN_DAYS; i++) &#123; System.out.print("Day " + (i + 1) + ": walk " + plan[i] + "m"); if (plan[i] &gt; HARD_MODE) System.out.println(" &lt;--- hard"); else System.out.println(); &#125; System.out.println(); System.out.println("Total number of meters walked = " + total); System.out.println("Average number of meters walked per day = " + average); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6506 Week07]]></title>
    <url>%2FCOM6506-Week07.html</url>
    <content type="text"><![CDATA[Diamond Gate 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package diamond;import java.util.Collection;import java.util.HashSet;class DiamondGate &#123; private DiamondGateState state; private Collection&lt;String&gt; registered; private int visitors; private Collection&lt;String&gt; overdue, bookList; DiamondGate(Collection&lt;String&gt; registered, Collection&lt;String&gt; overdue) &#123; this.registered = registered; this.overdue = overdue; this.bookList = new HashSet&lt;&gt;(); this.visitors = 0; this.state = new Idle(this); &#125; // State Machine operations void entry_scan(String key) &#123; state.entry_scan(key); &#125; void exit_scan(String key) &#123; state.exit_scan(key); &#125; void entry_sensor_activated() &#123; state.entry_sensor_activated(); &#125; void exit_sensor_activated() &#123; state.exit_sensor_activated(); &#125; void time_out() &#123; state.time_out(); &#125; void pay_fine(String key) &#123; state.pay_fine(key); &#125; void return_book(String key) &#123; state.return_book(key); &#125; // Context operations DiamondGateState.State getState() &#123; return state.getState(); &#125; void setState(DiamondGateState state) &#123; this.state = state; &#125; boolean isRegistered(String s) &#123; return registered.contains(s); &#125; void incrementVisitors() &#123; visitors++; &#125; void decrementVisitors() &#123; visitors--; &#125; int getVisitors() &#123; return visitors; &#125; boolean isOverdue(String key) &#123; return overdue.contains(key); &#125; void paid_fine(String key) &#123; if (overdue.contains(key)) &#123; overdue.remove(key); bookList.add(key); &#125; &#125; void returned_book(String key) &#123; if (bookList.contains(key)) &#123; bookList.remove(key); &#125; &#125;&#125; 12345678910111213141516171819202122232425262728package diamond;abstract class DiamondGateState &#123; protected enum State &#123;IDLE, OPENEXIT, OPENENTRY, PAIDFINE&#125; DiamondGate context; DiamondGateState(DiamondGate context) &#123; this.context = context; &#125; abstract void entry_scan(String key); abstract void exit_scan(String key); abstract void entry_sensor_activated(); abstract void exit_sensor_activated(); abstract void time_out(); abstract void pay_fine(String key); abstract void return_book(String key); abstract State getState();&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252package diamond;import org.junit.jupiter.api.Test;import java.util.Collection;import java.util.HashSet;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;class DiamondGateTest &#123; @Test void testSimpleEntry() &#123; // Create our set of registered students / staff. Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("ac1nw"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); // Pass this when constructing our system under test (diamondGate); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); // Now for the actual test sequence: diamondGate.entry_scan("ac1nw"); // We know that ac1nw is registered. diamondGate.entry_sensor_activated(); diamondGate.time_out(); // We'd expect the number of visitors in the Diamond to be 1. assertEquals(1, diamondGate.getVisitors()); &#125; @Test void testSimpleExit() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18by"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.exit_scan("acs18by"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(-1, diamondGate.getVisitors()); &#125; @Test void testEntryTimeout() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18by"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.entry_scan("acs18by");// diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(0, diamondGate.getVisitors()); &#125; @Test void testExitTimeout() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18by"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.exit_scan("acs18by");// diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(0, diamondGate.getVisitors()); &#125; @Test void testOverdue() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18test"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); overdue.add("acs18test"); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(1, diamondGate.getVisitors()); assertTrue(diamondGate.isOverdue("acs18test")); diamondGate.exit_scan("acs18test"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(1, diamondGate.getVisitors()); diamondGate.pay_fine("acs18test"); assertFalse(diamondGate.isOverdue("acs18test")); assertEquals(DiamondGateState.State.PAIDFINE, diamondGate.getState()); diamondGate.return_book("acs18test"); assertEquals(DiamondGateState.State.IDLE, diamondGate.getState()); diamondGate.exit_scan("acs18test"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(0, diamondGate.getVisitors()); &#125; @Test void testNotRegisteredEntry() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18by"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(0, diamondGate.getVisitors()); &#125; @Test void testMultiEntry() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18test1"); registered.add("acs18test2"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test1"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(1, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test2"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(2, diamondGate.getVisitors()); &#125; @Test void testEntryAndExit() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18test1"); registered.add("acs18test2"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test1"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(1, diamondGate.getVisitors()); diamondGate.entry_scan("acs18test2"); diamondGate.entry_sensor_activated(); diamondGate.time_out(); assertEquals(2, diamondGate.getVisitors()); diamondGate.exit_scan("acs18test1"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(1, diamondGate.getVisitors()); diamondGate.exit_scan("acs18test2"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(0, diamondGate.getVisitors()); &#125; @Test void testMultiExit() &#123; Collection&lt;String&gt; registered = new HashSet&lt;&gt;(); registered.add("acs18test1"); registered.add("acs18test2"); Collection&lt;String&gt; overdue = new HashSet&lt;&gt;(); DiamondGate diamondGate = new DiamondGate(registered, overdue); assertEquals(0, diamondGate.getVisitors()); diamondGate.exit_scan("acs18test1"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(-1, diamondGate.getVisitors()); diamondGate.exit_scan("acs18test2"); diamondGate.exit_sensor_activated(); diamondGate.time_out(); assertEquals(-2, diamondGate.getVisitors()); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package diamond;class Idle extends DiamondGateState &#123; Idle(DiamondGate context) &#123; super(context); &#125; @Override void entry_scan(String key) &#123; if (context.isRegistered(key)) &#123; context.setState(new OpenEntry(context)); &#125; &#125; @Override void exit_scan(String key) &#123; if (context.isRegistered(key) &amp;&amp; !context.isOverdue(key)) &#123; context.setState(new OpenExit(context)); &#125; &#125; @Override void entry_sensor_activated() &#123; &#125; @Override void exit_sensor_activated() &#123; &#125; @Override void time_out() &#123; &#125; @Override void pay_fine(String key) &#123; if (context.isOverdue(key)) &#123; context.paid_fine(key); context.setState(new PaidFine(context)); &#125; &#125; @Override void return_book(String key) &#123; &#125; @Override State getState() &#123; return State.IDLE; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package diamond;import java.util.Timer;import java.util.TimerTask;class OpenEntry extends DiamondGateState &#123; OpenEntry(DiamondGate context) &#123; super(context); TimerTask task = new TimerTask() &#123; @Override public void run() &#123; context.time_out(); &#125; &#125;; Timer timer = new Timer("Timer"); long delay = 5000L; timer.schedule(task, delay); &#125; @Override void entry_scan(String key) &#123; &#125; @Override void exit_scan(String key) &#123; &#125; @Override void entry_sensor_activated() &#123; context.incrementVisitors(); &#125; @Override void exit_sensor_activated() &#123; &#125; @Override void time_out() &#123; context.setState(new Idle(context)); &#125; @Override void pay_fine(String key) &#123; &#125; @Override void return_book(String key) &#123; &#125; @Override State getState() &#123; return State.OPENENTRY; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package diamond;import java.util.Timer;import java.util.TimerTask;class OpenExit extends DiamondGateState &#123; OpenExit(DiamondGate context) &#123; super(context); TimerTask task = new TimerTask() &#123; @Override public void run() &#123; context.time_out(); &#125; &#125;; Timer timer = new Timer("Timer"); long delay = 5000L; timer.schedule(task, delay); &#125; @Override void entry_scan(String key) &#123; &#125; @Override void exit_scan(String key) &#123; &#125; @Override void entry_sensor_activated() &#123; &#125; @Override void exit_sensor_activated() &#123; context.decrementVisitors(); &#125; @Override void time_out() &#123; context.setState(new Idle(context)); &#125; @Override void pay_fine(String key) &#123; &#125; @Override void return_book(String key) &#123; &#125; @Override State getState() &#123; return State.OPENEXIT; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package diamond;class PaidFine extends DiamondGateState &#123; PaidFine(DiamondGate context) &#123; super(context); &#125; @Override void entry_scan(String key) &#123; &#125; @Override void exit_scan(String key) &#123; &#125; @Override void entry_sensor_activated() &#123; &#125; @Override void exit_sensor_activated() &#123; &#125; @Override void time_out() &#123; &#125; @Override void pay_fine(String key) &#123; &#125; @Override void return_book(String key) &#123; context.returned_book(key); context.setState(new Idle(context)); &#125; @Override State getState() &#123; return State.PAIDFINE; &#125;&#125; TCP Server 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class TCP &#123; TCPState state; public TCP() &#123; this.state = new CLOSED(this); &#125; void passive_open() &#123; state.passive_open(); &#125; void close() &#123; state.close(); &#125; void receive_syn() &#123; state.receive_syn(); &#125; void receive_syn_ack() &#123; state.receive_syn_ack(); &#125; void receive_fin() &#123; state.receive_fin(); &#125; void receive_ack() &#123; state.receive_ack(); &#125; void receive_ack_fin() &#123; state.receive_ack_fin(); &#125; void send_syn_ack() &#123; state.send_syn_ack(); &#125; void send_syn() &#123; state.send_syn(); &#125; void send_ack() &#123; state.send_ack(); &#125; void send_fin() &#123; state.send_fin(); &#125; void timeout() &#123; state.timeout(); &#125; void setState(TCPState state) &#123; this.state = state; &#125; TCPState.State getState() &#123; return state.getState(); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738public abstract class TCPState &#123; protected enum State &#123; CLOSED, LISTEN, SYN_RCVD, SYN_SENT, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING, TIME_WAIT &#125; protected TCP context; public TCPState(TCP context) &#123; this.context = context; &#125; public abstract void passive_open(); public abstract void close(); public abstract void receive_syn(); public abstract void receive_syn_ack(); public abstract void receive_fin(); public abstract void receive_ack(); public abstract void receive_ack_fin(); public abstract void send_syn_ack(); public abstract void send_syn(); public abstract void send_ack(); public abstract void send_fin(); public abstract void timeout(); public abstract State getState();&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class CLOSED extends TCPState &#123; public CLOSED(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; context.setState(new LISTEN(context)); &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.CLOSED; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class CLOSE_WAIT extends TCPState &#123; public CLOSE_WAIT(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; context.setState(new LAST_ACK(context)); &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.CLOSE_WAIT; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class CLOSING extends TCPState &#123; public CLOSING(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; context.setState(new TIME_WAIT(context)); &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.CLOSING; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class ESTABLISHED extends TCPState &#123; public ESTABLISHED(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; context.setState(new FIN_WAIT_1(context)); &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; context.setState(new CLOSE_WAIT(context)); &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.ESTABLISHED; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import java.util.Random;public class FIN_WAIT_1 extends TCPState &#123; public FIN_WAIT_1(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; context.setState(new CLOSING(context)); &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; context.setState(new TIME_WAIT(context)); &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; context.setState(new FIN_WAIT_2(context)); &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.FIN_WAIT_1; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class FIN_WAIT_2 extends TCPState &#123; public FIN_WAIT_2(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; context.setState(new TIME_WAIT(context)); &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.FIN_WAIT_2; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class LAST_ACK extends TCPState &#123; public LAST_ACK(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; context.setState(new CLOSED(context)); &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.LAST_ACK; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class LISTEN extends TCPState &#123; public LISTEN(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; context.setState(new CLOSED(context)); &#125; @Override public void receive_syn() &#123; context.setState(new SYN_RCVD(context)); &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; context.setState(new SYN_SENT(context)); &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.LISTEN; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class SYN_RCVD extends TCPState &#123; public SYN_RCVD(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; context.setState(new FIN_WAIT_1(context)); &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; context.setState(new ESTABLISHED(context)); &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.SYN_RCVD; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class SYN_SENT extends TCPState &#123; public SYN_SENT(TCP context) &#123; super(context); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; context.setState(new SYN_RCVD(context)); &#125; @Override public void receive_syn_ack() &#123; context.setState(new ESTABLISHED(context)); &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; &#125; @Override public State getState() &#123; return State.SYN_SENT; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import java.util.Timer;import java.util.TimerTask;public class TIME_WAIT extends TCPState &#123; public TIME_WAIT(TCP context) &#123; super(context); TimerTask task = new TimerTask() &#123; @Override public void run() &#123; context.timeout(); &#125; &#125;; Timer timer = new Timer("Timer"); long delay = 5000L; timer.schedule(task, delay); &#125; @Override public void passive_open() &#123; &#125; @Override public void close() &#123; &#125; @Override public void receive_syn() &#123; &#125; @Override public void receive_syn_ack() &#123; &#125; @Override public void receive_fin() &#123; &#125; @Override public void receive_ack() &#123; &#125; @Override public void receive_ack_fin() &#123; &#125; @Override public void send_syn_ack() &#123; &#125; @Override public void send_syn() &#123; &#125; @Override public void send_ack() &#123; &#125; @Override public void send_fin() &#123; &#125; @Override public void timeout() &#123; context.setState(new CLOSED(context)); &#125; @Override public State getState() &#123; return State.TIME_WAIT; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.assertEquals;class TCPTest &#123; @Test void testTCP1() &#123; TCP tcp = new TCP(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.print("-&gt;"); tcp.passive_open(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LISTEN, tcp.getState()); System.out.print("-&gt;"); tcp.receive_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_RCVD, tcp.getState()); System.out.print("-&gt;"); tcp.send_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.ESTABLISHED, tcp.getState()); System.out.print("-&gt;"); tcp.receive_fin(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSE_WAIT, tcp.getState()); System.out.print("-&gt;"); tcp.close(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LAST_ACK, tcp.getState()); System.out.print("-&gt;"); tcp.receive_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.println(); &#125; @Test void testTCP2() &#123; TCP tcp = new TCP(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.print("-&gt;"); tcp.passive_open(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LISTEN, tcp.getState()); System.out.print("-&gt;"); tcp.send_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_SENT, tcp.getState()); System.out.print("-&gt;"); tcp.receive_syn_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.ESTABLISHED, tcp.getState()); System.out.print("-&gt;"); tcp.close(); System.out.print(tcp.getState()); assertEquals(TCPState.State.FIN_WAIT_1, tcp.getState()); System.out.print("-&gt;"); tcp.receive_fin(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSING, tcp.getState()); System.out.print("-&gt;"); tcp.receive_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.TIME_WAIT, tcp.getState()); System.out.print("-&gt;"); tcp.timeout(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.println(); &#125; @Test void testTCP3() &#123; TCP tcp = new TCP(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.print("-&gt;"); tcp.passive_open(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LISTEN, tcp.getState()); System.out.print("-&gt;"); tcp.send_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_SENT, tcp.getState()); System.out.print("-&gt;"); tcp.receive_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_RCVD, tcp.getState()); System.out.print("-&gt;"); tcp.close(); System.out.print(tcp.getState()); assertEquals(TCPState.State.FIN_WAIT_1, tcp.getState()); System.out.print("-&gt;"); tcp.send_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.FIN_WAIT_2, tcp.getState()); System.out.print("-&gt;"); tcp.receive_fin(); System.out.print(tcp.getState()); assertEquals(TCPState.State.TIME_WAIT, tcp.getState()); System.out.print("-&gt;"); tcp.timeout(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.println(); &#125; @Test void testTCP4() &#123; TCP tcp = new TCP(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.print("-&gt;"); tcp.passive_open(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LISTEN, tcp.getState()); System.out.print("-&gt;"); tcp.receive_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_RCVD, tcp.getState()); System.out.print("-&gt;"); tcp.close(); System.out.print(tcp.getState()); assertEquals(TCPState.State.FIN_WAIT_1, tcp.getState()); System.out.print("-&gt;"); tcp.receive_ack_fin(); System.out.print(tcp.getState()); assertEquals(TCPState.State.TIME_WAIT, tcp.getState()); System.out.print("-&gt;"); tcp.timeout(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.println(); &#125; @Test void testTCP5() &#123; TCP tcp = new TCP(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.print("-&gt;"); tcp.passive_open(); System.out.print(tcp.getState()); assertEquals(TCPState.State.LISTEN, tcp.getState()); System.out.print("-&gt;"); tcp.receive_syn(); System.out.print(tcp.getState()); assertEquals(TCPState.State.SYN_RCVD, tcp.getState()); System.out.print("-&gt;"); tcp.send_ack(); System.out.print(tcp.getState()); assertEquals(TCPState.State.ESTABLISHED, tcp.getState()); System.out.print("-&gt;"); tcp.close(); System.out.print(tcp.getState()); assertEquals(TCPState.State.FIN_WAIT_1, tcp.getState()); System.out.print("-&gt;"); tcp.receive_ack_fin(); System.out.print(tcp.getState()); assertEquals(TCPState.State.TIME_WAIT, tcp.getState()); System.out.print("-&gt;"); tcp.timeout(); System.out.print(tcp.getState()); assertEquals(TCPState.State.CLOSED, tcp.getState()); System.out.println(); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6506</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week05]]></title>
    <url>%2FCOM6516-Week05.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132/** * Multiplication table * Create a table to show 1 to 9 multiplication. */public class MultiplicationTable &#123; /** * World starts here * * @param args Command line arguments */ public static void main(String[] args) &#123; int num = 9; System.out.print(" |"); for (int i = 0; i &lt; num; i++) &#123; System.out.printf("%4d", i + 1); &#125; System.out.println(); System.out.print("---"); for (int i = 0; i &lt; num; i++) &#123; System.out.print("----"); &#125; System.out.println("--"); for (int i = 0; i &lt; num; i++) &#123; System.out.print((i + 1) + " |"); for (int j = 0; j &lt; num; j++) &#123; System.out.printf("%4d", (i + 1) * (j + 1)); &#125; System.out.println(); &#125; &#125;&#125; 123456789101112131415161718192021/** * Test Circle class */public class TestCircle &#123; /** * World starts here * * @param args Command line arguments */ public static void main(String[] args) &#123; System.out.println(Circle.PI); System.out.println(Circle.radToDeg(3.141)); Circle myCircle = new Circle(1); System.out.println(myCircle.toString()); System.out.println(myCircle.getClass()); Circle myCircle2 = new Circle(1); System.out.println(myCircle.equals(myCircle2)); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/* * Circle.java * * Copyright (c) University of Sheffield 2014 */public class Circle &#123; // class field public static final double PI = 3.1415927; // instance field private double radius; // constructor public Circle(double r) &#123; radius = r; &#125; // class method public static double radToDeg(double angleRad) &#123; return angleRad * 180.0 / PI; &#125; // instance methods public double area() &#123; // returns area of the circle return PI * radius * radius; &#125; public double circumference() &#123; // returns circumference of the circle return 2.0 * PI * radius; &#125; @Override public String toString() &#123; return "Circle radius: " + radius; &#125; @Override public boolean equals(Object obj) &#123; // Check if the two objects' class are same, then if the references are same return obj.getClass() == this.getClass() &amp;&amp; obj == this; &#125;&#125; 123456789101112131415161718class PhDThesis extends Publication &#123; private int numChapters; private String university; private String supervisor; PhDThesis(String title, String author, int ISBN, int numPages, int numChapters, String university, String supervisor) &#123; super(title, author, ISBN, numPages); this.numChapters = numChapters; this.university = university; this.supervisor = supervisor; &#125; @Override public String toString() &#123; return super.toString() + "[numChapters=" + numChapters + ",university=\"" + university + "\",supervisor=\"" + supervisor + "\"]"; &#125;&#125; 12345678910111213public class TestPublication &#123; public static void main(String[] args) &#123; Publication publication = new Publication(); Book book = new Book("Test Book", "Test Author", 10000, 1000, 100); MagazineArticle magazineArticle = new MagazineArticle("Test Mag", "Test Author", 10001, 10, "Test Name", 1, 2, 3); PhDThesis phDThesis = new PhDThesis("Test Title", "Neo", 10002, 100, 10, "UoS", "Anand"); System.out.println(publication.toString()); System.out.println(book.toString()); System.out.println(magazineArticle.toString()); System.out.println(phDThesis.toString()); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import java.util.ArrayList;import java.util.Random;/** * Create a random number table */public class RandomTable &#123; /** * World starts here * * @param args Command line arguments */ public static void main(String[] args) &#123; Random random = new Random(0); int num = 9; ArrayList&lt;Integer&gt; columns = new ArrayList&lt;&gt;(); while (columns.size() &lt; num) &#123; int randomNum = random.nextInt(num + 1); if (randomNum &gt; 0 &amp;&amp; !columns.contains(randomNum)) &#123; columns.add(randomNum); &#125; &#125; ArrayList&lt;Integer&gt; rows = new ArrayList&lt;&gt;(); while (rows.size() &lt; num) &#123; int randomNum = random.nextInt(num + 1); if (randomNum &gt; 0 &amp;&amp; !rows.contains(randomNum)) &#123; rows.add(randomNum); &#125; &#125; System.out.print(" |"); for (int i = 0; i &lt; num; i++) &#123; System.out.printf("%4d", columns.get(i)); &#125; System.out.println(); System.out.print("---"); for (int i = 0; i &lt; num; i++) &#123; System.out.print("----"); &#125; System.out.println("--"); for (int i = 0; i &lt; num; i++) &#123; System.out.print(rows.get(i) + " |"); for (int j = 0; j &lt; num; j++) &#123; System.out.printf("%4d", rows.get(i) * columns.get(j)); &#125; System.out.println(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week04]]></title>
    <url>%2FCOM6516-Week04.html</url>
    <content type="text"><![CDATA[123456789101112131415class Person &#123; String name; String birth; Person(String name, String birth) &#123; this.name = name; this.birth = birth; &#125; @Override public String toString() &#123; return "Name: " + name + "\n" + "Birth: " + birth; &#125;&#125; 123456789101112131415class Student extends Person &#123; private String course; Student(String name, String birth, String course) &#123; super(name, birth); this.course = course; &#125; @Override public String toString() &#123; return "Name: " + name + "\n" + "Birth: " + birth + "\n" + "Course: " + course; &#125;&#125; 123456789101112131415class Tutor extends Person &#123; private String office; Tutor(String name, String birth, String office) &#123; super(name, birth); this.office = office; &#125; @Override public String toString() &#123; return "Name: " + name + "\n" + "Birth: " + birth + "\n" + "Office: " + office; &#125;&#125; 123456789101112131415public class TestPerson &#123; public static void main(String[] args) &#123; Person testPerson = new Person("Walker", "1996/06/16"); System.out.println(testPerson); Student testStudent = new Student("Neo", "1996/08/01", "COM6516"); System.out.println(testStudent); Tutor testTutor = new Tutor("Anand", "1980/01/01", "C14"); System.out.println(testTutor); &#125;&#125; 12345public class Sheep extends Animal &#123; public void talk() &#123; System.out.println("Baaa!"); &#125;&#125; 12345678910111213141516public class NewAnimalTest &#123; public static void main(String[] args) &#123; Animal cow = new Cow(); Animal pig = new Pig(); Animal sheep = new Sheep(); Animal[] animals = new Animal[3]; animals[0] = cow; animals[1] = pig; animals[2] = sheep; for (Animal testAnimal : animals) &#123; testAnimal.talk(); &#125; &#125;&#125; 12345public abstract class Animal &#123; public void talk() &#123; System.out.println("Animals can't talk"); &#125;&#125; 1234567891011121314151617181920212223242526272829303132/* * AnimalTest.java 1.0 01/10/2010 * * Copyright (c) University of Sheffield 2011 *//** * AnimalTest.java * &lt;p&gt; * Test class to demonstrate inheritance * * @author Mark Stevenson (mark.stevenson@sheffield.ac.uk) * Original code written by Guy Brown and Richard Clayton * @version 1.1 01 October 2010 */public class AnimalTest &#123; public static void main(String[] args) &#123; Cow daisy = new Cow(); Pig wilbur = new Pig();// Animal animal = new Animal(); Animal[] farm = new Animal[4];// farm[0] = animal; farm[0] = daisy; farm[1] = wilbur; for (int i = 0; i &lt; 2; i++) &#123; farm[i].talk(); &#125; // for &#125; // main&#125; 123public interface Drawable &#123; public void draw(sheffield.EasyGraphics g);&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * Shape.java * &lt;p&gt; * A simple class used in week 4 to implement an abstract superclass * * @version 1.1 26 August 2011 * @author Richard Clayton (r.h.clayton@sheffield.ac.uk) */import sheffield.*;public abstract class Shape implements Drawable &#123; // instance fields // these could be implemented as protected (as shown in the lecture notes) // or more safely as private, with getX and getY methods as shown here private double x; private double y; public Shape() &#123; this(0.0, 0.0); &#125; public Shape(double x, double y) &#123; setPosition(x, y); &#125; public void setPosition(double xval, double yval) &#123; x = xval; y = yval; &#125; public double getX() &#123; return x; &#125; public double getY() &#123; return y; &#125; public abstract double area(); public abstract void draw(EasyGraphics g);&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6506 Week02]]></title>
    <url>%2FCOM6506-Week02.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930public class Person &#123; String name; double weight; double height; public Person(String name, double weight, double height) &#123; this.name = name; this.weight = weight; this.height = height; &#125; public String getName() &#123; return name; &#125; public double getWeight() &#123; return weight; &#125; public double getHeight() &#123; return height; &#125; public static void main(String[] args) &#123; Person jeff = new Person("Jeff", 72.4, 2.2); Person jim = new Person("Jim", 65, 1.7); System.out.println("Jeff is " + jeff.getHeight() + "m tall."); System.out.println("Jim is " + jim.getHeight() + "m tall."); &#125;&#125; 123456789101112131415161718public class BMICalculator &#123; Person person; public BMICalculator(Person p) &#123; this.person = p; &#125; public double calculateBMI() &#123; double bmi = person.getWeight() / (person.getHeight() * person.getHeight()); return bmi; &#125; public static void main(String[] args) &#123; Person jeff = new Person("Jeff", 85.4, 1.9); BMICalculator calculator = new BMICalculator(jeff); System.out.println("Jeff's BMI is: " + calculator.calculateBMI()); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;class BMICalculatorTest &#123; /* * BMI should be somewhere between 20 and 30. */ @Test void testPersonInNormalCategory() &#123; Person jeff = new Person("Jeff", 85.4, 1.9); BMICalculator calculator = new BMICalculator(jeff); double result = calculator.calculateBMI(); assertTrue(result &gt; 20); assertTrue(result &lt; 30); &#125; /* * BMI should be zero */ @Test void testWeightlessPerson() &#123; Person jeff = new Person("Jeff", 0, 1.9); BMICalculator calculator = new BMICalculator(jeff); double result = calculator.calculateBMI(); assertEquals(result, 0D); &#125; /* * BMI should be infinite */ @Test void testHeightlessPerson() &#123; Person jeff = new Person("Jeff", 85.4, 0); BMICalculator calculator = new BMICalculator(jeff); double result = calculator.calculateBMI(); assertTrue(Double.isInfinite(result)); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6506</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week03]]></title>
    <url>%2FCOM6516-Week03.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/* * FoodStore.java 1.0 26/08/2011 * * Copyright (c) University of Sheffield 2011 *//** * FoodStore.java * &lt;p&gt; * A simple class used in COM6516 lab class */// this line of code declares the classpublic class FoodStore &#123; // this is the constructor, which is called when a new object is created // the constructor name is always the same as the class name // classes can have more than one constructor // the constructor make take zero or more parameters // in this case there is one parameter (int a) that is used to set the // instance field of the class public FoodStore(int a) &#123; amountStored = a; &#125; // these are class methods, which enable the value of the instance // field to be modified // these methods have a public access modifier, because they need to // be called by other classes // neither class method returns anything, so the return type is void public void depositFood(int amountToDeposit) &#123; depositAmount += amountToDeposit; amountStored = amountStored + amountToDeposit; &#125; public void withdrawFood(int amountToWithdraw) &#123; withdrawAmount += amountToWithdraw; amountStored = amountStored - amountToWithdraw; &#125; // these are accessor methods, which return the value of the // instance field public int getAmountStored() &#123; return (amountStored); &#125; // this is the instance field, which is an attribute associated with // each object of the FoodStore class // the access modifier is private, which means that this field can // only be accessed through the class methods // by keeping instance fields private there is a well specified interface // to the data associated with each object // this approach is called encapsulation private int amountStored; private int depositAmount = 0; private int withdrawAmount = 0; public int getDepositAmount() &#123; return depositAmount; &#125; public int getWithdrawAmount() &#123; return withdrawAmount; &#125;&#125; 1234567891011121314151617181920212223public class TestFoodStore &#123; public static void main(String[] args) &#123; // create a new FoodStore object called MyFoodStore // by invoking the constructor FoodStore MyFoodStore = new FoodStore(10); // display the amount stored by calling the getAmountStored // method associated with the MyFoodStore object System.out.println("Contains " + MyFoodStore.getAmountStored()); System.out.println("Deposit 5 foods."); MyFoodStore.depositFood(5); System.out.println("Contains " + MyFoodStore.getAmountStored()); System.out.println("Withdraw 10 foods."); MyFoodStore.withdrawFood(10); System.out.println("Contains " + MyFoodStore.getAmountStored()); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940import sheffield.*;class FoodManage &#123; public static void main(String[] args) &#123; FoodStore MyFoodStore = new FoodStore(10); EasyReader keyboard = new EasyReader(); int numberOfWithdrawal = 0; int numberOfDeposit = 0; int numberOfRefuse = 0; while (true) &#123; int amount = keyboard.readInt("Food manage: "); if (amount &gt; 0) &#123; MyFoodStore.depositFood(amount); System.out.println("Deposit " + amount + " foods."); numberOfDeposit++; &#125; else if (amount &lt; 0) &#123; if (MyFoodStore.getAmountStored() &lt; -amount) &#123; System.out.println("Transaction refused."); numberOfRefuse++; &#125; else &#123; MyFoodStore.withdrawFood(-amount); System.out.println("Withdraw " + (-amount) + " foods."); numberOfWithdrawal++; &#125; &#125; else &#123; System.out.println("Nothing to do."); &#125; System.out.println("Total number of withdrawals: " + numberOfWithdrawal); System.out.println("Total number of deposits: " + numberOfDeposit); System.out.println("Total number of refused transactions: " + numberOfRefuse); System.out.println("Total amount of food deposited: " + MyFoodStore.getDepositAmount() + " foods."); System.out.println("Total amount of food withdrawn: " + MyFoodStore.getWithdrawAmount() + " foods."); &#125; &#125;&#125; 123456789101112class TestBasket &#123; public static void main(String[] args) &#123; Item[] shopping = &#123;new Item("baked beans", 0.3), new Item("tomato soup", 0.4)&#125;; for (Item i : shopping) &#123; System.out.println(i.toString()); &#125; Basket myBasket = new Basket(shopping); System.out.println("Total price: " + myBasket.total()); &#125;&#125; 1234567891011121314151617181920212223242526272829/** * Basket.java * &lt;p&gt; * Part of lab class for COM6516 * Written by Mark Stevenson mark.stevenson@sheffield.ac.uk * Based on code written by Steve Maddock * Last modified 19 September 2014 */public class Basket &#123; // Constructor function // Create a instance of Basket public Basket(Item[] it) &#123; items = it; &#125; // get total price of items in the basket public double total() &#123; double tot = 0.0; for (int i = 0; i &lt; items.length; i++) &#123; tot += items[i].getPrice(); &#125; // for loop return tot; &#125; // item collections private Item[] items;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/** * Item.java * &lt;p&gt; * Part of lab class for COM6516 * Written by Mark Stevenson mark.stevenson@sheffield.ac.uk * Based on code written by Steve Maddock and Richard Clayton */public class Item &#123; public Item(String n, double p) &#123; name = n; price = p; &#125; public String getName() &#123; return name; &#125; public double getPrice() &#123; return price; &#125; // using ukp to denote pounds sterling as unicode pound symbol // does not display properly in MS Command Window @Override public String toString() &#123; return ("Class type: " + getClass().getTypeName() + " Class name: " + getClass().getName() + " Name: " + name + " Price: " + price); &#125; @Override public boolean equals(Object obj) &#123; if (obj == this) return true; if (obj == null) return false; if (obj.getClass() != this.getClass()) return false; if (((Item) obj).getName() == this.getName() &amp;&amp; ((Item) obj).getPrice() == this.getPrice()) return true; return false; &#125; // equals method to be added here //public boolean equals(Object obj) &#123; // check if identical objects // must be false if parameter is null // must be false if objects have different classes // now we can cast and do something specific for Item //&#125; // instance fields private final double price; private final String name; public static void main(String[] args) &#123; String TESTNAME = "testObject"; double TESTPRICE = 10.0; Item testObject = new Item(TESTNAME, TESTPRICE); System.out.println("Name:"); System.out.println("Actual field " + testObject.getName()); System.out.println("Expected " + TESTNAME); System.out.println("Price:"); System.out.println("Actual field " + testObject.getPrice()); System.out.println("Expected " + TESTPRICE); &#125;&#125; 123456789class TestItemEquals &#123; public static void main(String[] args) &#123; Item tomato = new Item("Tomato", 0.2); Item tomatoCopy = tomato; System.out.println(tomato.equals(tomatoCopy)); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[COM6516 Week01-02]]></title>
    <url>%2FCOM6516-Week01-02.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* * HelloWorld.java * A traditional Hello World program! */// In Java, all programs reside in a class. This class is called HelloWorld, // and should be saved in a file called HelloWorld.java. This class has a single// method called main, which is the entry point to the program.//// Compiling the class with javac HelloWorld.java will produce a bytecode file// called HelloWorld.class if compilation is successful. This bytecode can then// be run on any machine with a java bytecode interpreter. You can run the// bytecode in a console by typing java HelloWorld.public class HelloWorld &#123; public static void main(String[] arg) &#123; String helloString = "Hello"; String worldString = "World!"; // In Java the System.out.println command displays the argument to the // console. However the command below doesn't work, because helloWorldAString // has not been declared. Try compiling this file to see what happens, // and take a careful look at the error message that is produced. System.out.println(helloString + " " + worldString); // In Java, we can use the '+' operator to concatenate strings, // so to fix this problem, either change the argument passed to the // System.out.println method from (helloWorldString) to // (helloString + " " + worldString) // or declare the variable helloWorldString before it is used by // System.out.println by inserting // String helloWorldString = helloString + " " + worldString; // In Java a variable can be declared anywhere in the code, so it is // possible to declare a variable just before it is used, which makes for // code that is easier to read and understand. // It is conventional to use mixed case for variable names and method // names in Java, with with the first letter lower case, and then the // first letter of each internal word in upper case -- e.g. helloString. // Class names start with a capital letter -- e.g. HelloWorld.java // details at: http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-135099.html &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/* * QuadraticSolver.java 1.1 26/08/2011 * * Copyright (c) University of Sheffield 2011 */import java.math.*;import sheffield.*;/** * QuadraticSolver.java * solves quadratic equations for x given a*x*x + b*x + c = 0 * the code should be modified so that a, b, and c are input by the user * * @author Mark Stevenson (mark.stevenson@sheffield.ac.uk) * @author (based on code written by Richard Clayton) * @version 1.1 26 August 2011 */public class QuadraticSolver &#123; public static void main(String[] arg) &#123; // default values for coefficients a, b, and c // initially, these are stored as both integers and float.// int aInt = 1, bInt = 2000000, cInt = 1;// double aFloat = 1, bFloat = 2000000, cFloat = 1; EasyReader keyboard = new EasyReader(); double aFloat = keyboard.readDouble("Input a value for a: "); double bFloat = keyboard.readDouble("Input a value for b: "); double cFloat = keyboard.readDouble("Input a value for c: "); // declare variables to store the two values of x that satisfy the equation double x1, x2; // work out the solution with int types// aInt -= 1/2;// x1 = (-1 * bInt + Math.sqrt(bInt*bInt - 4 * aInt * cInt)) / (2 * aInt);// x2 = (-1 * bInt - Math.sqrt(bInt*bInt - 4 * aInt * cInt)) / (2 * aInt);// System.out.println("Solution with integer types is x1 = " + x1 + ", and x2 = " + x2 ); // work out the solution with double types// aFloat -= 0.5; x1 = (-1 * bFloat + Math.sqrt(bFloat * bFloat - 4 * aFloat * cFloat)) / (2 * aFloat); x2 = (-1 * bFloat - Math.sqrt(bFloat * bFloat - 4 * aFloat * cFloat)) / (2 * aFloat); System.out.println("Solution with double types is x1 = " + x1 + ", and x2 = " + x2); System.out.println("a*x1*x1 + b*x1 + c = " + (aFloat * x1 * x1 + bFloat * x1 + cFloat)); System.out.println("a*x2*x2 + b*x2 + c = " + (aFloat * x2 * x2 + bFloat * x2 + cFloat)); &#125; //main&#125; // class QuadraticSolver 12345678910111213141516171819202122232425262728import sheffield.*;public class CycleComputer &#123; public static void main(String[] args) &#123; EasyReader myFile = new EasyReader("./timings.txt"); int amount = myFile.readInt(); double[] timings = new double[amount]; // Unit: s for (int i = 0; i &lt; amount; i++) &#123; timings[i] = myFile.readDouble(); &#125; Trip myTrip = new Trip(0.665, amount, timings); double[] speeds = myTrip.getInstantaneousSpeed(); for (int i = 0; i &lt; amount; i++) &#123; System.out.printf("Instantaneous speed: %.2f km/h\n", speeds[i]); &#125; System.out.printf("Max speed in journey is: %.2f km/h\n", myTrip.getMaxSpeed()); System.out.printf("Total distance travelled: %.2f km\n", myTrip.getTotalDistance()); System.out.printf("Total time taken: %.2f mins\n", myTrip.getTotalTime() / 60); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public class Trip &#123; private static final double PI = 3.1415927; private double diameter; // Unit: m private double circumference; // Unit: m private int rotationAmount; private double timings[]; // Unit: s private double speeds[]; // Unit: km/h private double maxSpeed = 0; // Unit: km/h private double totalDistance = 0; // Unit: m private double totalTime = 0; // Unit: s public Trip(double diameter, int rotationAmount, double[] timings) &#123; this.diameter = diameter; this.circumference = diameter * PI; this.rotationAmount = rotationAmount; this.timings = timings; calcInstantaneousSpeed(); calcMaxSpeed(); clacTotalDistance(); calcTotalTime(); &#125; public double getDiameter() &#123; return diameter; &#125; public double getCircumference() &#123; return circumference; &#125; public int getRotationAmount() &#123; return rotationAmount; &#125; private void calcInstantaneousSpeed() &#123; speeds = new double[rotationAmount]; // Unit: km/h for (int i = 0; i &lt; rotationAmount; i++) &#123; speeds[i] = circumference / timings[i] * 3.6; // m/s -&gt; km/h &#125; &#125; private void calcMaxSpeed() &#123; for (int i = 0; i &lt; rotationAmount; i++) &#123; maxSpeed = maxSpeed &gt; speeds[i] ? maxSpeed : speeds[i]; &#125; &#125; private void clacTotalDistance() &#123; for (int i = 0; i &lt; rotationAmount; i++) &#123; totalDistance += timings[i] / 3600 * speeds[i]; &#125; &#125; private void calcTotalTime() &#123; for (int i = 0; i &lt; rotationAmount; i++) &#123; totalTime += timings[i]; &#125; &#125; public double[] getInstantaneousSpeed() &#123; return speeds; &#125; public double getMaxSpeed() &#123; return maxSpeed; &#125; public double getTotalDistance() &#123; return totalDistance; &#125; public double getTotalTime() &#123; return totalTime; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COM6516</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换评论系统]]></title>
    <url>%2FChange-Comment-System.html</url>
    <content type="text"><![CDATA[最近一直在忙着毕业的事情，没有打理博客。等到基本事情都做完回来看博客的时候发现，原来使用的 HyperComments 评论系统已经开始收费了，并且只有在订阅之后才可以进入管理页面。 这样一来，原本的评论想要找回来就只能强制被收费了，那只好对 HyperComments 说再见了，重新投入 Disqus 的怀抱。 然而 Disqus 在国内被屏蔽，这也是没办法的事情，所以……以后网站的评论就只能是随缘评论了……]]></content>
      <categories>
        <category>糟心</category>
      </categories>
      <tags>
        <tag>HyperComments</tag>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[氧 OS 也能使用公交卡]]></title>
    <url>%2FOxygenOS-Bus-Card.html</url>
    <content type="text"><![CDATA[本文最后更新于 2018年5月24日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 两个月前，我换了一加 5T，算是 48 年入国军了吧，不过等于 7 看样子会有刘海，无爱，放弃；而 5T 的 835 性能又很足够，造型也很讨我喜欢。 买来后果断刷了氧 OS 使用，确实没让我失望，内置 Google 框架，使用很流畅。前两天，因为想尝试着体验一下全球上网和公交卡功能，刷成了氢 OS 8.1 稳定版，但是是 dirty flash。开机后检查各项软件，果然，电话闪退无法使用。在设置中找边所有地方也没找到全球上网，不过还好，卡券里的公交卡功能可用，没算是白刷。但是这修改过的氢的界面用起来还是各种别扭，还预装了许多中国特色软件。于是打算把公交卡功能搬到氧 OS 中使用。 在氢中提取了一加商店，在刷回氧以后，可以装上，但是只能下载不能自动安装，需要在手机目录中找到 apk 文件手动安装。按照常规操作，安装卡券和一加公交卡插件以后，在负一屏添加卡券部件，打开之后，点击加号，就会开始扫码添加会员卡。但这不是我们想要的，氢中点击加号有公交卡选项，而氧中屏蔽了这一入口。这时有两个方法可以解决。 方法一 ADB打开 USB 调试，在 adb.exe 的文件夹中打开 PowerShell 或者 Command Line，输入 adb shell 之后手机提示授权。授权之后电脑端提示变为 OnePlus5T:/$。输入 am start -n cn.oneplus.wallet/cn.oneplus.wallet.activity.NewCardActivity，回车，此时在手机上就打开了添加公交卡的界面。 方法二 QuickShortcutMaker此方法最为简单快捷，无需借助电脑。安装打开 QuickShortcutMaker，找到公交卡，选择第一项，尝试运行即可打开开卡界面。 在成功开卡之后，在负一屏就能看到已经开启的公交卡了，点击卡片可以直接充值。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>一加</tag>
        <tag>氧OS</tag>
        <tag>公交卡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MI3TD 调整系统分区/合并分区 支持 64G 支持官方 OTA【存档】]]></title>
    <url>%2FMI3TD-Merge-Partitions.html</url>
    <content type="text"><![CDATA[这是什么 If you want to see English Version of this post, you can go here: Adjust the system partition &amp; Merge partitions of Mi3TD-Support offical OTA 这是一篇可以指导你将你的小米 3 TD 调整系统分区/合并分区的教程，支持 16G 和 64G 的 TD。 有时候你想安装软件，提示你空间不足，去查看一下明明剩余空间还多。 有时候你想刷 Gapps 包，却因为系统分区空间不够而刷不进去。 遇到以上这些情况，就需要本文的教程来解决问题了。 可能你看过许多相关帖子，不过方法都不太完美，官方合并分区方法有 BUG，合并之后存储空间会缺失一个多 G，只有 12.25G 大小，而本教程则完美解决了官方合并分区的 BUG，合并之后存储空间全部利用，不再丢失一个 G。 这是合并之后的效果图，此外本教程合并分区之后可以使用官方的系统更新，亲测 OTA 正常。下图是我的手机效果图。 声明/注意事项在开始操作之前，建议通读本教程全文，之后再进行操作。 并且一定要注意备份数据！请确保手机电量充足！刷机与风险并存，需要有失败的心理准备。 本教程乃个人经验的总结，并不代表百分之百可以成功。本人对刷机失败变砖等后果概不负责。 此刷机教程核心内容由 @Xuefer 提供，这篇教程也在 Xuefer 的指导下完成。 准备工作/安装驱动 所需工具包的下载：MiFlash，NvFlash。NvFlash 是由 Xuefer 提供的提取自官方线刷包的工具包（米 3 TD 的合并分区隐藏在线刷包里），修复了官方以前的BUG。 我所用的电脑系统是 Windows 10 Pro，默认是开启了驱动程序强制签名验证的，然而英伟达（小米）提供的驱动却不包含签名。这就造成了一个很蛋疼的事情，系统默认不允许安装驱动。但是不建议使用比较老的系统，比如 XP，不会自动安装 MTP 驱动，而 MTP 驱动在 XP 上面的安装比较麻烦，建议用 Windows 7 及以上的系统操作。 Windows 10 的关闭驱动程序强制签名验证的方法如下：开始 - 设置 - 更新和安全 - 恢复 - 高级启动 立即重启 - 疑难解答 - 高级选项 - 启动设置 - 重启 - 7（禁用驱动程序强制签名验证）如果不理解可以百度找一找更为详细的带图教程。（Windows 7/8/8.1 请自行百度） 在开始之前，请把电脑上的各种软件管家助手都彻底退出，包括杀毒软件和 360 卫士这样的软件，后台程序越少越好，这是为了确保驱动可以正常安装！如果不退出彻底可能会导致后面操作失败。 首先安装 MiFlash，一路默认，不要修改安装地址。如果提示驱动不安全，不要犹豫，仍然安装！然后解压下载好的 NvFlash 压缩包，里面可以看到这些文件：到这里，准备工作就完成了。 安装 APX 驱动 本教程正常情况下是不会丢失系统、应用这些数据，只丢失照片音乐等数据（即电脑上看到的内容），但刷机有风险，建议备份。 首先手机进入 Recovery 模式，注意这里手机要使用第三方的 Recovery（如果你没有使用第三方 Recovery，强烈建议使用 Xuefer 的 TWRP），手机连接电脑，然后电脑双击打开 1.双击我进入APX模式.bat ，会有以下提示：如果你的提示不是这样的，而是类似这样的：1234adb server is out of date. killing...ADB server didn&apos;t ACK* failed to start daemon *error: unknown host service 说明你的电脑里已经在运行 adb.exe，请进入任务管理器，把所有的 adb.exe 结束，再打开 1.双击我进入APX模式.bat ，基本就会正常了。 此时在设备管理器中可以看到有这么个设备：右键点击 APX（如果没有找到 APX，请看最下面的提示），更新驱动程序软件，浏览计算机以查找驱动程序软件，浏览文件夹，定位到刚刚下载的解压好的文件夹，选择 APX-Driver，点击确定：点击下一步会出现如下提示：此时点击 始终安装此驱动程序软件 ，安装完成之后在设备管理器中可以看到这样一个设备：到这里，APX 的驱动安装完成。 更新：根据 @安399042134 的反馈： 有些人不知道为什么已经有驱动了(我也遇到了，不知道哪来的驱动，接上去就有)，所以进去深度刷机时，没有显示APX，而是出现在nvidia boot recovery里 所以，如果你找不到 APX 设备请不要慌张，可能不知道哪个软件已经帮你安装好了。直接确认最后一个图就好了。 开始分区接下来，电脑上双击打开 2.双击我选择分区方案.bat ，这里提供了多种方案（以你下载的文件为准）： 旧版 MIUI 方案: 双系统, 应用/存储分离新版 MIUI 方案: 双系统, 应用/存储合并 (已修正官方 bug 不丢 1GB)单系统方案: 在 2 的基础上 缩小 系统二 扩大 系统一自定义配置: 按照自己的需求来修改分区 这里解释下每个选项： 相当于调整手机分区到刚出厂的状态。合并分区。有时候你想安装软件，提示你空间不足，去查看一下明明剩余空间还多，那么就选择这个。这个是给那些不想要双系统，或者是需要更大的系统分区的同学准备的。如果你想刷入 Gapps 包，却苦恼于空间不足，那么就选择这个。但是有一点，这样做之后系统二将变为不可用。自定义配置。如果你不知道 MB 与 MiB 的区别，以及 CAC、LNX、LN1 这些词的意思，就千万不要用这个。建议大多数人都不要选这个。 无论选择哪个，之后都会出现以下界面：这就是正在分区了，等它这些东西走完，窗口会自动关闭，手机会自动开机。此时长按电源键强制重启，屏幕黑下来就按住音量 + 直到进入 Recovery，首次进入 Recovery（也许）会询问你是否保持 System 分区只读，此时选中 重启时不再显示本信息，然后滑动下方的滑块，允许修改，手机继续保持与电脑连接。 如果你选择了方案一，此时将卡刷包复制到手机中即可以刷机使用。 如果你使用了方案二或三，此时在 Recovery 里进行一下操作：之后尝试开机。正常情况下系统、软件都在，照片音乐丢失。教程结束。 如果原来没有自己调整过分区，使用方案二或方案三分区一般是不丢失数据的。 如果运气不好，发生了一些异常情况：比如无法正常开机、软件闪退、剩余存储空间不对，那么，请看下面的步骤进行格式化分区。（正常情况下 MIUI 稳定版/开发版中显示为 13.46G，电脑/CM/MIUI 体验版显示为 12.5G，MIUI 体验版调整了计量单位为 GiB 但是仍显示为 GB，对这些有疑问的可以去看看知乎：KB / KiB，MB / MiB，GB / GiB，… 的区别是什么？） 格式化分区这时手机是在 Recovery 的状态：输入“yes”，点击 蓝色 对勾：即可完成格式化。 到这里，即可以刷机使用。个人不推荐各种形式的线刷，最好使用卡刷包。如果线刷出了问题无法解决，可以按照本教程再来一次。 方案三的同学，请注意！你们选择的方案是扩大了系统一，但是如果遇到了还是不能刷入 Gapps 包，或者看到系统分区很小（一般这种情况是发生在刷 5.0 以上系统的时候），那么需要进行一下额外的操作，请继续往下看。 方案三需注意一般来说，刷完系统包之后，再尝试着刷入稍微大点的 Gapps 包就会提醒你空间不足。然而，这个不足并不是真的不足，而是系统分区信息还没有“更新”。 在刷完系统包之后，先别急着刷其他包，回到 Recovery 主界面，按照以下操作走一遍：此时就可以刷入 Gapps 了。 方案三比较特殊，使用了方案三之后，不可再使用官方的系统更新 APP 进行更新，会发生未知的严重后果。想更新可以下载 OTA 包或者完整卡刷包在 TWRP（Recovery）内刷入更新。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>小米</tag>
        <tag>pisces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序设计 第三周]]></title>
    <url>%2FPython03.html</url>
    <content type="text"><![CDATA[绘画如图所示分形树。 1234567891011121314151617181920212223242526272829303132# 绘画分形树。import turtledef draw_y(size, n): for angle in [30, 120]: turtle.left(angle) if n &lt; 2: turtle.pencolor("green") else: turtle.pencolor("red") turtle.fd(size) if n != 0: draw_y(size / 1.5, n - 1) turtle.left(30) else: turtle.left(180) turtle.penup() turtle.fd(size) turtle.pendown()turtle.setup(600, 600)turtle.penup()turtle.goto(0, -200)turtle.pensize(1)turtle.left(90)turtle.pencolor("red")turtle.pendown()level = 5turtle.fd(150)draw_y(100, level)]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序设计 第二周]]></title>
    <url>%2FPython02.html</url>
    <content type="text"><![CDATA[利用嵌套循环 ， 输出 2-100 之间的质数。 有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？ 输出 9*9 乘法口诀表。 1234567# 输出2-100之间的素数for i in range(2, 101): for j in range(2, i): if not (i % j): # 如果 i 整除 j（i 不是素数） break # 跳出循环 else: print(i, "是素数") 123456789101112131415161718192021# 有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？# num = 0# for i in range(1, 5):# for j in range(1, 5):# for k in range(1, 5):# if (i != j) &amp; (i != k) &amp; (j != k):# print("%d%d%d" % (i, j, k))# num = num + 1# print("共有", num, "个")# 👆第一种，👇第二种from itertools import permutationsnum = 0for x in permutations([1, 2, 3, 4], 3): for y in x: print(y, end="") num = num + 1 print()print("共有", num, "个") 12345# 输出 9*9 乘法口诀表for i in range(1, 10): for j in range(1, i + 1): print("%d*%d=%2d" % (i, j, i * j), end=" ") print()]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序设计 课件]]></title>
    <url>%2FPython-Lecture-Notes.html</url>
    <content type="text"><![CDATA[第一周Python程序设计-第一周.pdf 第二周Python程序设计-第二周.pdf 第三周Python程序设计-第三周.pdf玫瑰花.py 第四周Python程序设计-第四周.pdf 第五周Python程序设计-第五周.pdf三国演义.txt 第六周Python程序设计-第六周.pdf第六周材料.rar 第七周Python程序设计-第七周.pdf第七周材料.rar 第八周Python程序设计-第八周.pdf第八周材料.rar 第九周第九周 五一放假 第十周Python程序设计-第十周.pdf第十周材料.rar 第十一周Python程序设计-第十一周.pdf 第十二周Python程序设计-第十二周.pdf第十二周材料.rar 思考题和课程设计思考题和课程设计说明.pdf 第十三周Python程序设计-第十三周.pdf第十三周材料.rar 第十四周Python程序设计-第十四周.pdf第十四周材料.rar 第十五周Python程序设计-第十五周.pdf第十五周材料.rar]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BIRCH 的初步了解]]></title>
    <url>%2FBIRCH%20%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[BIRCH 概述BIRCH 算法属于层次聚类算法的一种，全称是利用层次方法的平衡迭代规约和聚类 (Balanced Iterative Reducing and Clustering Using Hierarchies)。BIRCH 算法利用了一个树结构进行快速的聚类，这个数结构类似于平衡 B+ 树，一般将它称之为聚类特征树 (Clustering Feature Tree，简称 CF Tree)。这颗树的每一个节点是由若干个聚类特征 (Clustering Feature，简称 CF)组成。聚类特征树的样子：每个节点包括叶子节点都有若干个 CF，而内部节点的 CF 有指向孩子节点的指针，所有的叶子节点用一个双向链表链接起来。 聚类特征 CF 与聚类特征树 CF Tree在聚类特征树中，一个聚类特征 CF 是这样定义的：每一个 CF 是一个三元组，可以用（N，LS，SS）表示。其中 N 代表了这个 CF 中拥有的样本点的数量，这个好理解；LS 代表了这个 CF 中拥有的样本点各特征维度的和向量，SS 代表了这个 CF 中拥有的样本点各特征维度的平方和。举个例子如下图，在 CF Tree 中的某一个节点的某一个 CF 中，有下面 5 个样本 (3,4), (2,6), (4,5), (4,7), (3,8)。则它对应的 N=5, LS=(3+2+4+4+3,4+6+5+7+8)=(16,30), SS=(33+22+44+44+33+44+66+55+77+88)=(54+190)=244CF 有一个很好的性质，就是满足线性关系，即 CF1+CF2=(N1+N2,LS1+LS2,SS1+SS2)。如果把这个性质放在 CF Tree 上，对于每个父节点中的 CF 节点，它的 (N,LS,SS) 三元组的值等于这个 CF 节点所指向的所有子节点的三元组之和。对于 CF Tree，一般有几个重要参数，第一个参数是每个内部节点的最大 CF 数 B，第二个参数是每个叶子节点的最大 CF 数 L，第三个参数是针对叶子节点中某个 CF 中的样本点来说的，它是叶节点每个 CF 的最大样本半径阈值 T，也就是说，在这个 CF 中的所有样本点一定要在半径小于 T 的一个超球体内。对于上图中的 CF Tree，限定了 B=7， L=5，也就是说内部节点最多有 7 个 CF，而叶子节点最多有 5 个 CF。 聚类特征树 CF Tree 的生成先定义好 CF Tree 的参数： 即内部节点的最大 CF 数 B， 叶子节点的最大 CF 数 L， 叶节点每个 CF 的最大样本半径阈值 T。在最开始的时候，CF Tree 是空的，没有任何样本，从训练集读入第一个样本点，将它放入一个新的 CF 三元组 A，这个三元组的 N=1，将这个新的 CF 放入根节点，此时的 CF Tree 如下图：继续读入第二个样本点，发现这个样本点和第一个样本点 A，在半径为T的超球体范围内，也就是说，他们属于一个 CF，将第二个点也加入 CF A,此时需要更新 A 的三元组的值。此时 A 的三元组中 N=2。此时的 CF Tree 如下图：此时来了第三个节点，发现这个节点不能融入刚才前面的节点形成的超球体内，也就是说，需要一个新的 CF 三元组 B，来容纳这个新的值。此时根节点有两个 CF 三元组 A 和 B，此时的 CF Tree 如下图：当来到第四个样本点的时候，发现和 B 在半径小于 T 的超球体，这样更新后的 CF Tree 如下图：那什么时候 CF Tree 的节点需要分裂呢？假设现在的 CF Tree 如下图， 叶子节点 LN1 有三个 CF， LN2 和 LN3 各有两个 CF。叶子节点的最大 CF 数 L=3。此时一个新的样本点来了，发现它离 LN1 节点最近，因此开始判断它是否在 sc1,sc2,sc3 这 3 个 CF 对应的超球体之内，但是很不幸，它不在，因此它需要建立一个新的 CF，即 sc8 来容纳它。问题是 L=3，也就是说 LN1 的 CF 个数已经达到最大值了，不能再创建新的 CF 了，所以要将 LN1 叶子节点一分为二。将 LN1 里所有 CF 元组中，找到两个最远的 CF 做这两个新叶子节点的种子 CF，然后将 LN1 节点里所有 CF sc1, sc2, sc3，以及新样本点的新元组 sc8 划分到两个新的叶子节点上。将 LN1 节点划分后的 CF Tree 如下图：如果内部节点的最大 CF 数 B=3，则此时叶子节点一分为二会导致根节点的最大 CF 数超了，也就是说，根节点现在也要分裂，分裂的方法和叶子节点分裂一样，分裂后的 CF Tree 如下图： BIRCH 算法将所有的训练集样本建立了 CF Tree，一个基本的 BIRCH 算法就完成了，对应的输出就是若干个 CF 节点，每个节点里的样本点就是一个聚类的簇。也就是说 BIRCH 算法的主要过程，就是建立 CF Tree 的过程。BIRCH 算法的流程： 将所有的样本依次读入，在内存中建立一颗 CF Tree, 建立的方法参考上一节。 （可选）将第一步建立的 CF Tree 进行筛选，去除一些异常 CF 节点，这些节点一般里面的样本点很少。对于一些超球体距离非常近的元组进行合并。 （可选）利用其它的一些聚类算法比如 K-Means 对所有的 CF 元组进行聚类，得到一颗比较好的 CF Tree。这一步的主要目的是消除由于样本读入顺序导致的不合理的树结构，以及一些由于节点 CF 个数限制导致的树结构分裂。 （可选）利用第三步生成的 CF Tree 的所有 CF 节点的质心，作为初始质心点，对所有的样本点按距离远近进行聚类。这样进一步减少了由于 CF Tree 的一些限制导致的聚类不合理的情况。 Pros and Cons优点： 节约内存，所有的样本都在磁盘上，CF Tree 仅仅存了 CF 节点和对应的指针。 聚类速度快，只需要一遍扫描训练集就可以建立 CF Tree，CF Tree 的增删改都很快。 可以识别噪音点，还可以对数据集进行初步分类的预处理。缺点： 由于 CF Tree 对每个节点的 CF 个数有限制，导致聚类的结果可能和真实的类别分布不同。 对高维特征的数据聚类效果不好。此时可以选择 Mini Batch K-Means。 如果数据集的分布簇不是类似于超球体，或者说不是凸的，则聚类效果不好。]]></content>
      <categories>
        <category>聚类分析</category>
      </categories>
      <tags>
        <tag>聚类算法</tag>
        <tag>BIRCH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DBSCAN 的初步了解]]></title>
    <url>%2FDBSCAN%20%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[K-means 解决不了不规则形状的聚类。于是就有了 Density-based methods 来系统解决这个问题。该方法同时也对噪声数据的处理比较好。典型的基于密度的方法就是 DBSCAN 了。 DBSCAN，英文全写为 Density-based spatial clustering of applications with noise，是在 1996 年由 Martin Ester, Hans-Peter Kriegel, Jörg Sander 及 Xiaowei Xu 提出的聚类分析算法， 这个算法是以密度为本的：给定某空间里的一个点集合，这算法能把附近的点分成一组（有很多相邻点的点），并标记出位于低密度区域的局外点（最接近它的点也十分远），DBSCAN 是其中一个最常用的聚类分析算法，也是其中一个科学文章中最常引用的。 DBSCAN 的数据分类 核心点。在半径 Eps 内含有超过 MinPts 数目的点。 边界点。在半径 Eps 内点的数量小于 MinPts，但是落在核心点的邻域内。 噪音点。既不是核心点也不是边界点的点。 DBSCAN 的一些定义 ε-邻域：对于样本集中的 xj, 它的 ε-邻域为样本集中与它距离小于 ε 的样本所构成的集合。 核心对象：若 xj 的 ε-邻域中至少包含MinPts个样本，则xj为一个核心对象。 密度直达：若 xj 位于 xi 的 ε-邻域中，且 xi 为核心对象，则 xj 由 xi 密度直达。 密度可达：若样本序列 p1, p2, ……, pn。pi+1 由 pi 密度直达，则 p1 由 pn 密度可达。 DBSCAN 的基本思路 初始化核心对象集合 T 为空，遍历一遍样本集 D 中所有的样本，计算每个样本点的 ε-邻域中包含样本的个数，如果个数大于等于 MinPts，则将该样本点加入到核心对象集合中。初始化聚类簇数 k = 0， 初始化未访问样本集和为 P = D。 当 T 集合中存在样本时执行如下步骤： 记录当前未访问集合 P_old = P 从 T 中随机选一个核心对象 o,初始化一个队列 Q = [o] P = P-o (从 T 中删除 o) 当 Q 中存在样本时执行： 取出队列中的首个样本 q 计算 q的 ε-邻域中包含样本的个数，如果大于等于 MinPts，则令 S 为 q 的 ε-邻域与 P 的交集，Q = Q + S，P = P - S k = k + 1，生成聚类簇为 Ck = P_old - P T = T - Ck 划分为 C= {C1, C2, ……, Ck} Pros and Cons 与 K-means 相比，DBSCAN 不需要事先知道要形成的簇类的数量。 与 K-means 相比，DBSCAN 可以发现任意形状的簇类。 同时，DBSCAN 能够识别出噪声点。 DBSCAN 对于 eps，MinPts 的值敏感，聚类质量受较大影响。 DBSCAN 不能很好反映高尺寸数据。 DBSCAN 不能很好反映数据集变化的密度。 对于高维数据，密度定义很难。]]></content>
      <categories>
        <category>聚类分析</category>
      </categories>
      <tags>
        <tag>聚类算法</tag>
        <tag>DBSCAN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apriori 的初步了解]]></title>
    <url>%2FApriori%20%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[Apriori 算法是一种最有影响力的挖掘布尔关联规则的频繁项集的算法，它是由 Rakesh Agrawal 和 RamakrishnanSkrikant 提出的。 Apriori 算法是一种挖掘关联规则的频繁项集算法，其核心思想是通过候选集生成和情节的向下封闭检测两个阶段来挖掘频繁项集。 Apriori 算法应用广泛，可用于消费市场价格分析，猜测顾客的消费习惯；网络安全领域中的入侵检测技术；可用在用于高校管理中，根据挖掘规则可以有效地辅助学校管理部门有针对性的开展贫困助学工作；也可用在移动通信领域中，指导运营商的业务运营和辅助业务提供商的决策制定。 Apriori 算法过程分为两个步骤： 通过迭代，检索出事务数据库中的所有频繁项集，即支持度不低于用户设定的阈值的项集； 利用频繁项集构造出满足用户最小信任度的规则。 具体做法就是： 首先找出频繁 1- 项集，记为 L1；然后利用 L1 来产生候选项集 C2，对 C2 中的项进行判定挖掘出 L2，即频繁 2- 项集；不断如此循环下去直到无法发现更多的频繁 k- 项集为止。每挖掘一层 Lk 就需要扫描整个数据库一遍。算法利用了一个性质：任一频繁项集的所有非空子集也必须是频繁的。意思就是说，生成一个 k-itemset 的候选项时，如果这个候选项有子集不在 (k-1)-itemset（已经确定是 frequent 的）中时，那么这个候选项就不用拿去和支持度判断了，直接删除。]]></content>
      <categories>
        <category>序列模式挖掘</category>
      </categories>
      <tags>
        <tag>序列模式挖掘</tag>
        <tag>Apriori</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[K-means 的基本流程]]></title>
    <url>%2FK-means%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html</url>
    <content type="text"><![CDATA[K-means 算法的基本流程如下： 随机取 K 个种子点。 然后对所有点求到这K个种子点的距离，假如点 Pi 离种子点 Si 最近，那么 Pi 属于 Si 点群 接下来，移动种子点到属于他的“点群”的中心。 然后重复第2）和第3）步，直到种子点没有移动。 其中求点群中心的算法，可以有更多的更灵活的公式： Minkowski Distance 公式，λ 可以随意取值，可以是负数，也可以是正数，或是无穷大。 Euclidean Distance 公式，第一个公式 λ=2 的情况。 CityBlock Distance 公式，第一个公式 λ=1 的情况。 K-means 主要有两个缺陷： K 是事先给定的，这个 K 值的选定是非常难以估计的。很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适。（ ISODATA 算法通过类的自动合并和分裂，得到较为合理的类型数目 K） K-means算法需要用初始随机种子点来搞，这个随机种子点太重要，不同的随机种子点会有得到完全不同的结果。（K-Means++ 算法可以用来解决这个问题，其可以有效地选择初始点） K-means++ 算法的基本流程如下： 先从我们的数据库随机挑个随机点当“种子点”。 对于每个点，计算其和最近的一个“种子点”的距离 D(x) 并保存在一个数组里，把这些距离加起来得到 Sum(D(x))。 取一个随机值，用权重的方式来取计算下一个“种子点”。这个算法的实现是，先取一个能落在 Sum(D(x)) 中的随机值 Random，然后用 Random -= D(x)，直到其 &lt;=0，此时的点就是下一个“种子点”。 重复第（2）和第（3）步直到所有的K个种子点都被选出来。 进行 K-means 算法。]]></content>
      <categories>
        <category>聚类分析</category>
      </categories>
      <tags>
        <tag>聚类算法</tag>
        <tag>K-means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动对象轨迹序列模式挖掘]]></title>
    <url>%2F%E7%A7%BB%E5%8A%A8%E5%AF%B9%E8%B1%A1%E8%BD%A8%E8%BF%B9%E5%BA%8F%E5%88%97%E6%A8%A1%E5%BC%8F%E6%8C%96%E6%8E%98.html</url>
    <content type="text"><![CDATA[移动对象轨迹是由大量的时空数据组成的一系列数据，具有实时性、海量性、不确定性等特点，如何通过对实时的时空轨迹数据进行分析进而挖掘出用户需要的轨迹行为模式是基于位置服务的一大研究热点。 数据挖掘 (Data Mining) 近来一直备受关注，相关研究也逐渐深入，加之技术日趋成熟，已逐渐转变成用户移动数据挖掘的一种重要工具。由时间序列引出的序列模式挖掘 (Sequence Pattern Mining)，作为数据挖掘的一个重要方法，吸引了很多研究者前来研究，一定程度上解决了如何通过用户的移动轨迹数据集挖掘出有效信息的困惑。面对时间和空间两个方面的移动轨迹信息，首先通过时间这一属性将轨迹数据转化为时间线上的序列模式 (Sequence Pattern)，再对每条的序列数据进行模式挖掘 (Pattern Mining)，去除噪音，挖掘出有效信息。序列模式挖掘已经成为将移动对象的大量轨迹数据转化为有用的信息资源的有效工具，进而可以进行高效的科学决策。 对于序列模式挖掘算法，国内外的一些研究均在 Apriori 的算法以及 PrefixSpan 算法这两大类的基础上进行的。Apriori 算法是 R.Agrawal 和 R.Srikant 共同提出的规则挖掘频繁项集的算法，并且此算法衍生了很多其他的算法，例如：AprioriAll 算法、GSP 算法和 SPADE 算法等。而 PrefixSpan 算法则是由 J.Han 等人提出的基于数据库投影模式增长的算法，此算法也衍生出很多算法，例如：Freespan 算法等。 序列模式挖掘 (Sequence Pattern Mining) 是指在时间序列数据中挖掘频繁出现的时间序列。序列模式挖掘在数据挖掘的研究中占着十分重要的位置。时间序列数据通过系统提取，能够让人们做出适当的调整或者及时发现变动，而且时间序列数据之间的规律通过序列模式挖掘之后则可以发现更多潜在的知识，甚至成为一个重要的理论热点或者发现更高的实用价值。]]></content>
      <categories>
        <category>序列模式挖掘</category>
      </categories>
      <tags>
        <tag>序列模式挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4 种序列模式挖掘算法的比较分析]]></title>
    <url>%2F4%20%E7%A7%8D%E5%BA%8F%E5%88%97%E6%A8%A1%E5%BC%8F%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83%E5%88%86%E6%9E%90.html</url>
    <content type="text"><![CDATA[AprioriAll 算法属于 Apriori 类算法，其基本思想为首先遍历序列数据库生成候选序列并利用 Apriori 性质进行剪枝得到频繁序列。每次遍历都是通过连接上次得到的频繁序列生成新的长度加1的候选序列，然后扫描每个候选序列验证其是否为频繁序列。 GSP（generalized sequential pattern）算法是 AprioriAll 算法的扩展算法，其算法的执行过程和 AprioriAll 类似，最大的不同在于 GSP 引入了时间约束、滑动时间窗和分类层次技术，增加了扫描的约束条件，有效地减少了需要扫描的候选序列的数量。此外 GSP 利用哈希树来存储候选序列，减少了需要扫描的序列数量。 FreeSpan 算法是基于模式投影的序列挖掘算法，其基本思想：利用当前挖掘的频繁序列集将序列数据库递归地投影到一组更小的投影数据库上，分别在每个投影数据库上增长子序列。这一过程对数据和待检验的频繁模式集都进行了分割，并且每一次检验限制在与其相符合的更小投影数据库中。 PrefixSpan 是 FreeSpan 的改进算法，即通过前缀投影挖掘序列模式。其基本思想：投影时不考虑所有可能出现的频繁子序列，只检查前缀序列，然后把相应的后缀投影成投影数据库。每个投影数据库中，只检查局部频繁模式，在整个过程中不需要生成候选序列。 AprioriAll GSP 这两种算法都属于 Apriori 类算法，都要产生大量的候选序列，需要有足够的存贮空间。同时还需要反复扫描数据库，需要占用很多运行时间。该类算法的执行效率比较低，特别是在支持度比较低的情况下，其执行效率将会大大下降。和 AprioriAll 相比，GSP 的执行效率比较高，总体来说要比 AprioriAll 高 2~20 倍。 FreeSpan PrefixSpan 这两种算法都属于模式增长算法，它们的查找更加集中和有效。由于该类算法不生成大量的候选序列以及不需要反复扫描原数据库，和 Apriori 类算法相比该类算法要快且更有效，特别是在支持度比较低的情况下更明显。此外，在时空的执行效率上，PrefixSpan 比 FreeSpan 更优。]]></content>
      <categories>
        <category>序列模式挖掘</category>
      </categories>
      <tags>
        <tag>序列模式挖掘</tag>
        <tag>AprioriAll</tag>
        <tag>GSP</tag>
        <tag>FreeSpan</tag>
        <tag>PrefixSpan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[K-means 的初步了解]]></title>
    <url>%2FK-means%20%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[K-means 算法属于基于划分的聚类方法，是一种最简单的无监督学习算法，也是十大经典数据挖掘算法之一。K-means 算法通过迭代来实现，其基本思想为：每次确定 K 个中心点，将各节点归属到与之最近的中心点所代表的 cluster，然后确定新的中心点，并继续聚类，直到聚类结果不再变化停止迭代。 K 值的选取：算法中 K 值需要事先给定，但这个K值的选定是非常难以估计的。很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适。这也是 K-means 算法的一个不足。 初始中心点的选取：初始聚类中心点唯一地决定了聚类结果，因此其选择对聚类结果有很大的影响，一旦初始值选择的不好，可能无法得到有效的聚类结果，这也是 K-means 算法的一个主要问题。 K-means 算法并不能保证得到的解为全局最优解，通常得到的是一个局部最优解。 K-means 算法确定的 K 个 cluster 达到平方误差最小。当聚类是密集的，且类与类之间区别明显时，效果比较好。对于处理大数据集，这个算法是高效和可扩展的，时间复杂度可达到最优。 改进算法： K-means 要手工输入类数目，对初始值的设置很敏感，所以有了 K-means++、intelligent K-means、genetic K-means； K-means 对噪声和离群值非常敏感，所以有了 K-medoids 和 K-medians； K-means 只用于numerical类型数据，不适用于 categorical 类型数据，所以 K-modes； K-means 不能解决非凸（non-convex）数据，所以有了 kernel K-means。]]></content>
      <categories>
        <category>聚类分析</category>
      </categories>
      <tags>
        <tag>聚类算法</tag>
        <tag>K-means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聚类算法的初步了解]]></title>
    <url>%2F%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[聚类算法主要是用在聚类分析中的算法，而聚类分析（群集分析）是对于统计数据分析的一门技术把相似的对象通过静态分类的方法分成不同的组别或者更多的子集，这样让在同一个子集中的成员对象都有相似的一些属性，常见的包括在坐标系中更加短的空间距离等。 移动对象常访问位置点的挖掘（聚类算法）： 基于划分的算法的输入是包含n个对象的数据库和簇的数目 k；输出是 k 个簇，使平方误差准则最小。优点：简单，易于理解和实现；时间复杂度低。缺点：K-means 要手工输入类数目，对初始值的设置很敏感；对噪声和离群值非常敏感；只用于 numerical 类型数据，不适用于 categorical 类型数据；不能解决非凸 (non-convex) 数据；主要发现圆形或者球形簇，不能识别非球形的簇。 基于密度的算法的输入是包含n个对象的数据库，输出是多个簇。优点：与 K-means 方法相比，DBSCAN 不需要事先知道要形成的簇类的数量；与 K-means 方法相比，DBSCAN 可以发现任意形状的簇类；同时，DBSCAN 能够识别出噪声点；DBSCAN 对于数据库中样本的顺序不敏感。缺点：DBSCAN 不能很好反映高尺寸数据；DBSCAN 不能很好反映数据集变化的密度；对于高维数据，点之间极为稀疏，密度很难定义。 基于层次的算法的输入是包含 n 个对象的数据库，输出是一类簇。优点：距离和规则的相似度容易定义，限制少；不需要预先制定聚类数；可以发现类的层次关系；可以聚类成其它形状。缺点：计算复杂度太高；奇异值也能产生很大影响；算法很可能聚类成链状。 基于网络的算法的输入是高维的输入向量，输出是聚类网络。优点：可以实现从输入空间（n 维）到输出平面（2 维）的降维映射。缺点：时间复杂度高，处理时间较长。 K-means 是划分方法中较经典的聚类算法之一。由于该算法的效率高，所以在对大规模数据进行聚类时被广泛应用。目前，许多算法均围绕着该算法进行扩展和改进。K-means 算法以 k 为参数，把 n 个对象分成 k 个簇，使簇内具有较高的相似度，而簇间的相似度较低。K-means 算法的处理过程如下：首先，随机地选择 k 个对象，每个对象初始地代表了一个簇的平均值或中心；对剩余的每个对象，根据其与各簇中心的距离，将它赋给最近的簇；然后重新计算每个簇的平均值。这个过程不断重复，直到准则函数收敛。]]></content>
      <categories>
        <category>聚类分析</category>
      </categories>
      <tags>
        <tag>聚类算法</tag>
        <tag>K-means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab8]]></title>
    <url>%2FIA-Lab8.html</url>
    <content type="text"><![CDATA[The Configuration of WiresharkCapture the interface “enp2s0” which is my Ethernet adapter.The filter rule is “udp port 67” for capturing DHCP packets, “udp port 53” for capturing DNS packets. DHCP Message Format1234567891011121314151617181920212223242526272829+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| op (1) | htype (1) | hlen (1) | hops (1) |+---------------+---------------+---------------+---------------+| xid (4) |+-------------------------------+-------------------------------+| secs (2) | flags (2) |+-------------------------------+-------------------------------+| ciaddr (4) |+---------------------------------------------------------------+| yiaddr (4) |+---------------------------------------------------------------+| siaddr (4) |+---------------------------------------------------------------+| giaddr (4) |+---------------------------------------------------------------+| || chaddr (16) || || |+---------------------------------------------------------------+| || sname (64) |+---------------------------------------------------------------+| || file (128) |+---------------------------------------------------------------+| || options (variable) |+---------------------------------------------------------------+ DHCP Explanation Message Type: 1 = BOOTREQUEST, 2 = BOOTREPLY Hardware type: Hardware address type, see ARP section in “Assigned Numbers” RFC; e.g., ‘1’ = 10mb ethernet. Hardware address length: Hardware address length (e.g. ‘6’ for 10mb ethernet). Hops: Client sets to zero, optionally used by relay agents when booting via a relay agent. Transaction ID: A random number chosen by the client, used by the client and server to associate messages and responses between a client and a server. Seconds elapsed: Filled in by client, seconds elapsed since client began address acquisition or renewal process. Bootp flags: Flags. Client IP address: Only filled in if client is in BOUND, RENEW or REBINDING state and can respond to ARP requests. Your (client) IP address: ‘your’ (client) IP address. Next server IP address: IP address of next server to use in bootstrap; returned in DHCPOFFER, DHCPACK by server. Relay agent IP address: Relay agent IP address, used in booting via a relay agent. Client MAC address: Client hardware address. Server host name: Optional server host name, null terminated string. Boot file name: Boot file name, null terminated string; “generic” name or null in DHCPDISCOVER, fully qualifiedcdirectory-path name in DHCPOFFER. Option: (1) Subnet Mask - The subnet mask option specifies the client’s subnet mask. Option: (3) Router Option - The router option specifies a list of IP addresses for routers on the client’s subnet. Routers SHOULD be listed in order of preference. Option: (6) Domain Name Server Option - The domain name server option specifies a list of Domain Name System name servers available to the client. Servers SHOULD be listed in order of preference. Option: (12) Host Name Option - This option specifies the name of the client. The name may or may not be qualified with the local domain name. Option: (15) Domain Name - This option specifies the domain name that client should use when resolving hostnames via the Domain Name System. Option: (50) Requested IP Address - This option is used in a client request (DHCPDISCOVER) to allow the client to request that a particular IP address be assigned. Option: (51) IP Address Lease Time - This option is used in a client request (DHCPDISCOVER or DHCPREQUEST) to allow the client to request a lease time for the IP address. In a server reply (DHCPOFFER), a DHCP server uses this option to specify the lease time it is willing to offer. Option: (53) DHCP Message Type - This option is used to convey the type of the DHCP message. 1 = DHCPDISCOVER, 2 = DHCPOFFER, 3 = DHCPREQUEST, 5 = DHCPACK, 7 = DHCPRELEASE Option: (54) Server Identifier - This option is used in DHCPOFFER and DHCPREQUEST messages, and may optionally be included in the DHCPACK and DHCPNAK messages. DHCP servers include this option in the DHCPOFFER in order to allow the client to distinguish between lease offers. DHCP clients use the contents of the ‘server identifier’ field as the destination address for any DHCP messages unicast to the DHCP server. DHCP clients also indicate which of several lease offers is being accepted by including this option in a DHCPREQUEST message. The identifier is the IP address of the selected server. Option: (55) Parameter Request List - This option is used by a DHCP client to request values for specified configuration parameters. The list of requested parameters is specified as n octets, where each octet is a valid DHCP option code as defined in this document. The client MAY list the options in order of preference. The DHCP server is not required to return the options in the requested order, but MUST try to insert the requested options in the order requested by the client. Option: (58) Renewal (T1) Time Value - This option specifies the time interval from address assignment until the client transitions to the RENEWING state. Option: (59) Rebinding (T2) Time Value - This option specifies the time interval from address assignment until the client transitions to the REBINDING state. By the packets I have captured, all of DHCP packets were sent by unicast. Differences from lecture notes: your IP address is different because of the different DHCP server. No server IP address, no router IP address because the router in room is not DHCP server in BUPT campus. Message Sequence Chart123456789101112Note over Client: Graceful shutdownClient-&gt;Server: DHCPRELEASENote over Server: Discards leaseNote over Client: Begins initialization Client-&gt;Server: DHCPDISCOVERNote over Server: Determines configurationServer--&gt;Client: DHCPOFFERNote over Client: Collects repliesClient-&gt;Server: DHCPREQUESTNote over Server: Commits configurationServer--&gt;Client: DHCPACKNote over Client: Initialization complete No.1 DHCP Release@(Client to server relinquishing network address and cancelling remaining lease.) 123456789101112131415161718Bootstrap Protocol (Release) Message type: Boot Request (1) Hops: 0 Transaction ID: 0x6bb0247f Bootp flags: 0x0000 (Unicast) 0... .... .... .... = Broadcast flag: Unicast .000 0000 0000 0000 = Reserved flags: 0x0000 Client IP address: 10.205.0.212 Your (client) IP address: 0.0.0.0 Option: (53) DHCP Message Type (Release) Length: 1 DHCP: Release (7) Option: (54) DHCP Server Identifier Length: 4 DHCP Server Identifier: 10.3.9.3 Option: (12) Host Name Length: 16 Host Name: i.questionyu.com Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 10.205.0.212 Destination: 10.3.9.3 Port number: Source Port: 68 Destination Port: 67 No.2 DHCP Discover@(Client broadcast to locate available servers.) 123456789101112131415161718192021222324252627282930313233Bootstrap Protocol (Discover) Message type: Boot Request (1) Hops: 0 Transaction ID: 0x7cf5b152 Bootp flags: 0x0000 (Unicast) 0... .... .... .... = Broadcast flag: Unicast .000 0000 0000 0000 = Reserved flags: 0x0000 Client IP address: 0.0.0.0 Your (client) IP address: 0.0.0.0 Option: (53) DHCP Message Type (Discover) Length: 1 DHCP: Discover (1) Option: (50) Requested IP Address Length: 4 Requested IP Address: 10.205.0.212 Option: (12) Host Name Length: 16 Host Name: i.questionyu.com Option: (55) Parameter Request List Length: 13 Parameter Request List Item: (1) Subnet Mask Parameter Request List Item: (28) Broadcast Address Parameter Request List Item: (2) Time Offset Parameter Request List Item: (3) Router Parameter Request List Item: (15) Domain Name Parameter Request List Item: (6) Domain Name Server Parameter Request List Item: (119) Domain Search Parameter Request List Item: (12) Host Name Parameter Request List Item: (44) NetBIOS over TCP/IP Name Server Parameter Request List Item: (47) NetBIOS over TCP/IP Scope Parameter Request List Item: (26) Interface MTU Parameter Request List Item: (121) Classless Static Route Parameter Request List Item: (42) Network Time Protocol Servers Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Broadcast (ff:ff:ff:ff:ff:ff) IP address: Source: 0.0.0.0 Destination: 255.255.255.255 Port number: Source Port: 68 Destination Port: 67 No.3 DHCP Offer@(Server to client in response to DHCPDISCOVER with offer of configuration parameters.) 1234567891011121314151617181920212223242526272829303132Bootstrap Protocol (Offer) Message type: Boot Reply (2) Hops: 1 Transaction ID: 0x7cf5b152 Bootp flags: 0x0000 (Unicast) 0... .... .... .... = Broadcast flag: Unicast .000 0000 0000 0000 = Reserved flags: 0x0000 Client IP address: 0.0.0.0 Your (client) IP address: 10.205.0.212 Option: (53) DHCP Message Type (Offer) Length: 1 DHCP: Offer (2) Option: (54) DHCP Server Identifier Length: 4 DHCP Server Identifier: 10.3.9.3 Option: (51) IP Address Lease Time Length: 4 IP Address Lease Time: (3600s) 1 hour Option: (1) Subnet Mask Length: 4 Subnet Mask: 255.255.255.224 Option: (3) Router Length: 4 Router: 10.205.0.193 Option: (15) Domain Name Length: 11 Domain Name: bupt.edu.cn Option: (6) Domain Name Server Length: 12 Domain Name Server: 10.3.9.5 Domain Name Server: 10.3.9.4 Domain Name Server: 10.3.9.6 Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 10.205.0.193 Destination: 10.205.0.212 Port number: Source Port: 67 Destination Port: 68 No.4 DHCP Request@(Client message to servers either (a) requesting offered parameters from one server and implicitly declining offers from all others, (b) confirming correctness of previously allocated address after, e.g., system reboot, or (c) extending the lease on a particular network address.) 123456789101112131415161718192021222324252627282930313233343536Bootstrap Protocol (Request) Message type: Boot Request (1) Hops: 0 Transaction ID: 0x7cf5b152 Bootp flags: 0x0000 (Unicast) 0... .... .... .... = Broadcast flag: Unicast .000 0000 0000 0000 = Reserved flags: 0x0000 Client IP address: 0.0.0.0 Your (client) IP address: 0.0.0.0 Option: (53) DHCP Message Type (Request) Length: 1 DHCP: Request (3) Option: (54) DHCP Server Identifier Length: 4 DHCP Server Identifier: 10.3.9.3 Option: (50) Requested IP Address Length: 4 Requested IP Address: 10.205.0.212 Option: (12) Host Name Length: 16 Host Name: i.questionyu.com Option: (55) Parameter Request List Length: 13 Parameter Request List Item: (1) Subnet Mask Parameter Request List Item: (28) Broadcast Address Parameter Request List Item: (2) Time Offset Parameter Request List Item: (3) Router Parameter Request List Item: (15) Domain Name Parameter Request List Item: (6) Domain Name Server Parameter Request List Item: (119) Domain Search Parameter Request List Item: (12) Host Name Parameter Request List Item: (44) NetBIOS over TCP/IP Name Server Parameter Request List Item: (47) NetBIOS over TCP/IP Scope Parameter Request List Item: (26) Interface MTU Parameter Request List Item: (121) Classless Static Route Parameter Request List Item: (42) Network Time Protocol Servers Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Broadcast (ff:ff:ff:ff:ff:ff) IP address: Source: 0.0.0.0 Destination: 255.255.255.255 Port number: Source Port: 68 Destination Port: 67 No.5 DHCP ACK@(Server to client with configuration parameters, including committed network address.) 1234567891011121314151617181920212223242526272829303132Bootstrap Protocol (ACK) Message type: Boot Reply (2) Hops: 1 Transaction ID: 0x7cf5b152 Bootp flags: 0x0000 (Unicast) 0... .... .... .... = Broadcast flag: Unicast .000 0000 0000 0000 = Reserved flags: 0x0000 Client IP address: 0.0.0.0 Your (client) IP address: 10.205.0.212 Option: (53) DHCP Message Type (ACK) Length: 1 DHCP: ACK (5) Option: (54) DHCP Server Identifier Length: 4 DHCP Server Identifier: 10.3.9.3 Option: (51) IP Address Lease Time Length: 4 IP Address Lease Time: (3600s) 1 hour Option: (1) Subnet Mask Length: 4 Subnet Mask: 255.255.255.224 Option: (3) Router Length: 4 Router: 10.205.0.193 Option: (15) Domain Name Length: 11 Domain Name: bupt.edu.cn Option: (6) Domain Name Server Length: 12 Domain Name Server: 10.3.9.5 Domain Name Server: 10.3.9.4 Domain Name Server: 10.3.9.6 Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 10.205.0.193 Destination: 10.205.0.212 Port number: Source Port: 67 Destination Port: 68 DNS Message Format12345678910111213+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+| ID |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+|QR| Opcode |AA|TC|RD|RA| Z | RCODE |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+| QDCOUNT |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+| ANCOUNT |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+| NSCOUNT |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+| ARCOUNT |+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ DNS-A questionyu.com No.1 DNS Query123456789101112131415161718192021Domain Name System (query) [Response In: 2] Transaction ID: 0x3a72 Flags: 0x0100 Standard query 0... .... .... .... = Response: Message is a query .000 0... .... .... = Opcode: Standard query (0) .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... .0.. .... = Z: reserved (0) .... .... ...0 .... = Non-authenticated data: Unacceptable Questions: 1 Answer RRs: 0 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type A, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: A (Host Address) (1) Class: IN (0x0001) Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 2001:da8:215:c506::beef Destination: 2001:4860:4860::8888 Port number: Source Port: 48542 Destination Port: 53 No.2 DNS Response1234567891011121314151617181920212223242526272829303132333435363738394041Domain Name System (response) [Request In: 1] [Time: 0.100708994 seconds] Transaction ID: 0x3a72 Flags: 0x8180 Standard query response, No error 1... .... .... .... = Response: Message is a response .000 0... .... .... = Opcode: Standard query (0) .... .0.. .... .... = Authoritative: Server is not an authority for domain .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... 1... .... = Recursion available: Server can do recursive queries .... .... .0.. .... = Z: reserved (0) .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server .... .... ...0 .... = Non-authenticated data: Unacceptable .... .... .... 0000 = Reply code: No error (0) Questions: 1 Answer RRs: 2 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type A, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: A (Host Address) (1) Class: IN (0x0001) Answers questionyu.com: type A, class IN, addr 104.31.77.20 Name: questionyu.com Type: A (Host Address) (1) Class: IN (0x0001) Time to live: 299 Data length: 4 Address: 104.31.77.20 questionyu.com: type A, class IN, addr 104.31.76.20 Name: questionyu.com Type: A (Host Address) (1) Class: IN (0x0001) Time to live: 299 Data length: 4 Address: 104.31.76.20 Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 2001:4860:4860::8888 Destination: 2001:da8:215:c506::beef Port number: Source Port: 53 Destination Port: 48542 DNS-MX questionyu.com No.1 DNS Query123456789101112131415161718192021Domain Name System (query) [Response In: 2] Transaction ID: 0xfec1 Flags: 0x0100 Standard query 0... .... .... .... = Response: Message is a query .000 0... .... .... = Opcode: Standard query (0) .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... .0.. .... = Z: reserved (0) .... .... ...0 .... = Non-authenticated data: Unacceptable Questions: 1 Answer RRs: 0 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type MX, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: MX (Mail eXchange) (15) Class: IN (0x0001) Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 2001:da8:215:c506::beef Destination: 2001:4860:4860::8888 Port number: Source Port: 38337 Destination Port: 53 No.2 DNS Response1234567891011121314151617181920212223242526272829303132333435Domain Name System (response) [Request In: 1] [Time: 0.067065156 seconds] Transaction ID: 0xfec1 Flags: 0x8180 Standard query response, No error 1... .... .... .... = Response: Message is a response .000 0... .... .... = Opcode: Standard query (0) .... .0.. .... .... = Authoritative: Server is not an authority for domain .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... 1... .... = Recursion available: Server can do recursive queries .... .... .0.. .... = Z: reserved (0) .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server .... .... ...0 .... = Non-authenticated data: Unacceptable .... .... .... 0000 = Reply code: No error (0) Questions: 1 Answer RRs: 1 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type MX, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: MX (Mail eXchange) (15) Class: IN (0x0001) Answers questionyu.com: type MX, class IN, preference 10, mx mxdomain.qq.com Name: questionyu.com Type: MX (Mail eXchange) (15) Class: IN (0x0001) Time to live: 299 Data length: 16 Preference: 10 Mail Exchange: mxdomain.qq.com Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 2001:4860:4860::8888 Destination: 2001:da8:215:c506::beef Port number: Source Port: 53 Destination Port: 38337 DNS-PTR 8.8.8.8 No.1 DNS Query123456789101112131415161718192021Domain Name System (query) [Response In: 2] Transaction ID: 0x7806 Flags: 0x0100 Standard query 0... .... .... .... = Response: Message is a query .000 0... .... .... = Opcode: Standard query (0) .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... .0.. .... = Z: reserved (0) .... .... ...0 .... = Non-authenticated data: Unacceptable Questions: 1 Answer RRs: 0 Authority RRs: 0 Additional RRs: 0 Queries 8.8.8.8.in-addr.arpa: type PTR, class IN Name: 8.8.8.8.in-addr.arpa [Name Length: 20] [Label Count: 6] Type: PTR (domain name PoinTeR) (12) Class: IN (0x0001) Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 2001:da8:215:c506::beef Destination: 2001:4860:4860::8888 Port number: Source Port: 33287 Destination Port: 53 No.2 DNS Response12345678910111213141516171819202122232425262728293031323334Domain Name System (response) [Request In: 1] [Time: 0.055456438 seconds] Transaction ID: 0x7806 Flags: 0x8180 Standard query response, No error 1... .... .... .... = Response: Message is a response .000 0... .... .... = Opcode: Standard query (0) .... .0.. .... .... = Authoritative: Server is not an authority for domain .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... 1... .... = Recursion available: Server can do recursive queries .... .... .0.. .... = Z: reserved (0) .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server .... .... ...0 .... = Non-authenticated data: Unacceptable .... .... .... 0000 = Reply code: No error (0) Questions: 1 Answer RRs: 1 Authority RRs: 0 Additional RRs: 0 Queries 8.8.8.8.in-addr.arpa: type PTR, class IN Name: 8.8.8.8.in-addr.arpa [Name Length: 20] [Label Count: 6] Type: PTR (domain name PoinTeR) (12) Class: IN (0x0001) Answers 8.8.8.8.in-addr.arpa: type PTR, class IN, google-public-dns-a.google.com Name: 8.8.8.8.in-addr.arpa Type: PTR (domain name PoinTeR) (12) Class: IN (0x0001) Time to live: 86399 Data length: 32 Domain Name: google-public-dns-a.google.com Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 2001:4860:4860::8888 Destination: 2001:da8:215:c506::beef Port number: Source Port: 53 Destination Port: 33287 DNS-AAAA questionyu.com No.1 DNS Query123456789101112131415161718192021Domain Name System (query) [Response In: 2] Transaction ID: 0x96a2 Flags: 0x0100 Standard query 0... .... .... .... = Response: Message is a query .000 0... .... .... = Opcode: Standard query (0) .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... .0.. .... = Z: reserved (0) .... .... ...0 .... = Non-authenticated data: Unacceptable Questions: 1 Answer RRs: 0 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type AAAA, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: AAAA (IPv6 Address) (28) Class: IN (0x0001) Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 2001:da8:215:c506::beef Destination: 2001:4860:4860::8888 Port number: Source Port: 52731 Destination Port: 53 No.2 DNS Response1234567891011121314151617181920212223242526272829303132333435363738394041Domain Name System (response) [Request In: 1] [Time: 0.068031471 seconds] Transaction ID: 0x96a2 Flags: 0x8180 Standard query response, No error 1... .... .... .... = Response: Message is a response .000 0... .... .... = Opcode: Standard query (0) .... .0.. .... .... = Authoritative: Server is not an authority for domain .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... 1... .... = Recursion available: Server can do recursive queries .... .... .0.. .... = Z: reserved (0) .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server .... .... ...0 .... = Non-authenticated data: Unacceptable .... .... .... 0000 = Reply code: No error (0) Questions: 1 Answer RRs: 2 Authority RRs: 0 Additional RRs: 0 Queries questionyu.com: type AAAA, class IN Name: questionyu.com [Name Length: 14] [Label Count: 2] Type: AAAA (IPv6 Address) (28) Class: IN (0x0001) Answers questionyu.com: type AAAA, class IN, addr 2400:cb00:2048:1::681f:4d14 Name: questionyu.com Type: AAAA (IPv6 Address) (28) Class: IN (0x0001) Time to live: 299 Data length: 16 AAAA Address: 2400:cb00:2048:1::681f:4d14 questionyu.com: type AAAA, class IN, addr 2400:cb00:2048:1::681f:4c14 Name: questionyu.com Type: AAAA (IPv6 Address) (28) Class: IN (0x0001) Time to live: 299 Data length: 16 AAAA Address: 2400:cb00:2048:1::681f:4c14 Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 2001:4860:4860::8888 Destination: 2001:da8:215:c506::beef Port number: Source Port: 53 Destination Port: 52731 DNS-TXT google-public-dns-a.google.com No.1 DNS Query123456789101112131415161718192021Domain Name System (query) [Response In: 2] Transaction ID: 0x8836 Flags: 0x0100 Standard query 0... .... .... .... = Response: Message is a query .000 0... .... .... = Opcode: Standard query (0) .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... .0.. .... = Z: reserved (0) .... .... ...0 .... = Non-authenticated data: Unacceptable Questions: 1 Answer RRs: 0 Authority RRs: 0 Additional RRs: 0 Queries google-public-dns-a.google.com: type TXT, class IN Name: google-public-dns-a.google.com [Name Length: 30] [Label Count: 3] Type: TXT (Text strings) (16) Class: IN (0x0001) Frame address: Source: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) Destination: Hangzhou_56:f1:51 (00:23:89:56:f1:51) IP address: Source: 2001:da8:215:c506::beef Destination: 2001:4860:4860::8888 Port number: Source Port: 58105 Destination Port: 53 No.2 DNS Response1234567891011121314151617181920212223242526272829303132333435Domain Name System (response) [Request In: 1] [Time: 0.056486861 seconds] Transaction ID: 0x8836 Flags: 0x8180 Standard query response, No error 1... .... .... .... = Response: Message is a response .000 0... .... .... = Opcode: Standard query (0) .... .0.. .... .... = Authoritative: Server is not an authority for domain .... ..0. .... .... = Truncated: Message is not truncated .... ...1 .... .... = Recursion desired: Do query recursively .... .... 1... .... = Recursion available: Server can do recursive queries .... .... .0.. .... = Z: reserved (0) .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server .... .... ...0 .... = Non-authenticated data: Unacceptable .... .... .... 0000 = Reply code: No error (0) Questions: 1 Answer RRs: 1 Authority RRs: 0 Additional RRs: 0 Queries google-public-dns-a.google.com: type TXT, class IN Name: google-public-dns-a.google.com [Name Length: 30] [Label Count: 3] Type: TXT (Text strings) (16) Class: IN (0x0001) Answers google-public-dns-a.google.com: type TXT, class IN Name: google-public-dns-a.google.com Type: TXT (Text strings) (16) Class: IN (0x0001) Time to live: 86399 Data length: 22 TXT Length: 21 TXT: http://xkcd.com/1361/ Frame address: Source: Hangzhou_56:f1:51 (00:23:89:56:f1:51) Destination: HewlettP_3c:7c:0f (e4:11:5b:3c:7c:0f) IP address: Source: 2001:4860:4860::8888 Destination: 2001:da8:215:c506::beef Port number: Source Port: 53 Destination Port: 52731]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab7]]></title>
    <url>%2FIA-Lab7.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;stdio.h&gt; /* for printf() and fprintf() */#include &lt;sys/socket.h&gt; /* for socket(), bind(), sendto() and recvfrom() */#include &lt;arpa/inet.h&gt; /* for sockaddr_in and inet_ntoa() */#include &lt;string.h&gt; /* for memset() */#include &lt;unistd.h&gt; /* for close() */#include &lt;fcntl.h&gt;int main(int argc, char *argv[]) &#123; if (argc != 3) &#123; printf("Usage:\n%s &lt;IP Address&gt; &lt;File Name&gt;\n", argv[0]); return 1; &#125; int serverSock; struct sockaddr_in serverAddr; char *fileName, buffer[100]; if ((serverSock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) printf("socket() failed.\n"); memset(&amp;serverAddr, 0, sizeof(serverAddr)); serverAddr.sin_family = AF_INET; serverAddr.sin_addr.s_addr = inet_addr(argv[1]); serverAddr.sin_port = htons(1234); connect(serverSock, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr)); printf("Connecting to server: %s\n", argv[1]); send(serverSock, argv[2], strlen(argv[2]), 0); fileName = argv[2]; strcat(fileName, ".bak\0"); int file = open(fileName, O_RDWR | O_CREAT); int transferSize = 0, recvLen; while ((recvLen = recv(serverSock, buffer, 50, 0)) != 0) &#123; write(file, buffer, recvLen); transferSize += recvLen; &#125; close(file); printf("File received\n"); printf("%d BYTES received, and stored in %s\n", transferSize, fileName); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;stdio.h&gt; /* for printf() and fprintf() */#include &lt;sys/socket.h&gt; /* for socket(), bind(), sendto() and recvfrom() */#include &lt;arpa/inet.h&gt; /* for sockaddr_in and inet_ntoa() */#include &lt;string.h&gt; /* for memset() */#include &lt;unistd.h&gt; /* for close() */#include &lt;fcntl.h&gt;void main(int argc, char *argv[]) &#123; int serverSock, clientSock; struct sockaddr_in serverAddr, clientAddr; socklen_t clientAddrSize = sizeof(clientAddr); char fileName[20], buffer[100]; if ((serverSock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) printf("socket() failed.\n"); memset(&amp;serverAddr, 0, sizeof(serverAddr)); serverAddr.sin_family = AF_INET; serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1"); serverAddr.sin_port = htons(1234); if ((bind(serverSock, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr))) &lt; 0) printf("bind() failed.\n"); listen(serverSock, SOMAXCONN); while (1) &#123; clientSock = accept(serverSock, (struct sockaddr *) &amp;clientAddr, &amp;clientAddrSize); printf("*********************************\n"); printf("Accept client %s on TCP Port %d\n", inet_ntoa(clientAddr.sin_addr), clientAddr.sin_port); if (recv(clientSock, fileName, 20, 0)) &#123; fileName[strlen(fileName)] = '\0'; printf("This client request for file name: %s\n", fileName); int file = open(fileName, O_RDONLY); printf("Entering file transfer...\n"); int transferSize = 0, sendLen; while ((sendLen = read(file, buffer, 50)) != 0)&#123; send(clientSock, buffer, sendLen, 0); transferSize += sendLen; &#125; printf("End of the file\n"); printf("%d BYTES data have been sent\n", transferSize); close(file); &#125; close(clientSock); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab6]]></title>
    <url>%2FIA-Lab6.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;stdio.h&gt; /* for printf() and fprintf() */#include &lt;sys/socket.h&gt; /* for socket(), sendto() and recvfrom() */#include &lt;arpa/inet.h&gt; /* for sockaddr_in and inet_addr() */#include &lt;stdlib.h&gt; /* for atoi() and exit() */#include &lt;string.h&gt; /* for memset() */#include &lt;unistd.h&gt; /* for close() */#define ECHOMAX 255 /* Longest string to echo */int main(int argc, char *argv[]) &#123; int sock; /* Socket descriptor */ struct sockaddr_in echoServAddr; /* Echo server address */// struct sockaddr_in fromAddr; /* Source address of echo */ unsigned short echoServPort; /* Echo server port */// unsigned int fromSize; /* In-out of address size for recvfrom() */ char *servIP; /* IP address of server */ char *echoString; /* String to send to echo server */// char echoBuffer[ECHOMAX + 1]; /* Buffer for receiving echoed string */ size_t echoStringLen; /* Length of string to echo */// int respStringLen; /* Length of received response */ if (argc &lt; 3) &#123; /* Test for correct number of arguments */ printf("Usage: %s &lt;Server IP&gt; &lt;Echo Word&gt;\n", argv[0]); exit(1); &#125; servIP = argv[1]; /* First arg: server IP address (dotted quad) */ echoServPort = 56325; /* Create a datagram/UDP socket */ if ((sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP)) &lt; 0) printf("socket() failed.\n"); /* Construct the server address structure */ memset(&amp;echoServAddr, 0, sizeof(echoServAddr));/*Zero out structure*/ echoServAddr.sin_family = AF_INET; /* Internet addr family */ echoServAddr.sin_addr.s_addr = inet_addr(servIP);/*Server IP address*/ echoServAddr.sin_port = htons(echoServPort); /* Server port */ for (int i = 2; i &lt; argc; i++) &#123; echoString = argv[i]; /* Second arg: string to echo */ if ((echoStringLen = strlen(echoString)) &gt; ECHOMAX) /* Check input length */ printf("Echo word too long.\n"); /* Send the string to the server */ if (sendto(sock, echoString, echoStringLen, 0, (struct sockaddr *) &amp;echoServAddr, sizeof(echoServAddr)) != echoStringLen) printf("sendto() sent a different number of bytes than expected.\n"); printf("sending data to '%s'\n", servIP); &#125;// /* Recv a response */// fromSize = sizeof(fromAddr);// if ((respStringLen = recvfrom(sock, echoBuffer, ECHOMAX, 0, (struct sockaddr *) &amp;fromAddr, &amp;fromSize)) != echoStringLen)// printf("recvfrom() failed\n");//// if (echoServAddr.sin_addr.s_addr != fromAddr.sin_addr.s_addr) &#123;// printf("Error: received a packet from unknown source.\n");// exit(1);// &#125;// /* null-terminate the received data */// echoBuffer[respStringLen] = '\0';// printf("Received: %s\n", echoBuffer);/*Print the echoed message*/ close(sock); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;stdio.h&gt; /* for printf() and fprintf() *///#include &lt;sys/socket.h&gt; /* for socket(), bind(), sendto() and recvfrom() */#include &lt;arpa/inet.h&gt; /* for sockaddr_in and inet_ntoa() *///#include &lt;stdlib.h&gt; /* for atoi() and exit() */#include &lt;string.h&gt; /* for memset() *///#include &lt;unistd.h&gt; /* for close() */#define ECHOMAX 255 /* Longest string to echo */void main(int argc, char *argv[]) &#123; int sock; /* Socket */ struct sockaddr_in echoServAddr; /* Local address */ struct sockaddr_in echoClntAddr; /* Client address */ unsigned int cliAddrLen; /* Length of client address */ char echoBuffer[ECHOMAX]; /* Buffer for echo string */ unsigned short echoServPort; /* Server port */ ssize_t recvMsgSize; /* Size of received message */ echoServPort = 56325; /* Create socket for sending/receiving datagrams */ if ((sock = socket(PF_INET, SOCK_DGRAM, 0)) &lt; 0) printf("socket() failed.\n"); /* Construct local address structure */ memset(&amp;echoServAddr, 0, sizeof(echoServAddr)); echoServAddr.sin_family = AF_INET; echoServAddr.sin_addr.s_addr = htonl(INADDR_ANY); echoServAddr.sin_port = htons(echoServPort); /* Bind to the local address */ if ((bind(sock, (struct sockaddr *) &amp;echoServAddr, sizeof(echoServAddr))) &lt; 0) printf("bind() failed.\n"); for (;;) &#123; /* Run forever */ /* Set the size of the in-out parameter */ cliAddrLen = sizeof(echoClntAddr); /* Block until receive message from a client */ if ((recvMsgSize = recvfrom(sock, echoBuffer, ECHOMAX, 0, (struct sockaddr *) &amp;echoClntAddr, &amp;cliAddrLen)) &lt; 0) printf("recvfrom() failed.\n"); echoBuffer[recvMsgSize] = '\0'; printf("from %s:UDP%d : %s\n", inet_ntoa(echoClntAddr.sin_addr), echoClntAddr.sin_port, echoBuffer);// /* Send received datagram back to the client */// if ((sendto(sock, echoBuffer, recvMsgSize, 0, (struct sockaddr *) &amp;echoClntAddr, sizeof(echoClntAddr))) != recvMsgSize)// printf("sendto() sent a different number of bytes than expected.\n"); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab5]]></title>
    <url>%2FIA-Lab5.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt;#include &lt;netdb.h&gt;#include &lt;arpa/inet.h&gt;int main(int argc, char *argv[]) &#123; struct hostent *h; long addr; if (argc != 2) &#123; printf("Usage:\n%s sample.com\nor\n%s 8.8.8.8\n", argv[0], argv[0]); return 1; &#125; if (inet_addr(argv[1]) != -1) &#123; addr = inet_addr(argv[1]); if ((h = gethostbyaddr((char *) &amp;addr, sizeof(addr), AF_INET)) == NULL) &#123; printf("gethostbyaddr error for address: %s\n", argv[1]); return 1; &#125; &#125; else &#123; if ((h = gethostbyname(argv[1])) == NULL) &#123; printf("gethostbyname error for name: %s\n", argv[1]); return 1; &#125; &#125; printf("Looking information for host: %s\n", argv[1]); printf("Official Name: %s\n", h-&gt;h_name); while ((h-&gt;h_aliases)[0]) printf("Host aliases: %s\n", *h-&gt;h_aliases++); while ((h-&gt;h_addr_list)[0]) printf("IP address: %s\n", inet_ntoa(*(struct in_addr *) *h-&gt;h_addr_list++)); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab4]]></title>
    <url>%2FIA-Lab4.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main() &#123; char buf[10]; int fd1, fd2; if ((fd1 = open("test1", O_RDWR | O_APPEND)) == -1) &#123; printf("Error in opening-1\n"); return 1; &#125; if ((fd2 = open("test2", O_RDONLY)) == -1) &#123; printf("Error in opening-2\n"); return 1; &#125; while ((read(fd2, buf, 1)) != 0) &#123; write(fd1, buf, 1); &#125; close(fd1); close(fd2); return 0;&#125; 123456789101112131415161718192021222324252627282930#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main() &#123; int fd1; off_t off; char s[50]; if ((fd1 = open("test1", O_RDWR | O_APPEND)) == -1) &#123; printf("Error in opening-1\n"); return 1; &#125; write(fd1, "Hiiii", 5); off = lseek(fd1, 0, SEEK_SET); printf("Using append, offset: %lli\n", (long long) off);// off = lseek(fd1, -502, SEEK_CUR);// printf("%lli\n", (long long)off); read(fd1, s, 50); printf("String: %s\n", s); lseek(fd1, 0, SEEK_SET); write(fd1, "Abbbb", 5); close(fd1); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网应用 Lab3]]></title>
    <url>%2FIA-Lab3.html</url>
    <content type="text"><![CDATA[1234567891011121314151617#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main() &#123; char *arg[] = &#123;"/bin/ls", 0&#125;; /* fork, and exec within child process */ if (fork() == 0) &#123; printf("In child process:\n"); execv(arg[0], arg); printf("I will never be called\n"); &#125; printf("Execution continues in parent process\n"); return 0;&#125; 12345678910#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main() &#123; pid_t t; t = fork(); printf("fork returned %d\n", t); return 0;&#125; 123456789101112131415161718#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main() &#123; pid_t t; printf("Original program, pid = %d\n", getpid()); t = fork(); if (t == 0) &#123; printf("In child process, pid = %d, ppid = %d\n", getpid(), getppid()); &#125; else &#123; printf("In parent, pid = %d, for returned = %d\n", getpid(), t); &#125; return 0;&#125; 1234567891011121314151617181920212223242526272829303132#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;char buf1[] = "abcdefghij";char buf2[] = "ABCDEFGHIJ";#define FILE_MODE 0644int main(void) &#123; int fd; if ((fd = creat("file.hole", FILE_MODE)) &lt; 0) &#123; printf("creat error\n"); return 1; &#125; if (write(fd, buf1, 10) != 10) &#123; printf("buf1 write error\n"); return 1; &#125; /*offset now = 10*/ if (lseek(fd, 40, SEEK_SET) == -1) &#123; printf("lseek error\n"); return 1; &#125; /*offset now = 40*/ if (write(fd, buf2, 10) != 10) &#123; printf("buf2 write error\n"); return 1; &#125; /*offset now = 50*/ return 0;&#125; 12345678910111213141516171819#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int main(void) &#123; char quit = '.'; char buf[10]; int fd; if ((fd = open("out.out", O_RDWR | O_CREAT)) == -1) printf("Error in opening\n"); while (buf[0] != quit) &#123; read(0, buf, 1); write(fd, buf, 1); write(1, buf, 1); &#125; close(fd); return 0;&#125; 1234567891011121314151617#include &lt;signal.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void signalRoutine(int);int main(void) &#123; printf("signal processing demo program\n"); while (1) &#123; signal(SIGINT, signalRoutine); &#125;&#125;void signalRoutine(int dummy) &#123; printf("Signal routine called[%d]\n", dummy); exit(0);&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>互联网应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenGL 开发环境的配置 Win/Mac]]></title>
    <url>%2FConfig-OpenGL-Dev.html</url>
    <content type="text"><![CDATA[最近3D图形程序设计的课需要用 C 写一些 OpenGL 代码，Windows 下的开发环境配置起来还稍稍有些麻烦，写个文章记录一下步骤。 Windows准备工作：点击这里下载 glut 压缩包，解压出来待用。 这里请注意，不同 Windows 版本配置略有差别，请选择你的系统对应的方法。 Win7首先去 下载 Dev-C++，确保你可以用它正常编译一个 C 语言程序出来。假设你的Dev-C++安装在了 C:\Dev-Cpp，那么： 从解压文件夹 GLUTMingw32\include\GL 中复制 glut.h 到 C:\Dev-Cpp\include\GL 中 从解压文件夹 GLUTMingw32\lib 中复制 libglut32.a 到 C:\Dev-Cpp\lib 中，如果提示已经存在文件，请选择 替换 从解压文件夹 GLUTMingw32 中复制 glut32.dll 到 C:\Windows\SysWOW64 中（32 位系统则是复制到 C:\Windows\System32） 最后，打开 Dev-C++，新建一个项目/工程 (Project)，类型选择“空工程”，语言类型选择为 C，名称随意，之后下一步，保存到电脑上。之后，新建一个源文件 (Source File)，询问是否添加到当前的项目中，点击是，然后在这里写 OpenGL 的代码，写好之后选择保存，注意以 .c 结尾。接下来是关键，菜单栏，“项目/项目属性”，在打开的窗口中切换到“参数 (Parameters)”选项卡，在最右边的框“连接 (Linker)”下方有个大按钮“加入库或对象 (Add Library or Object)”，点击，转到 C:\Dev-Cpp\lib，必须依次 添加三个文件：libopengl32.a libglu32.a libglut32.a，确定保存，然后编译运行就可以看到 OpenGL 的图形了。 Win8/8.1至于 Win8 嘛……我还没有测试过，你可以自己决定试试 Win7 的方法，反正 Win10 的方法是通用的，Win7 的不行了再参考 Win10 的方法~ Win10/Win 通用现在同学都普遍在用 Win10，而在 Win10 下 Dev-C++ 内置的编译器在编译 OpenGL 的时候又有兼容性问题，这就很气了，需要单独安装另外一个编译器：MinGW (Minimalist GNU for Windows)，就是 GNU 在 Windows 平台上的版本啦~先去 这里下载 MinGW Installer，双击打开安装，一路下一步，保持默认安装目录不要动。然后你将会看到一个列表页面，按照图中所选，点击方框，选择 “Mark for install” 打上勾：之后左上角菜单 Installation - Apply Changes 开始在线安装，等待完成就可以关闭了。 从解压文件夹 GLUTMingw32\include\GL 中复制 glut.h 到 C:\MinGW\include\GL 中 从解压文件夹 GLUTMingw32\lib 中复制 libglut32.a 到 C:\MinGW\lib 中，如果提示已经存在文件，请选择 替换 从解压文件夹 GLUTMingw32 中复制 glut32.dll 到 C:\Windows\SysWOW64 中（32位系统则是复制到 C:\Windows\System32） 接下来是 下载安装 Dev-C++，安装完成后添加这个编译器：工具 - 编译选项，在弹出来的窗口中选择 正中间的加号，然后定位目录到 C:\MinGW，点击确定返回。 在 Dev-C++ 中，新建一个项目/工程 (Project)，类型选择“空工程”，语言类型选择为 C，名称随意，之后下一步，保存到电脑上。之后，新建一个源文件 (Source File)，询问是否添加到当前的项目中，点击是，然后在这里写 OpenGL 的代码，写好之后选择保存，注意以 .c 结尾。接下来是关键，菜单栏，“项目/项目属性”，在打开的窗口中切换到“参数 (Parameters)”选项卡，在最右边的框“连接 (Linker)”下方有个大按钮“加入库或对象 (Add Library or Object)”，点击，转到 C:\MinGW\lib，必须依次 添加三个文件：libopengl32.a libglu32.a libglut32.a，确定保存，然后编译运行就可以看到 OpenGL 的图形了。 MacMac 环境下的开发环境的配置极其简单。 在 App Store 里搜索安装 Xcode。（就是下载的时间会长点，Xcode 约有 4.55G 大） 新建工程，只需要注意头文件的配置就好，和 Windows 的 #include &lt;GL/glut.h&gt; 不同，换成 #include &lt;GLUT/glut.h&gt; 就可以了。 其他的就是写代码，写完后直接 Command+R 就可以了。 就是这么简单，简单的令人发指…… PS: 如果出现了警告 Deprecated 的问题，可以忽略；如果无法编译通过，在新建项目的时候设置一下项目的 OS X Deployment Target 为 10.8 就可以解决问题。 本文参考 Central Connecticut State University 的文章 CCSUHow to Install Dev-C++ and GLUT]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[半流浪汉]]></title>
    <url>%2FHalf-Tramp.html</url>
    <content type="text"><![CDATA[生活的地方也许往往存在着我们认知以外的人和事，有时候会突然发现我们再熟悉不过的城市就好像一片黑森林。 匆忙之中要吃完饭赶回学校上课，去了麦当劳准备随便垫吧点东西。旁边是大学，对面是中学，饭点的时候这个地方向来人很多。拿到吃的之后找座位，靠窗的地方都没有了，只好找到一个坐在四人桌的单身妹子坐她对面拼桌吃。右边也是一个四人桌，只坐了一个老爷爷，带着老花镜，桌子上放了好几本书和笔记本，他在看书整理笔记，桌子铺满了，没有办法再坐下人。 刚刚我就看到了，倒餐盘的垃圾桶旁边的桌子坐着一个蓬头垢面的男子，穿着破旧的军大衣，佝偻着蜷缩在靠墙座位的角落里，桌子上堆着可能是上一桌人吃完剩下的盘子和垃圾。没有年迈，中年而已。从兜里掏出手机，接电话大声说着什么。 我见过这种人。 有一年脑抽和朋友们在麦当劳刷夜，除了没有暖气的寒冷和外面有点吓人的黑暗，印象最深刻的就是一个和他类似的男子。三十来岁的样子，脏脏乱乱的头发和衣服，有的时候在靠墙长椅上躺下抱臂睡一会，过一会又起来在餐厅里到处转转，寻找着有没有哪张桌子上有已经走了的客人没吃干净的薯条或者没喝完的可乐。只是当时夜深了，餐厅里已经没有几个人，有这样一个人在身边转悠，还是会心里有点发毛的。 可能是饿极了，当年的那个人在寻找别的桌子剩菜无果之后径直向我们走来，问道，这个你们还要吗。我们说不用了，他便拿走盘子，走到他呆的地方，吃点喝点，躺下睡了。 现在眼前斜对面的这个人接完电话，四处张望着。有好习惯的人吃完饭拿着盘子要自己送到垃圾桶清理，他就赶过去。我来吧，他说道。但没有送到垃圾桶，坐回了他的位子，打开热饮的盖子探着头看看还有没有，再拿起薯条的盒子往外倒倒。没什么收获，他低下了头，但眼睛在看手机之余还在四处张望着。负责清扫的服务员大妈撑着垃圾桶柜默默看着他，不一会转身走了。 之前坐在我对面的妹子已经吃完走了，我还在尽最大的努力快速进食中。突然右边有人靠近拍了拍我的肩膀，我吓了一小跳，转头看到老爷爷。他用一只手半掩着嘴，瞟着左前方的男子，悄悄对我说，“小姑娘，你看见那个人了吗？”“看到了。”“那种人叫半流浪汉，表面看起来是在帮你收拾桌子，其实是在找剩下的吃的来吃。”“我以前见过。”不过倒是第一次听说他们有这个名称。他有点吃惊，“哦你见过的？”“嗯。”我点点头，因为着急走，我还在继续努力吃。“哎，”他又瞟了那个男子一眼，“虽然看起来好像大家生活质量比原来好很多了，但是现在中国的贫富差距还是很大的。” 我不知道该回复些什么，抬起头看了看那个男子，他趴在桌子上睡着了。 我吃好了，还有大半杯水没有喝，把吸管拔出来放在一边，收拾好东西穿好外套准备走。左边的桌子上的两个姑娘讨论着考研的事情，但也没忘了时不时偷偷看一下对面的男子在干什么。右边的老爷爷还在做着笔记，偶尔抬眼瞄一瞄左前方的那个垃圾桶柜旁边的桌子。 我站起身，感觉应该跟老人家打声招呼，转身对老爷爷说我走了啊。老爷爷没抬头，也没说话，闭起眼点了点头，抬起右手来轻轻摇晃了两下，然后放下手继续写东西了。 我不知道我该做什么，我没再看那个男子，但我也没有倒我的盘子。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>谁叫特斯拉</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将 Hexo 源文件备份到 Github]]></title>
    <url>%2F%E5%B0%86%20Hexo%20%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%88%B0%20Github.html</url>
    <content type="text"><![CDATA[首次备份在 Hexo 根目录下，初始化 git 仓库1$ git init 创建并切换到分支 “hexo”1$ git checkout -b hexo 添加 README.md 文件，可忽略1$ git add README.md 添加文件列表1$ git add -A 添加提交说明1$ git commit -m "First commit" 设置远程仓库映射1$ git remote add origin git@github.com:real-neo/real-neo.github.io.git 提交1$ git push -u origin hexo 之后备份123$ git add -A$ git commit -m "Update message"$ git push origin hexo # 或 git push]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客遇上 Hexo]]></title>
    <url>%2F%E5%8D%9A%E5%AE%A2%E9%81%87%E4%B8%8A%20Hexo.html</url>
    <content type="text"><![CDATA[我为什么又换博客框架了？我的小站 2015 年初上线，还有三个月就满两年了，从一开始的 WordPress 到 Typecho 再到 WordPress，我每一次更换都是代表着我对博客看法的变化。 最早用 WordPress 是因为它相对其他博客来说简单省心，而且插件多，可以满足我各种需要。 后来一个月不到就换了 Typecho，是因为，我发现 WordPress 的访问缓慢，对服务器配置要求较高，我为了省些钱，就换了对配置要求低的 Typecho。 直到 2016 年夏，终于觉得博客一成不变很久了，Github 送的 Digital Ocean 主机的优惠券还剩很多余额，干脆就搞点厉害的吧，就这样换了 WordPress。 可能是到了现在优惠券的余额终于用完了吧，没有钱再买主机了，看到了免费的 Hexo + Github Pages，静态博客速度又快，除了部署麻烦点，其他都是优点啊，那就换吧！ 说整就整昨天下午在 Google 上找了许多 Hexo 部署在 Github 上的资料，Chrome 里的标签页开了无数个，一个又一个的参考，自己动手！其实整个过程都很顺利，在本地的测试环境中看了预览效果，非常的好，速度非常快，内心无比的激动，等到我准备部署到 Github 上的时候，问题来了。 一个有点让人崩溃的小问题当我打了 hexo d 之后，走一堆代码，然后挂在了这里： No supported authentication methods available (server sent: publickey)无论用网上找到的哪个方法都解决不了，简直想让人放弃，看了一晚上也没能解决。今天继续看，我甚至怀疑是安装过程中哪里出错了。尝试删干净重装也无能为力。最后忘了在哪个页面看到一句“重装 Git 选择使用 OpenSSH“，又令我看到了希望。随即重装了一遍 Git，在选择 SSH那步，因为我电脑安装了有 PuTTY，所以上次安装选择了 PuTTY 的 plink，这次不用它了，选择 OpenSSH，果然问题解决了。其实这里还有个小点，hexo d 在 Git Bash 中是没有问题的，在 CMD 中就会出错，所以能用 Git Bash 就不用 CMD。 Hexo+Github 不能与 SSL 共存？其实 Github Pages 使用自定义域名不能使用 SSL 很让我头疼，因为我以前的网站是开了 HSTS 的，也就是说，如果你原来访问过我的网站，一个月内再次访问我的网站都会强制使用 SSL。起初我设置这个是为了安全着想的，可是现在不能用 SSL就意味着，一个月曾经打开我网站的人都无法访问我的新站点。气。还好，天无绝人之路，Cloudflare 提供了一种解决办法，使用 Cloudflare 的 CDN 服务，用户到 Cloudflare 的连接是可以使用 SSL 的，Cloudflare 到站点之间不使用加密，这样就解决了用户访问时可能会出现的被 HSTS 策略禁止访问的问题。同时也相对提高了一些安全性，也比原来的博客拥有了更快的连接速度，Cloudflare 分布全球的 CDN 保证了各地都可以稳定访问（说的好像有多少人看我的博客一样）。 后记折腾好博客后，我只用操心域名的付费就行了。只要 Github 和 Cloudflare 一天不倒闭，我的网站就会一直存在。在做好了所有的工作后，其实非常有成就感，就像我现在看我写的满屏幕博文一样，写了这么多也很有成就感，一本满足。其实，钱不是什么大事，毕竟一个月 35 块主机很便宜了，最重要的还是享受那种折腾带来的满足感，用着 Github 服务器的满足感，一个小小的极客就是这么容易满足，嘿嘿。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FHello-World.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网使用 IPv6 免流量上网]]></title>
    <url>%2FFree-By-IPv6.html</url>
    <content type="text"><![CDATA[本文最后更新于 2018年3月16日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ 自从挖煤的校长来了之后，校园网就不再是免费使用了，变成了现在这个样子：每个月 20G 免费流量，超出需要付费。对于大部分人来说，寝室的 WiFi 好像突然就变得鸡肋了，连上了 WiFi 也不敢放肆了，真是让人憋屈。 在我搬回本部之前就已经在研究这个如何免流量上网的事情了，在宏福那里研究不是很顺利，毕竟宏福的 IPv6 不是很好折腾，好在电信还算有点良心，分配了 240E 开头的原生 IPv6 地址，各种关于 IPv6 的实验得以进行。7 月刚从宏福搬回本部，室友不到两天就用了 12G 的流量，一个月 20G 的免费流量完全不够用。免流，势在必行。我稍微研究总结了一下，目前主要有两种免流方式，下面我一个一个慢慢说。 免流原理中国的校园网网络一般都是双栈网络，IPv4+IPv6，而一般的学校是对 IPv4 流量收费的，对 IPv6 流量免费，我们只要把所有系统软件产生的需要收费的 IPv4 流量转换为 IPv6 流量走出校园就可以做到免费上网了。对 IPv6 流量免费并不是不能对 IPv6 流量计费，而是现在校园网作为推广试验 IPv6 的环境，国家政策鼓励的结果。现在的移动 4G 已经启用了 IPv6，不可能放你免费用的。 但是，中国的大部分网站（其实世界上多数网站也这样）没有配置 IPv6 地址，只能通过 IPv4 流量访问，所以我们的 IPv6 流量从校园网出去之后还要转换回 IPv4 流量才能正常使用网络服务。一般来说我们需要一台这样服务器：同时有 IPv4+IPv6 环境，与我们的电脑使用 IPv6 通信，与各大网站使用 IPv4 通信，服务器在中间中转转换。 接下来我们关注的重点就是这个可以转换我们流量的服务器了。 环境前提你必须得有访问 IPv6 网络的权限，如果你可以正常打开 北邮人 BT 并能正常 BT 下载做种等操作，说明你的网络是有 IPv6 环境的，具备免流量的条件。 一、DNS64维基百科是这样解释 DNS64 的：DNS64 describes a DNS server that when asked for a domain’s AAAA records, but only finds A records, synthesizes the AAAA records from the A records. The first part of the synthesized IPv6 address points to an IPv6/IPv4 translator and the second part embeds the IPv4 address from the A record. The translator in question is usually a NAT64 server. The standard-track specification of DNS64 is in RFC 6147.There are two noticeable issues with this transition mechanism: It only works for cases where DNS is used to find the remote host address, if IPv4 literals are used the DNS64 server will never be involved. Because the DNS64 server needs to return records not specified by the domain owner, DNSSEC validation against the root will fail in cases where the DNS server doing the translation is not the domain owner’s server. WikipediaDNS64通过配置 IPv6 DNS，对内容服务商的域名进行 IPv4 → IPv6 解析结果转换，实现 IPv6 与 IPv4 资源互通。简单的说就是，我们使用了一个“不正常”的 DNS 服务器，在我们访问某个网址域名时，返回一个“错误”的地址，这个地址是 IPv6 地址，我访问这个错误的地址却也能得到正确的结果，这就是这个服务器在中间转换的结果了。比如正常情况下我访问凤凰网，连接的是 211.68.71.214 这个地址，在使用 DNS64 之后，我连接的地址就变为了 240c:f:1:6644:2:0:3ccf:f662，但是同样能打开凤凰网。 下面以 Windows 10 为例说明设置方法，各 Linux 发行版、macOS 设置方法请自行搜索“系统名称 + 修改 DNS”，方法大同小异。 首先“打开网络和 Internet 设置” 然后选择“更改适配器选项” 如果你使用网线接入校园网，则选择“本地连接/以太网”，如果你使用 WiFi 接入校园网，则选择“无线网络连接”。在相应的连接上面右键，选择“属性”。 选中“Internet 协议版本 6 (TCP/IPv6)”，然后点击“属性” 选择“使用下面的 DNS 服务器地址”，并如图填入 240C::6644 之后逐次点击确定保存更改。 此时退出校园网登陆，试一试现在能否打开百度新浪等页面？ 手机连接 WiFi 也可以更改 DNS 服务器，具体每部手机修改方法请搜索解决。 这种方法最简单，但同时也有缺点：不能播放视频，网页加载速度慢，不能使用 QQ。 二、使用代理服务器这一种方法就没有了上一个方法的缺点了，可以正常播放视频，实测优酷土豆爱奇艺流畅播放，同时还可以观看 YouTube 视频。原理很简单：使用支持 IPv6 的主机作为代理服务器。架设代理的方法有很多，Shadowsocks、OpenVPN 等支持 IPv6 的软件是不错的选择，我们这里介绍使用 Shadowsocks。 维基百科上面对于 Shadowsocks 的解释：Shadowsocks 可以指：一种基于 Socks5 代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当前包使用 Python、C、C++、C#、Go 语言等编程语言开发，大部分主要实现（iOS 平台的除外）采用 Apache 许可证、GPL、MIT 许可证等多种自由软件许可协议开放源代码。Shadowsocks 分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。 在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、遮蔽或干扰的内容。2015 年 8 月 22 日，Shadowsocks 原作者 Clowwindy 称受到了中国政府的压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码。 WikipediaShadowsocks 虽然 Shadowsocks 的目的是为了翻墙，但是 Shadowsocks 功能强大方便易用，也可以拿来作为我们的免流上网中转工具。 第一步，你需要有一个支持 IPv6 的 Shadowsocks 服务器节点，这一步很重要，没有可用的服务器怎么也玩不转。个人推荐 Bandwagon、Digital Ocean、Vultr 这些服务商，一般都比较便宜，如果你想使用 Vultr 的话，可以使用我的 邀请链接，这样的话你我都可以获得 $10 的优惠。注册之后，开一个最低配置的 VPS 就可以满足我们的需求了，一般选择美国的节点，系统推荐选择 Ubuntu 16.04，安装方法可以参考我的另一篇文章：Linux 安装配置 Shadowsocks-Libev 第二步，下载 Shadowsocks 客户端程序，打开软件，将 Shadowsocks 服务器信息对应填入其中。 第三步，服务器信息填写完毕后，下载安装 SSTap。 安装过程中会提示“您想安装这个设备软件吗？，”勾选始终信任来自…的软件，并点击安装。 打开 SSTap，点击添加新代理，选择“添加一个 SOCKS5 代理”，这里不能选择添加 SS 代理，因为 SSTap 不支持使用 IPv6 连接。然后按照下图设置。 添加完成回到主界面，点击“创建或者修改代理模式” 在弹出的“代理模式管理”窗口中，点击“添加”，按照下图填写。 规则列表如下12345678910111213140.0.0.0/810.0.0.0/8100.64.0.0/10127.0.0.0/8169.254.0.0/16172.16.0.0/12192.0.0.0/29192.0.2.0/24192.88.99.0/24192.168.0.0/16198.18.0.0/15198.51.100.0/24203.0.113.0/24224.0.0.0/3 至此，全部设置已经完成，点击保存，返回主界面，点击连接，稍等片刻即可完成。 现在打开浏览器，任意打开网站看一看，是不是可以免登陆校园网就可以打开了？ 手机上的设置相对简单，前提也是必须可以正常访问 IPv6 网络。Android 手机下载安装“影梭”，iPhone 下载安装“Shadowrocket”。 添加新配置，选择“手动配置”，将服务器的地址，远程端口，密码，加密方法填写正确，路由选项选择“绕过局域网地址”，其他选项无需修改。 填写完毕，点击保存，回到主界面，点一下纸飞机便可以免流上网了。 iOS 系统的设置方法类似，这里不再演示。 由于是使用代理服务器进行网络浏览，所以正常情况下会比直接访问速度稍慢，但还是可以接受的。 各种各样的免流方法并没有一个是完美无缺的，在免流情况下，玩游戏的延迟很可怕，几乎是不可能的事情，所以玩游戏还是用流量吧。20G 的专属游戏流量，对我来说，足矣。 末尾贴上各平台客户端下载地址： Windows: shadowsocks-windows SSTap macOS: ShadowsocksX-NG Android: shadowsocks-android iOS: Shadowrocket]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>免流</tag>
        <tag>校园网</tag>
        <tag>DNS64</tag>
        <tag>IPv6</tag>
        <tag>SSTap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[假日随笔]]></title>
    <url>%2F%E5%81%87%E6%97%A5%E9%9A%8F%E7%AC%94.html</url>
    <content type="text"><![CDATA[很久以来，我一直都想写点什么东西，但毕竟高考已经过去两年了，文章的水平恐怕下降的不止一点点，又担心写出来一堆不知所云的垃圾，现在这个大概是第好几个草稿了。每年的假期回家，感觉都像是矫情的开始。去年暑假回家，就写了些话语，但始终也没有完成，删删改改最后又给删除掉了。为什么总是想写点什么东西呢？大概是因为学渣+单身狗内心的愧疚吧：一年过去，庸庸碌碌，平淡无奇，既没有什么光彩耀人的成绩，也没有什么刻骨铭心的爱情，除了交学费时有点心痛。似乎这两年的大学生活就是一片空白。 但每次想到我的小站我又有点小得意，心中落寞的感觉淡了许多。我的小站最初是在 2015 年初上线的，最开始的时候，因为没有多余的银子买更好的主机，就只能用 Typecho 这种轻量的博客程序，搭建在 Bandwagon 上面。最初设立一个网站的原因是因为把用于搭梯子的服务器利用起来。15 年一月份开始接触自建梯子，正是 Anonymous V 的 这篇文章 教会了我最初的 Linux 服务器的知识。在那之前，我只玩过免费的虚拟空间，用了 hackerzhou 的 网页代码 ，有了最初的页面，还自己修改添加了一些音乐。有了梯子，对外面的了解更多了一些，同时也慢慢了接触到了这么一群人，他们很年轻，大多在初中到大学这个年龄段，他们都有自己的个人网站、博客，最令我印象深刻的是翁天信，他自己写的 个人网站 简直是亮瞎我，还有西秦公子、Zohar、Volio 的博客。翻看他们的网站真的是让人心痒痒，自己也想拥有一个网站，自己也想成为一名 Geek。于是只搭建了梯子的服务器便成为了一个好选择，因为梯子的系统资源占用很小，还有很多系统资源闲置着。 确定了自己要搞一个博客网站出来后，整个人简直就像打了鸡血一样，没日没夜的研究，玩到凌晨一两点是常有的事情，由于经常会把服务器搞崩溃，所以重装系统简直就是家常便饭，甚至一天好几次。从一开始 CentOS、Debian、Vi、Vim 都不知道是啥，到现在与大神谈笑风生，不知道比当初高到哪里去了。当初也试过不同的博客程序，比如 Typecho、WordPress、Ghost，也用过不同的服务器，最多的时候同时拥有 4 台服务器。经过一段时间的研究，终于在 15 年二月用 Typecho 搭建了一个博客网站并写下了第一篇博文：优雅的科学上网，之后又写了写乱七八糟的教程。当时的域名还是在 Freenom 免费注册的 tk 域名：ghostsnote.tk，这个域名已经弃用，然后换用了更好的 com 域名，方便记忆。写了几篇博文后发现没有什么好写的了，恰逢当时在学习 C 语言，于是作了一个影响至今的决定，在网站上贴出每次练习的代码。以至于现在我学了些什么东西都贴在博客里，不求能给各位带来什么干货，如果看完之后能带来一点点帮助我就很满足了。现在我的博客里如果去掉了 C、Java 的代码，文章的数量就会直接少一大半，-_-# 理科生实在是不怎么会写文章。 到今天现在这个时间（2016-07-31 18:17:58），我在这个世界上度过了差不多 7304 天，明天这个时候就是整整 7305 天了，也就是 20 岁了。人生的前 20 年都是在爸爸妈妈的陪伴下成长的，人生的后几十年呢？感谢有你们的陪伴，感谢有你~趁着还没有到 20 岁，今天再矫情一把，以后不知道还会不会能有如此的惬意的时光让我放松地随便写写东西呢？这随笔仅当是一次随意写写的东西，也可能写的前言不搭后语，这网站是我倾注心血最多的成果，所以简单回忆了一下我玩博客的历程，最后也小小的矫情了一下。19 岁，再见~ Hello, twenty! 爱你们，爱你😘！]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>矫情</tag>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab9]]></title>
    <url>%2FLab9.html</url>
    <content type="text"><![CDATA[Lab9 里面有两个题都是和 Lab8 相关的，看 Lab9 的话要先把 Lab8 看了。 第一个题是装了个逼，把 Lab8 的代码加个抛出异常~ParityBitAdder 升级到了 v2~1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889/** * Title ParityBitAdder_v2.java * Description This class defines a parity bit adder. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class ParityBitAdder_v2 &#123; private char[] number; private static int oddEven; private String result; public static void main(String[] args) &#123; try &#123; ParityBitAdder_v2 myAdder = new ParityBitAdder_v2(args); System.out.println("Adding " + (oddEven &gt; 0 ? "odd" : "even") + " parity to '" + args[0] + "' results in the binary pattern '" + myAdder.getResult() + "'."); &#125; catch (NonBinaryValue e) &#123; System.out.println("Error: The first input to this program must be a 7-bit binary number. Please try again!"); System.exit(0); &#125; catch (IllegalParityValue e) &#123; System.out.println("Error: The program's parity bit input (the second argument) must be either 0 or 1. Please try again!"); System.exit(0); &#125; &#125; /** * This constructor just tell the right usage and exit. */ public ParityBitAdder_v2() &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; /** * This constructor check if user have input right parameters. */ public ParityBitAdder_v2(String[] args) throws NonBinaryValue, IllegalParityValue &#123; if (args.length != 2) &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; if (args[0].length() != 7) &#123; throw new NonBinaryValue(); &#125; if (args[1].length() != 1) &#123; throw new IllegalParityValue(); &#125; number = args[0].toCharArray(); for (int i = 0; i &lt; number.length; i++) &#123; if (!Character.isDigit(number[i]) || Integer.parseInt("" + number[i]) &gt; 1 || Integer.parseInt("" + number[i]) &lt; 0) &#123; throw new NonBinaryValue(); &#125; &#125; if (!Character.isDigit(args[1].charAt(0)) || Integer.parseInt(args[1]) &gt; 1 || Integer.parseInt(args[1]) &lt; 0) &#123; throw new IllegalParityValue(); &#125; oddEven = Integer.parseInt(args[1]); &#125; /** * This method call calculateParity method and return result. * @return result The calculation result. */ public String getResult() &#123; calculateParity(); return result; &#125; /** * This method calculate the parity and add into a string. */ private void calculateParity() &#123; int one = 0; for (int i = 0; i &lt; number.length; i++) &#123; if (Integer.parseInt("" + number[i]) == 1) &#123; one++; &#125; &#125; if ((one % 2) == oddEven) &#123; result = "0" + (new String(number)); &#125; else &#123; result = "1" + (new String(number)); &#125; &#125;&#125; 需要抛出的俩异常要自己写出来：123456789101112131415/** * Title NonBinaryValue.java * Description This class defines a custom exception. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class NonBinaryValue extends RuntimeException &#123; public NonBinaryValue() &#123;&#125; public NonBinaryValue(String message) &#123; super(message); &#125;&#125; 123456789101112131415/** * Title IllegalParityValue.java * Description This class defines a custom exception. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class IllegalParityValue extends RuntimeException &#123; public IllegalParityValue() &#123;&#125; public IllegalParityValue(String message) &#123; super(message); &#125;&#125; 第二题小改一下，不再是带着参数运行程序了，而是运行中要求用户在控制台输入，就是加个 System.in，最多也就是再来个友好的提示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990/** * Title ParityBitAdder_v3.java * Description This class defines a parity bit adder. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */import java.util.Scanner;public class ParityBitAdder_v3 &#123; private char[] number; private static int oddEven; private String result; public static void main(String[] waste) &#123; System.out.println("#########################################"); System.out.println("# Hello #"); System.out.println("# Welcome use ParityBitAdder! #"); System.out.println("#########################################"); System.out.println("Please input 7-bit binary number:"); Scanner binaryScanner = new Scanner(System.in); String binaryString = binaryScanner.nextLine(); System.out.println("Please input the type of parity:(0 = even, 1 = odd)"); Scanner typeScanner = new Scanner(System.in); String typeString = typeScanner.nextLine(); String[] args = &#123;binaryString, typeString&#125;; try &#123; ParityBitAdder_v3 myAdder = new ParityBitAdder_v3(args); System.out.println("Adding " + (oddEven &gt; 0 ? "odd" : "even") + " parity to '" + args[0] + "' results in the binary pattern '" + myAdder.getResult() + "'."); &#125; catch (NonBinaryValue e) &#123; System.out.println("Error: The first input to this program must be a 7-bit binary number. Please try again!"); System.exit(0); &#125; catch (IllegalParityValue e) &#123; System.out.println("Error: The program's parity bit input (the second argument) must be either 0 or 1. Please try again!"); System.exit(0); &#125; &#125; /** * This constructor check if user have input right parameters. */ public ParityBitAdder_v3(String[] args) throws NonBinaryValue, IllegalParityValue &#123; if (args[0].length() != 7) &#123; throw new NonBinaryValue(); &#125; if (args[1].length() != 1) &#123; throw new IllegalParityValue(); &#125; number = args[0].toCharArray(); for (int i = 0; i &lt; number.length; i++) &#123; if (!Character.isDigit(number[i]) || Integer.parseInt("" + number[i]) &gt; 1 || Integer.parseInt("" + number[i]) &lt; 0) &#123; throw new NonBinaryValue(); &#125; &#125; if (!Character.isDigit(args[1].charAt(0)) || Integer.parseInt(args[1]) &gt; 1 || Integer.parseInt(args[1]) &lt; 0) &#123; throw new IllegalParityValue(); &#125; oddEven = Integer.parseInt(args[1]); &#125; /** * This method call calculateParity method and return result. * @return result The calculation result. */ public String getResult() &#123; calculateParity(); return result; &#125; /** * This method calculate the parity and add into a string. */ private void calculateParity() &#123; int one = 0; for (int i = 0; i &lt; number.length; i++) &#123; if (Integer.parseInt("" + number[i]) == 1) &#123; one++; &#125; &#125; if ((one % 2) == oddEven) &#123; result = "0" + (new String(number)); &#125; else &#123; result = "1" + (new String(number)); &#125; &#125;&#125; 和上一题一样，也用到那俩异常了，直接复制粘贴过来用就行了。 第三题瞎 BB 一堆，又是扯遗传算法又是扯染色体什么玩意儿的，都不用看，直接看小标号的要求就可以了。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * Title Chromosome.java * Description This class defines a chromosome. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class Chromosome &#123; int[] chromosomeArray; /** * Main method creates two Chromosome objects. */ public static void main(String[] args) &#123; int[] first = &#123;1, 0, 1, 1, 1, 0, 1&#125;; int[] second = &#123;3, 5, 2, 2&#125;; try &#123; Chromosome firstChromosome = new Chromosome(first); System.out.println(firstChromosome.toString()); Chromosome secondChromosome = new Chromosome(second); System.out.println(secondChromosome.toString()); &#125; catch (NonBinaryValue e) &#123; System.out.println("Error: The input must be a binary number."); System.out.println("Wrong chromosome will be reset to default chromosome."); e.printStackTrace(); System.exit(0); &#125; &#125; /** * This constructor check if input is right. */ public Chromosome(int[] args) throws NonBinaryValue &#123; chromosomeArray = args; for (int i = 0; i &lt; args.length; i++) &#123; if (args[i] &gt; 1 || args[i] &lt; 0) &#123; for (int j = 0; j &lt; chromosomeArray.length; j++) &#123; chromosomeArray[j] = 1; &#125; throw new NonBinaryValue(); &#125; &#125; &#125; /** * This method will calculate the number of "1" and return. * @return one The number of "1". */ public int getFitness() &#123; int one = 0; for (int i = 0; i &lt; chromosomeArray.length; i++) &#123; if (chromosomeArray[i] == 1) &#123; one++; &#125; &#125; return one; &#125; /** * This method transfer chromosome to a string and return. * @return myStringBuffer.toString() The string which contains all numbers of chromosome. */ public String toString() &#123; StringBuffer myStringBuffer = new StringBuffer("["); for (int i = 0; i &lt; chromosomeArray.length - 1; i++) &#123; myStringBuffer.append(chromosomeArray[i]); myStringBuffer.append(" "); &#125; myStringBuffer.append(chromosomeArray[chromosomeArray.length - 1]); myStringBuffer.append("]"); return myStringBuffer.toString(); &#125;&#125; 最后扯一句，有时间最好自己看看题，只看我的代码恐怕会在一定程度上影响你们的想法，不是太好~ 祝各位，Java 都高分考过！]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab8]]></title>
    <url>%2FLab8.html</url>
    <content type="text"><![CDATA[马上就要考 MCQ2 了，我也不瞎 BB 了，各位有需要的赶紧看啊~ 首先看懂题啥意思哈，看不懂题的话你也看不懂我在写啥……这题意思大概是说输入 7 位二进制数，even parity 的时候 0 和 1 的个数都是偶数个，odd parity 的时候 0 和 1 的个数都是奇数个。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677/** * Title ParityBitAdder.java * Description This class defines a parity bit adder. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class ParityBitAdder &#123; private char[] number; private static int oddEven; private String result; public static void main(String[] args) &#123; ParityBitAdder myAdder = new ParityBitAdder(args); System.out.println("Adding " + (oddEven &gt; 0 ? "odd" : "even") + " parity to '" + args[0] + "' results in the binary pattern '" + myAdder.getResult() + "'."); &#125; /** * This constructor just tell the right usage and exit. */ public ParityBitAdder() &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; /** * This constructor check if user have input right parameters. */ public ParityBitAdder(String[] args) &#123; if (args.length != 2 || args[0].length() != 7 || args[1].length() != 1) &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; number = args[0].toCharArray(); for (int i = 0; i &lt; number.length; i++) &#123; if (!Character.isDigit(number[i]) || Integer.parseInt("" + number[i]) &gt; 1 || Integer.parseInt("" + number[i]) &lt; 0) &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; &#125; if (!Character.isDigit(args[1].charAt(0)) || Integer.parseInt(args[1]) &gt; 1 || Integer.parseInt(args[1]) &lt; 0) &#123; System.out.println("Usage:\njava ParityBitAdder 1010011 0\nOr:\njava ParityBitAdder 1010011 1"); System.exit(0); &#125; oddEven = Integer.parseInt(args[1]); &#125; /** * This method call calculateParity method and return result. * @return result The calculation result. */ public String getResult() &#123; calculateParity(); return result; &#125; /** * This method calculate the parity and add into a string. */ private void calculateParity() &#123; int one = 0; for (int i = 0; i &lt; number.length; i++) &#123; if (Integer.parseInt("" + number[i]) == 1) &#123; one++; &#125; &#125; if ((one % 2) == oddEven) &#123; result = "0" + (new String(number)); &#125; else &#123; result = "1" + (new String(number)); &#125; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/** * Title StringConverter.java * Description This class defines a string converter. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 13th, 2016 * @version 1.0 */public class StringConverter &#123; private String input; private String result; public static void main(String[] args) &#123; StringConverter myConverter = new StringConverter(args); System.out.println("Output: " + myConverter.getResult()); &#125; /** * This constructor just tell the right usage and exit. */ public StringConverter() &#123; System.out.println("Usage:\njava StringConverter \"My car Goes verY FAST!\""); System.exit(0); &#125; /** * This constructor check if user have input right parameters. */ public StringConverter(String[] args) &#123; if (args.length != 1) &#123; System.out.println("Usage:\njava StringConverter \"My car Goes verY FAST!\""); System.exit(0); &#125; input = args[0]; &#125; /** * This method call convertString method and return result. * @return result The convertation result. */ public String getResult() &#123; convertString(); return result; &#125; /** * This method convert the input by some rules. */ private void convertString() &#123; String middle = input.toUpperCase(); middle = middle.replace("A", "a"); middle = middle.replace("E", "e"); middle = middle.replace("I", "i"); middle = middle.replace("O", "o"); middle = middle.replace("U", "u"); middle = middle.replace("Y", "y"); char[] middleChar = middle.toCharArray(); for (int i = 0; i &lt; middleChar.length; i++) &#123; if (!Character.isLetter(middleChar[i])) &#123; middleChar[i] = "*".charAt(0); &#125; &#125; result = new String(middleChar); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab7]]></title>
    <url>%2FLab7.html</url>
    <content type="text"><![CDATA[这次的 Lab7 是在大作业发布之后的实验，所以这次的更新来的有点慢，有同学都开始催我发 Lab7 了。不是我不想发，而是大作业当头我只好先顾着大作业了，反正往后的几次试验都不验收了，所以先放下了实验，专心写大作业。 Java 的大作业，可以说，非常成功的检验了当代大学生“自学成才”的能力 -_-#，可以这么说：我的大作业有几乎一半的知识点都是在网上自己查资料写出来的。老师教的，课件写的，要么是没有相关知识点，要么就是不够好用。 这次大作业和 C 语言大作业一样，都是会在提交日期之后再放出来，没有办法，这东西是要计算成绩的，我也不敢拿我的成绩开玩笑。 其实先写写 Lab7 可能会对大作业比较有帮助，但毕竟已经是现在这个时间了（2016-06-05），说这些意义也不大了~ 第一题和第二题的要求我一起看了，第二题的要求就是比第一题多了一个可以自己定义按钮数量的功能，所以我在写第一题的时候就按照第二题的思路来写了，写好第一题之后第二题几乎就是小小改动一下就可以用了。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/** * Title CatchButtonGameV1.java * Description This class contains a game which never will success. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 5th, 2016 * @version 1.0 */import java.awt.*;import java.awt.event.*;import javax.swing.*;public class CatchButtonGameV1 extends JFrame &#123; private static int number; private int size = (int) ((float) (Toolkit.getDefaultToolkit().getScreenSize().width) / 3); // Set the size of GUI. private JButton[] gameButton = new JButton[number * number]; public static void main(String[] args) &#123; number = 3; CatchButtonGameV1 game = new CatchButtonGameV1(); game.start(); &#125; // Constructor. public CatchButtonGameV1() &#123; super("Catch me if you can!"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Exit when click the exit button. getContentPane().setBackground(new Color(90, 154, 212)); // Set the background color of window. setSize(size, size); // Set the size of window. setResizable(false); // Forbid to resize the window. setLocationRelativeTo(null); // Set the window in the centre of screen. initialize(); &#125; /** * This method will create a GridLayout panel and add buttons to it. */ private void initialize() &#123; int hap = (int) ((float) (size) / 100); JPanel gamePanel = new JPanel(new GridLayout(number, number, hap, hap)); gamePanel.setOpaque(false); for (int i = 0; i &lt; number * number; i++) &#123; gameButton[i] = new JButton(); gamePanel.add(gameButton[i]); &#125; this.getContentPane().add(gamePanel); MouseListener moveOn = new MouseAdapter() &#123; public void mouseEntered(MouseEvent e) &#123; int Wooha = 0; for (int i = 0; i &lt; number * number; i++) &#123; if (e.getSource().equals(gameButton[i])) &#123; Wooha = i; gameButton[i].setText(""); gameButton[i].removeMouseListener(this); break; &#125; &#125; int i; do &#123; i = (int) (Math.random() * number * number); &#125; while (i == Wooha); gameButton[i].addMouseListener(this); gameButton[i].setText("Click me"); &#125; &#125;; int i = (int) (Math.random() * number * number); gameButton[i].addMouseListener(moveOn); gameButton[i].setText("Click me"); &#125; private void start() &#123; this.setVisible(true); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/** * Title CatchButtonGameV2.java * Description This class contains a game which never will success. * Copyright (c) 2016 Copyright Holder All Rights Reserved. * @author Question * @date June 5th, 2016 * @version 1.0 */import java.awt.*;import java.awt.event.*;import javax.swing.*;public class CatchButtonGameV2 extends JFrame &#123; private static int number; private int size = (int) ((float) (Toolkit.getDefaultToolkit().getScreenSize().width) / 3); // Set the size of GUI. private JButton[] gameButton = new JButton[number * number]; public static void main(String[] args) &#123; if (args.length &lt; 1 || Double.parseDouble(args[0]) &lt; 9) &#123; System.out.println("Usage:\n Java CatchButtonGameV2 16(or 9, 25)"); System.exit(0); &#125; number = (int) Math.sqrt(Double.parseDouble(args[0])); CatchButtonGameV2 game = new CatchButtonGameV2(); game.start(); &#125; // Constructor. public CatchButtonGameV2() &#123; super("Catch me if you can!"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Exit when click the exit button. getContentPane().setBackground(new Color(90, 154, 212)); // Set the background color of window. setSize(size, size); // Set the size of window. setResizable(false); // Forbid to resize the window. setLocationRelativeTo(null); // Set the window in the centre of screen. initialize(); &#125; /** * This method will create a GridLayout panel and add buttons to it. */ private void initialize() &#123; int hap = (int) ((float) (size) / 100); JPanel gamePanel = new JPanel(new GridLayout(number, number, hap, hap)); gamePanel.setOpaque(false); for (int i = 0; i &lt; number * number; i++) &#123; gameButton[i] = new JButton(); gamePanel.add(gameButton[i]); &#125; this.getContentPane().add(gamePanel); MouseListener moveOn = new MouseAdapter() &#123; public void mouseEntered(MouseEvent e) &#123; int Wooha = 0; for (int i = 0; i &lt; number * number; i++) &#123; if (e.getSource().equals(gameButton[i])) &#123; Wooha = i; gameButton[i].setText(""); gameButton[i].removeMouseListener(this); break; &#125; &#125; int i; do &#123; i = (int) (Math.random() * number * number); &#125; while (i == Wooha); gameButton[i].addMouseListener(this); gameButton[i].setText("Click me"); &#125; &#125;; int i = (int) (Math.random() * number * number); gameButton[i].addMouseListener(moveOn); gameButton[i].setText("Click me"); &#125; private void start() &#123; this.setVisible(true); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab6]]></title>
    <url>%2FLab6.html</url>
    <content type="text"><![CDATA[Java 的大作业在今天（2016-05-17）公布了，要求半个月时间写好，目测又是一波波哀嚎接连不断，我稍微看了两眼，是要求编写一个图形化的点菜系统，老师给的要求足足有 4 页那么多……丧心病狂的英方课……说到丧心病狂，还是应该数企管产开最变态，算了不扯了，都是伤心事…… 这次的 Lab6 和上次的 Lab5 感觉在难度和水平上都比以前提升了一大截，有点让人招架不住，Lab6 建议还是好好写，自己写，毕竟又是一次要验收的实验。 第一题写的很慢，我的渣英语，题都看不懂，实在是心累，找同学帮忙翻译才明白啥意思。首先是老师提供的 MonsterMash.java，添加了几个怪到 List 里，然后所有的怪都出来打一轮，直到某一轮打完，伤害累积超过 100 就结束，不用修改：1234567891011121314151617181920212223242526272829303132import java.util.*;/** * Title : MonsterMash.java * Description: This class is the test class for Monsters. * @author Laurissa Tokarchuk * @version 1.0 * @author Paula Fonseca * @version 1.1 */public class MonsterMash &#123; public static void main(String[] args) &#123; ArrayList&lt;Monster&gt; monsters = new ArrayList&lt;Monster&gt;(); monsters.add(new Monster("Tom")); monsters.add(new Monster("George")); monsters.add(new Dragon("Smaug")); monsters.add(new Dragon("Jabosh")); monsters.add(new Troll("Salomon")); monsters.add(new Troll("Bender")); int damageDone = 0; while (damageDone &lt; 100) &#123; for (Monster m : monsters) &#123; m.move((int)(Math.random()*4) + 1); damageDone += m.attack(); &#125; &#125; &#125;&#125; 2016-05-18 更新：这里面最后一段代码，for 函数与我们之前见到的都不一样，今天有同学问我我才注意到，这里的 for 函数括号中间有两部分，用冒号（colon）隔开，其实是 foreach 函数，用来遍历，在这里的作用就是将 monsters 里面所有的对象都调出来，并建立引用（reference），将所有的对象都 move 一下，attack 一下。 定义一个 Monster 类，包括了怪的通用的方法（method），attack 和 move，如果你在这里也把 name 设置成 private，就需要像我一样多写一个 setter 和 getter 函数：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * A class that defines monster. * * @author Question * @date May 14, 2016 */public class Monster &#123; // Instance variables. private String name; // Constructor. public Monster(String newName) &#123; name = newName; &#125; /** * A setter method. * @param newName The new name you want to set. */ public void setName(String newName) &#123; name = newName; &#125; /** * A getter method. * @return name The name of monster. */ public String getName() &#123; return name; &#125; /** * A method to add a student to the list. * @return attackValue The value of monster's attack. */ public int attack() &#123; int attackValue = (int) (Math.random() * 5 + 1); // Random attack between 1 and 5. System.out.println(name + ", of type " + this.getClass() + ", attacks generically: " + attackValue + " points damage caused."); return attackValue; &#125; /** * A method to show which direction the monster move. * @param direction The direction of monster. */ public void move(int direction) &#123; switch(direction) &#123; case 1: System.out.println(this.name + " is moving 1 step NORTH."); break; case 2: System.out.println(this.name + " is moving 1 step EAST."); break; case 3: System.out.println(this.name + " is moving 1 step SOUTH."); break; default: System.out.println(this.name + " is moving 1 step WEST."); break; &#125; &#125;&#125; 接下来写龙这种怪（感觉怪怪的），题目写明：30% 的时间龙是用龙息（吐火）来攻击的，剩下的时间是普通攻击，在这里时间上的分割其实可以用随机数来代替实现，随机生成 1 到 10 的整数，小于等于 3 时使用龙息：1234567891011121314151617181920212223242526272829/** * A class that defines dragon. * * @author Question * @date May 17, 2016 */public class Dragon extends Monster &#123; // Constructor. public Dragon(String newName) &#123; super(newName); &#125; /** * Attack method of Dragon. * @return attackValue The value of dragon's attack. */ public int attack() &#123; int timeSelect = (int) (Math.random() * 10 + 1); // Random integer number to decide how to attack. if(timeSelect &lt;= 3) &#123; // 30% of the time. int attackValue = (int) (Math.random() * 50 + 1); // Random attack between 1 and 50. System.out.println(this.getName() + ", of type " + this.getClass() + ", attacks by breathing fire: " + attackValue + " points damage caused."); return attackValue; &#125; else &#123; return super.attack(); &#125; &#125;&#125; 然后是 Troll 这货，这是个啥我也不知道，英语渣：12345678910111213141516/** * A class that defines troll. * * @author Question * @date May 17, 2016 */public class Troll extends Monster &#123; // Constructor. public Troll(String newName) &#123; super(newName); if(newName.equals("Saul") || newName.equals("Salomon")) &#123; // If the name is Saul, System.out.println("Error!"); // print Error and setName("Detritus"); // set new name. &#125; &#125;&#125; 都写好之后，运行 MonsterMash 就出来一大片各种怪的攻击记录。 第二题在第一题的基础上有了更多的要求，将 Monster 变成抽象类，强制所有怪都要有特殊攻击方式，并定义了个特殊攻击的概率。Monster：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182/** * A class that defines monster. * * @author Question * @date May 17, 2016 */public abstract class Monster implements SpecialAttack &#123; // Instance variables. private String name; private double spAttackProbability = 0.2; /** * A constructor. * @param newName The new name you want to set. */ public Monster(String newName) &#123; name = newName; &#125; /** * A another constructor. * @param newName The new name you want to set. * @param spAttackProbability The probability of special attack you want to set. */ public Monster(String newName, double spAttackProbability) &#123; name = newName; this.spAttackProbability = spAttackProbability; &#125; /** * A setter method. * @param newName The new name you want to set. */ public void setName(String newName) &#123; name = newName; &#125; /** * A getter method. * @return name The name of monster. */ public String getName() &#123; return name; &#125; /** * A method to add a student to the list. * @return attackValue The value of monster's attack. */ public final int attack() &#123; if(Math.random() &lt; spAttackProbability) &#123; return this.specialAttack(); &#125; else &#123; int attackValue = (int) (Math.random() * 5 + 1); // Random attack between 1 and 5. System.out.println(name + ", of type " + this.getClass() + ", attacks generically: " + attackValue + " points damage caused."); return attackValue; &#125; &#125; /** * A method to show which direction the monster move. * @param direction The direction of monster. */ public void move(int direction) &#123; switch(direction) &#123; case 1: System.out.println(this.name + " is moving 1 step NORTH."); break; case 2: System.out.println(this.name + " is moving 1 step EAST."); break; case 3: System.out.println(this.name + " is moving 1 step SOUTH."); break; default: System.out.println(this.name + " is moving 1 step WEST."); break; &#125; &#125;&#125; 因为题目要求所有的怪强制定义特殊攻击，所以就想到了就接口来实现：123456789/** * An interface that force classes to provide specialAttack method. * * @author Question * @date May 17, 2016 */public interface SpecialAttack &#123; public int specialAttack();&#125; 然后在 Dragon.java 和 Troll.java 里加上 specialAttack 函数就好了：12345678910111213141516171819202122232425262728293031/** * A class that defines dragon. * * @author Question * @date May 17, 2016 */public class Dragon extends Monster &#123; // Instance variable. private static double spAttackProbability = 0.3; // Constructors. public Dragon(String newName) &#123; super(newName, spAttackProbability); &#125; public Dragon(String newName, double newProbability) &#123; super(newName, newProbability); &#125; /** * Special attack method of Dragon. * @return attackValue The value of dragon's attack. */ public int specialAttack() &#123; int attackValue = (int) (Math.random() * 50 + 1); // Random attack between 1 and 50. System.out.println(this.getName() + ", of type " + this.getClass() + ", attacks by breathing fire: " + attackValue + " points damage caused."); return attackValue; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * A class that defines troll. * * @author Question * @date May 17, 2016 */public class Troll extends Monster &#123; // Constructors. public Troll(String newName) &#123; super(newName); if(newName.equals("Saul")) &#123; // If the name is Saul, System.out.println("Error!"); // print Error and setName("Detritus"); // set new name. &#125; if(newName.equals("Salomon")) &#123; // If the name is Saul, System.out.println("Error!"); // print Error and setName("Detritus"); // set new name. &#125; &#125; public Troll(String newName, double newProbability) &#123; super(newName, newProbability); if(newName.equals("Saul")) &#123; // If the name is Saul, System.out.println("Error!"); // print Error and setName("Detritus"); // set new name. &#125; if(newName.equals("Salomon")) &#123; // If the name is Saul, System.out.println("Error!"); // print Error and setName("Detritus"); // set new name. &#125; &#125; /** * Special attack method of Troll. * @return attackValue The value of dragon's attack. */ public int specialAttack() &#123; int attackValue = (int) (Math.random() * 15 + 1); // Random attack between 1 and 15. System.out.println(this.getName() + ", of type " + this.getClass() + ", attacks by hiting with a club: " + attackValue + " points damage caused."); return attackValue; &#125;&#125; 最后，原先的 MonsterMash.java 已经不能编译了，因为 Monster 已经变成了抽象类，不能实例化，需要修改一下：1234567891011121314151617181920212223242526272829303132333435363738import java.util.*;/** * Title : MonsterMash.java * Description: This class is the test class for Monsters. * @author Laurissa Tokarchuk * @version 1.0 * @author Paula Fonseca * @version 1.1 * @author Question * @version 1.2 */public class MonsterMash &#123; public static void main(String[] args) &#123; ArrayList&lt;Monster&gt; monsters = new ArrayList&lt;Monster&gt;(); // The Monster class have been modified to an abstract class, // so java cannot create monster object. /* monsters.add(new Monster("Tom")); monsters.add(new Monster("George")); */ monsters.add(new Dragon("Smaug")); monsters.add(new Dragon("Jabosh")); monsters.add(new Troll("Salomon")); monsters.add(new Troll("Bender")); int damageDone = 0; while (damageDone &lt; 100) &#123; for (Monster m : monsters) &#123; m.move((int)(Math.random()*4) + 1); damageDone += m.attack(); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab5]]></title>
    <url>%2FLab5.html</url>
    <content type="text"><![CDATA[这周二的 Java 测试，31 个选择题，做的是相当的爽啊～酸爽～ 首先是前后左右相邻的两个人的卷子不一样，一个考场分 A1 和 A2 卷，前所未闻啊，估计不同时间考试的话还会有 B1 和 B2 卷，英国老师这想法真是给跪了，这样的防作弊，我还真是头一次见到。 让我跪了的不只是这个形式，还有考试内容，有的题完全就是问你前几次代码实验的内容，如果不是自己写的代码那题还真没法做，有的题干脆就直接问你 Lab4 实验中第二题的函数都叫什么名称，听说过，没见过，这和以前网上的新闻说某高校期末考试题是一个照片选择题，要求选出哪个是老师差不多，这头一次见到这样考的啊…… 幸好，我在五一之前写完了第四次的实验代码，这才不至于栽了跟头。也有同学很幸运，自己没有写代码，看了我的代码之后竟然记住了 Lab4 代码里函数的名称，那个选择题他写对了～ 好了，不说了，各位同学以后要好好写代码哦～下面是这次的实验代码内容。 第一题里，又用到了第三次实验的 Cat.java，我还是不放出来了，有需要的同学自己去看我的上一篇博客。 这里我建议可以先看看第二题的 StudentList.java，看了之后会对第一题有一点帮助。12345678910111213141516171819202122232425262728293031323334353637/** * A class that test Cat class. * * @author Question * @date May 7, 2016 * @version 1.0 */import java.awt.Color;import java.util.ArrayList;public class CatTest3 &#123; public static void main(String[] args) &#123; // Create an ArrayList which will contains many objects. ArrayList&lt;Cat&gt; list = new ArrayList&lt;Cat&gt;(5); // Create 5 different cats and add them to ArrayList. list.add(new Cat("Napoleon", "straight", true, Color.GRAY, 5)); list.add(new Cat("Princess", "short", false, Color.WHITE, 10)); list.add(new Cat("Whiskers", "long", true, Color.GRAY, 15)); list.add(new Cat("Tom", "long", true, Color.BLUE, 10)); list.add(new Cat("Jerry", "straight", true, Color.YELLOW, 10)); // Print out the object of index 4. System.out.println(list.get(4)); // Print out the size of ArrayList. System.out.println("The size of ArrayList is " + list.size() + "."); // Remove the object of index 3. list.remove(3); // Use a for loop to print out all cats' details. for (int i = 0; i &lt; list.size(); i++) &#123; System.out.println(list.get(i)); &#125; &#125;&#125; 当写完 CatTest3，并且终于没有错误的时候，第二题写起来就非常的快了。 首先是实验给的 Student.java，不需要有任何改动，只用下载下来就可以了，这里我贴出来方便看：12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * A class that represents a student. * @author Ling Ma * @created 2009 * @version 1.0 * @author Paula Fonseca * @version 1.1 */public class Student &#123; private String firstName; private String lastName; private String email; private int year; // Year of registration on the course. /** * Constructor * @param first name, last name, email and year of registration */ public Student(String firstName, String lastName, String email, int year) &#123; this.firstName = firstName; this.lastName = lastName; this.email = email; this.year = year; &#125; /** * Get the first name. * @return The student's first name. */ public String getFirstName() &#123; return firstName; &#125; /** * Get the last name. * @return The student's last name. */ public String getLastName() &#123; return lastName; &#125; /** * A toString() method to give a String representation of a Student. * @return The String representation of a Student. */ public String toString() &#123; String fullName = firstName + " " + lastName; return "Name: " + fullName + " Email: " + email + " Year: " + year; &#125;&#125; 然后是很快写好的 StudentList.java：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import java.util.ArrayList;/** * A class that holds a list of students. * * @author Question * @date May 7, 2016 */public class StudentList &#123; private ArrayList&lt;Student&gt; list; // instance variable /** * Constructor */ public StudentList() &#123; list = new ArrayList&lt;Student&gt;(); &#125; /** * A method to print off all ArrayList elements. */ public void printList() &#123; System.out.println("--Begin--"); for (int i = 0; i &lt; list.size(); i++) &#123; System.out.println(list.get(i)); &#125; System.out.println("--End--"); &#125; /** * A method to add a student to the list. * @param The student. */ public void addToList(Student stu) &#123; list.add(stu); System.out.println(stu.getFirstName() + " " + stu.getLastName() + " has been added to the student list"); &#125; /** * A method to remove a student from the list. * @param The student. */ public void removeFromList(Student stu) &#123; boolean isRemove = list.remove(stu); if(isRemove) &#123; System.out.println(stu.getFirstName() + " " + stu.getLastName() + " has been removed from the list"); &#125; else &#123; System.out.println("Woops! Something wrong! Failed to delete this student."); &#125; &#125; /** * A main() method to test. */ public static void main(String[] args) &#123; // Create an instance of the class. StudentList studentList = new StudentList(); // Create 3 student objects. Student stu1 = new Student("John", "Smith", "js@qmul.ac.uk", 2011); Student stu2 = new Student("Mary", "Davis", "md@qmul.ac.uk", 2012); Student stu3 = new Student("Sherlock", "Holmes", "xxx@qmul.ac.uk", 2014); // Add the 3 students to the list. studentList.addToList(stu1); studentList.addToList(stu2); studentList.addToList(stu3); // Print the list. studentList.printList(); // Remove the student "Mary Davis" studentList.removeFromList(stu2); // Print the list again studentList.printList(); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab4]]></title>
    <url>%2FLab4.html</url>
    <content type="text"><![CDATA[隔了好久，直到第三周 Java 课都上完了才想起来要把 Lab4 的代码赶紧写了。第三周的课讲的好快，而且感觉是目前最重要的内容……这实在是有点让人头疼。但是这周讲到最令人激动的 GUI 部分了，大概以后写的实验代码都会是图形操作界面的吧，想想还是挺让人激动的，终于可以写带图形的程序了。其实在去年这个时候学的 C 语言也可以写图形化的程序，但是学校没有教，想想 C 语言执行效率这么高的语言却没有学到图形化，只能写 Java 的图形化程序，还是有点遗憾的。 Lab4 涉及到的知识大部分在第二周的课件中，不熟悉的可以回去多翻翻第二周课件。有些基本的格式还是需要注意的，我写第二个随机数组的时候，运行总是报空指针的错误，来来回回看了半天才发现是数组忘了 new…… 第一题里面用到了 Lab3 的 Cat.java，这里我就不放出来了，看看新的 CatTest2.java 就好了：12345678910111213141516171819202122232425262728/** * A class that test Cat class. * * @author Question * @date Apr 29, 2016 * @version 1.0 */import java.awt.Color;public class CatTest2 &#123; public static void main(String[] args) &#123; // Instance array variable. Cat[] test = new Cat[6]; // Create 6 different cats. test[0] = new Cat("Napoleon", "straight", true, Color.GRAY, 5); test[1] = new Cat("Princess", "short", false, Color.WHITE, 10); test[2] = new Cat("Whiskers", "long", true, Color.GRAY, 15); test[3] = new Cat("Tom", "long", true, Color.BLUE, 10); test[4] = new Cat("Jerry", "straight", true, Color.YELLOW, 10); test[5] = new Cat("Bob", "short", false, Color.BLACK, 15); // Use a for loop to print all cats' attributes. for (int i = 0; i &lt; test.length; i++) &#123; System.out.println(test[i]); &#125; &#125;&#125; 第二个是随机数组，随机生成指定数量的 0 至 9 范围的整数，并计算和与均值：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * A class that represents a random array. * * @author Ling Ma * @date Jan 19, 2009 * @version 1.0 * @author Paula Fonseca * @date Apr 11, 2016 * @version 1.1 * @author Question * @date Apr 29, 2016 * @version 1.2 */public class RandomArray &#123; private int[] array; // instance variable /** * Constructor * @param size The size of the array. */ public RandomArray(int size) &#123; // Check to see if the user has actually sent a postive number to the method. if (size &lt;= 0) &#123; System.out.println("Please input a postive integer. Example: java RandomArray 5"); System.exit(-1); &#125; // Create an array of int. array = new int[size]; // Use a for loop to give all random number. for (int i = 0; i &lt; size; i++) &#123; array[i] = (int) (Math.random() * 10); &#125; &#125; /** * A method to print the array elements. */ public void printArray() &#123; // Use a for loop to print all numbers. for (int i = 0; i &lt; array.length; i++) &#123; System.out.print(array[i] + " "); &#125; System.out.println(); &#125; /** * A method to calculate the sum of all elements. * @return The sum. */ public int calcSum() &#123; // Calculate the sum of array. int sum = 0; for (int i = 0; i &lt; array.length; i++) &#123; sum += array[i]; &#125; return sum; &#125; /** * A method to calculate the mean (or average) of all elements. * @return The mean. */ public double calcMean() &#123; // Calculate the average of array. double mean = calcSum() / array.length; return mean; &#125; /** * A main method to test. */ public static void main(String[] args) &#123; // Check to see if the user has actually sent a parameter to the method. if (args.length != 1) &#123; System.out.println("Usage: java RandomArray &lt;NUM&gt;. Example: java RandomArray 5"); System.exit(-1); &#125; // Create an instance of the class. RandomArray test = new RandomArray(Integer.parseInt(args[0])); // Print the array. test.printArray(); // Calculate the sum of all the values in the array and print it. System.out.println("Sum: " + test.calcSum()); // Calculate the mean of all the values in the array and print it. System.out.println("Mean: " + test.calcMean()); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab3]]></title>
    <url>%2FLab3.html</url>
    <content type="text"><![CDATA[第三次的 Java 实验中，用到了 Color 类，对于这个类，我很不熟悉，写这一次的实验代码花了好多时间，但其实到现在第一题的代码写的也不好，在 CatTest 中输出猫的颜色不知道除了枚举还有什么方法～～大家凑合着看吧～ 首先是第一题的 Cat.java，Setter 和 Getter 重复写那么多也是挺无聊的。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import java.awt.*;/** * Title Cat.java * Description This class contains the definition of a cat. * Copyright Copyright (c) 2006 - 2016 * @author Laurissa Tokarchuk * @version 1.0 * @author Paula Fonseca * @version 1.1 * @author Question * @version 1.2 */public class Cat &#123; // Declaration of instance variables. private String name, furType; private boolean tail; private Color colour; private int speed; //Initialize all instance variables. public Cat(String name, String furType, boolean tail, Color colour, int speed) &#123; this.name = name; this.furType = furType; this.tail = tail; this.colour = colour; this.speed = speed; &#125; /** This is the sleep method for the cat. It dictates the number of * minutes the cat sleeps. * @param duration The number of minutes to sleep. */ public void sleep(int duration) &#123; System.out.println("I am sleeping for " + duration + " minutes."); &#125; /** This method allows the cat to run. The distance (in a straight line) * the cat runs is dependent on how long the cat runs and whether or not * it is running in a zigzag. * @param duration The number of minutes to run. * @param zigzag Whether to run in a zigzag pattern. * @return int Number of metres ran. */ public int run(int duration, boolean zigzag) &#123; System.out.println("I am running " + (zigzag? "in a zigzag" : "straight") + " for " + duration + " minutes."); int distanceRun = duration * speed; // assuming speed is metres per minute if (zigzag) &#123; /* When in zigzag, distance is 1/3 of what it would have been if the cat was going straight. */ return distanceRun/3; &#125; else return distanceRun; &#125; /** The setter method of name. */ public void setName(String name) &#123; this.name = name; &#125; /** The setter method of speed. */ public void setSpeed(int speed) &#123; this.speed = speed; &#125; /** The getter method of name. * @return name The name of cat. */ public String getName() &#123; return name; &#125; /** The getter method of speed. * @return speed The speed of cat. */ public int getSpeed() &#123; return speed; &#125; /** The getter method of color. * @return colour The color of cat. */ public Color getColor() &#123; return colour; &#125;&#125; 然后是 CatTest.java，这里有一个需要注意的地方就是，这里开头也要写 import，不写报错，QMUL 的老师也是挺坑的。Color 的输出搞了几天仍然没有搞很明白，网上许多的写法是写个 Enum，但我有点懒，不想整那个了，随便写写拉倒吧，辣鸡 Cat。1234567891011121314151617181920212223242526272829303132333435363738import java.awt.*;/** * Title CatTest.java * Description This class contains the test class for Cat. * Copyright Copyright (c) 2006 - 2016 * @author Laurissa Tokarchuk * @version 1.0 * @author Paula Fonseca * @version 1.1 * @author Question * @version 1.2 */public class CatTest &#123; public static void main(String[] args) &#123;/* Cat c = new Cat("Napoleon", "straight", true, Color.gray, 5); c.setName("Napoleon"); c.setSpeed(10); // in metres per minute c.sleep(5); int m = c.run(10, true); System.out.println("I have run " + m + " metres."); System.out.println("My name is " + c.getName() + ", and my speed is " + c.getSpeed() + ".");*/ //Create two cats with all attributes. Cat cat1 = new Cat("Princess", "short", false, Color.WHITE, 10); Cat cat2 = new Cat("Whiskers", "long", true, Color.GRAY, 15); //Print out the name and color of first cat. System.out.println("Hi, I'm " + cat1.getName() + ", and I'm " + cat1.getColor().toString() + "."); cat1.run(10, false); //Print out the name and color of second cat. System.out.println("Hi, I'm " + cat2.getName() + ", and I'm " + cat2.getColor().toString() + "."); cat2.run(5, true); &#125;&#125; 第二题就是写个计算矩形面积，没有什么好说的，很快就写出来了。123456789101112131415161718192021222324252627282930313233343536/** * Title Rectangle.java * Description This class contains the definition and test class for rectangle. * Copyright Copyright (c) 2016 * @author Question * @version 1.0 */public class Rectangle &#123; // Declaration of instance variables. private float l, w; // This is the constuctor of Rectangle. Get the length and width of rectangle. public Rectangle(float length, float width) &#123; l = length; w = width; &#125; /** Calculate the area of rectangle. * @return l*w The area of rectangle. */ public float calcArea() &#123; return l * w; &#125; public static void main(String[] args) &#123; //Create two rectangles. Rectangle rec1 = new Rectangle(8, 6); Rectangle rec2 = new Rectangle(7, 7); Rectangle rec3 = new Rectangle(5, 3); //Print out the area of two rectangles. System.out.println("The first rectangle's area is " + rec1.calcArea() +"."); System.out.println("The second rectangle's area is " + rec2.calcArea() +"."); System.out.println("The third area is " + rec3.calcArea() + "."); &#125;&#125; 最后一题，好像……没什么吐槽的地方……但是这个 Javadoc 注释真是写着让人蛋疼啊……123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125/** * Title Counter.java * Description This class contains the definition of a counter. * Copyright Copyright (c) 2016 * @author Question * @version 1.0 */public class Counter &#123; // Declaration of instance variables. private int count, max; /** This is constructor with two parameters. * @param count The number you need to count. * @param max The max of count number. */ public Counter(int count, int max) &#123; this.count = count; this.max = max; &#125; /** This is constructor without parameter. * And set count 0, set max 10. */ public Counter() &#123; count = 0; max = 10; &#125; /** This method increases the count value by 2. * @return count The count. */ public int increase() &#123; count += 2; if(count &gt; max) &#123; reset(); &#125; return count; &#125; /** This method increases the count value by n. * @param n The value you want increase. * @return count The count. */ public int increase(int n) &#123; count += n; if(count &gt; max) &#123; reset(); &#125; return count; &#125; /** This method decreases the count value by 1. * @return count The count. */ public int decrease() &#123; count -= 1; if(count &lt; 0)&#123; reset(); &#125; return count; &#125; /** This method decreases the count value by n. * @param n The value you want to decrease. * @return count The count. */ public int decrease(int n) &#123; count -= n; if(count &lt; 0)&#123; reset(); &#125; return count; &#125; /** This method doubles the count value. * @return count The count. */ public int doubler() &#123; count *= 2; return count; &#125; /** This method resets the count value to 0. * And print out "Counter Reset!". */ public void reset() &#123; count = 0; System.out.println("Counter Reset!"); &#125; /** This method defines the String of this class. * @return String The count and max of current. */ public String toString() &#123; return "Count: " + count + "Max: " + max; &#125; /** This method is a getter of count. * @return int The count. */ public int getCount() &#123; return count; &#125; /** This method is a getter of max. * @return int The max. */ public int getMax() &#123; return max; &#125; /** This method is a setter of count. * Everybody can use this method to change count. */ public void setCount(int n) &#123; this.count = n; &#125; /** This method is a setter of max. * Everybody can use this method to change max. */ public void setMax(int n) &#123; this.max = n; &#125;&#125; 然后是 CounterTest.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/** * Title CounterTest.java * Description This class contains the test class for counter. * Copyright Copyright (c) 2016 * @author Question * @version 1.0 */public class CounterTest &#123; public static void main(String[] args) &#123; //Create a object of Counter. Counter c = new Counter(); //Show the details of counter. System.out.println("The max of counter is " + c.getMax() + ", and counter will increase by 2."); c.setMax(20); c.setCount(10); System.out.println("Now the max of counter is " + c.getMax() + ", and the counter will increase from " + c.getCount() + "."); //Reset the count, and show the change of every operations. c.reset(); System.out.println("Increase once, the counter is " + c.increase() + "."); System.out.println("Decrease once, the counter is " + c.decrease() + "."); System.out.println("Double once, the counter is " + c.doubler() + "."); c.reset(); /* Reset the count. */ while(true) &#123; int m = c.increase(1); System.out.println(m); if (m == 0) &#123; /* When n = 0, the counter is over, so need to kill the loop. */ break; &#125; &#125; c.setCount(20); /* Set the count = 20.*/ while(true) &#123; int m = c.decrease(3); System.out.println(m); if (m == 0) &#123; /* When n = 0, the counter is over, so need to kill the loop. */ break; &#125; &#125; &#125;&#125; 这次的实验题目就是酱了，有问题可以留言。]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忍不住更换了域名]]></title>
    <url>%2FChanged-A-New-Domain.html</url>
    <content type="text"><![CDATA[在老高的博客上面逛，看到老高推荐大家去 namesilo 注册域名，还非常便宜，苦于一直 tk 域名百度不收录的我，按捺不住于是就买了一个 com 域名，一年 50 块，还可以，不过我的博客要一直坚持写下去才可以！]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国院专属福利：免费 Office 365 订阅]]></title>
    <url>%2FBUPTIS-Office-365.html</url>
    <content type="text"><![CDATA[作为国院的一名学生，咱们有一些别人没有的福利：QM 给每位学生都发了一份 Office 365 订阅！有了这份订阅你就可以在你的 Windows 上或者 Mac 上安装最新的 Office 2016，或者 Office 2013 也可以~一起看看怎么获取这个福利吧~ 首先打开微软 Office 的 门户页面，输入你的 QM 邮箱，就像这样：xxx@se14.qmul.ac.uk，点击下一步，网页会自动跳转到 QM 的登录验证页面，在这里输入你的 QMPlus 账号密码，账号就像这样：jp2014xxxxxx，密码就是像乱码一样的那个密码，登录成功后会自动跳转回微软 Office 的门户页面： 点击右上角“安装 Office 应用”，选择“其他安装选项”，然后如图所示，推荐选择“64 位”： 点击下方的安装按钮，将会下载一个安装程序，下载完毕打开，完全不需要手动干预，静待安装完毕，Office 2016 就可以用了~ 这是 QM 给每位学生提供的 Office 365 订阅，每人拥有 5 台电脑的安装权限，赶紧用起来吧~]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>BUPT</tag>
        <tag>QMUL</tag>
        <tag>Office365</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站被镜像后记]]></title>
    <url>%2FThe-Truth-About-Mirror.html</url>
    <content type="text"><![CDATA[今天在 Google 上面仔细找了找 Gato Sabido 这个玩意儿，发现原来是巴西的一家做电子书的网站，不知道这个域名是被谁给攻击了，竟然解析到了我的 IP 上～ 我还以为是这个域名原有的人恶意镜像我的网站的，这下看来是背了黑客的锅了，这个域名也是受害者啊～]]></content>
      <categories>
        <category>糟心</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[发现有个地址镜像我的网站]]></title>
    <url>%2FFound-A-SB.html</url>
    <content type="text"><![CDATA[前一段时间在 Google 上面搜索我的网站，发现竟然有好多“问少的小站”的结果，刚刚准备高兴，一看却不是自己的域名，竟然是被镜像了！这 TM 就非常尴尬了~ 这些全是这个域名:https://gatosabido.com.br，不知道到底是什么仇什么怨，竟然有人专门镜像我的网站，目前猜想可能是想嗅探我的 SS 站点的用户名和密码吧~ 2016-3-25 更新： 如果你是在百度上搜索我的网站，那么第一名的结果是镜像我的网站，只要不是我的正确的域名，就会被强制跳转到正确的域名，比原先使用 JavaScript 判断跳转的方法要更好，不需要加载网页内容就可以直接跳转。这样的话，别人的域名就变成了纯粹的流量导入的入口了，不能再镜像我的网站了，过一段时间，各大搜索引擎的搜索结果就会发生变化，说不定他在权重上的努力会便宜了我~~~]]></content>
      <categories>
        <category>糟心</category>
      </categories>
      <tags>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab2]]></title>
    <url>%2FLab2.html</url>
    <content type="text"><![CDATA[第二次的 Java 实验，比第一次有了点意思~不过第一个题。。。这是几岁小孩的游戏啊，竟然是拼代码！当我看到这个题的时候，一口老血，噗！123456789101112131415161718public class JavaTest &#123; public static void main(String[] args) &#123; int loopUntil = Integer.parseInt(args[0]); System.out.println(); for (int i = 0; i &lt; loopUntil; i++) &#123; System.out.print(i); System.out.print(":"); for (int j = loopUntil; j &gt; 0; j--) &#123; if (((i + j) % 3) == 0) &#123; System.out.print("*"); &#125; else &#123; System.out.print(j); &#125; &#125; System.out.println(); &#125; &#125;&#125; 1234567891011public class Pattern1 &#123; public static void main(String[] args) &#123; int loopUntil = Integer.parseInt(args[0]); for (int i = 1; i &lt;= loopUntil; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j); &#125; System.out.println(); &#125; &#125;&#125; 1234567891011public class Pattern2 &#123; public static void main(String[] args) &#123; int loopUntil = Integer.parseInt(args[0]); for (int i = loopUntil; i &gt; 0; i--) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j); &#125; System.out.println(); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930public class Patterns &#123; public void printPattern1(int n) &#123; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j); &#125; System.out.println(); &#125; &#125; public void printPattern2(int n) &#123; for (int i = n; i &gt; 0; i--) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j); &#125; System.out.println(); &#125; &#125; public static void main(String[] args) &#123; int loopUntil = Integer.parseInt(args[0]); Patterns Pattern1 = new Patterns(); Pattern1.printPattern1(loopUntil); Patterns Pattern2 = new Patterns(); Pattern2.printPattern2(loopUntil); &#125;&#125; 第五个题，是关于 Javadoc 的，其实有点不太懂，目前也不知道有没有软件可以辅助编写注释的，只能手打了，这个是题目中给的 java 范例：123456789101112131415161718192021222324252627282930public class CountDownExample &#123; /** * This method counts down from a specified number * to zero. It will print its progress to the * command line. * @param count The number to count from. */ public void countDown(int count) &#123; /** * Note: If there are no brackets after a for * loop, it is only the sentence that * immediatly follows that is part of the loop. */ for (int i=count; i &gt; 0; i--) System.out.println(i); System.out.println("nTime up!"); &#125; /** * Main now only creates a new instance of my * program and calls the program's method. * @param args This program does not use this parameter. */ public static void main (String[] args) &#123; CountDownExample q = new CountDownExample(); q.countDown(5); &#125;&#125; 在创建了 docCD 文件夹之后，运行这样的命令就可以在 docCD 文件夹里看到 Javadoc 文档了：1javadoc –d docCD CountDownExample.java 12345678910111213141516171819202122232425262728public class CountUpExample &#123; /** * This method counts down from a specified number * to zero. It will print its progress to the * command line. * @param count The number to count from. */ public void countUp(int count) &#123; /** * Note: If there are no brackets after a for * loop, it is only the sentence that * immediatly follows that is part of the loop. */ for (int i = 1; i &lt;= count; i++) &#123; System.out.println(i); &#125; System.out.println("nAll done!"); &#125; /** * Main now only creates a new instance of my * program and calls the program's method. * @param args This program does not use this parameter. */ public static void main (String[] args) &#123; CountUpExample q = new CountUpExample(); q.countUp(5); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Lab1]]></title>
    <url>%2FLab1.html</url>
    <content type="text"><![CDATA[新学期，新的语言学习开始了~还是老样子，写代码~1234567public class TestArgs &#123; public static void main (String[] args) &#123; System.out.println("Name = " + args[0] + " " + args[1]); System.out.println("BUPT Email Username = " + args[2]); System.out.println("Student Number = " + args[3]); &#125;&#125; 123456789101112131415161718192021222324252627282930public class WeekDayConverter &#123; public static void main(String[] args) &#123; int weekDay = Integer.parseInt(args[0]); switch (weekDay) &#123; case 1: System.out.println("The 1st day of week is Mon!"); break; case 2: System.out.println("The 2nd day of week is Tue!"); break; case 3: System.out.println("The 3rd day of week is Wed!"); break; case 4: System.out.println("The 4th day of week is Thu!"); break; case 5: System.out.println("The 5th day of week is Fri!"); break; case 6: System.out.println("The 6th day of week is Sat!"); break; case 7: System.out.println("The 7th day of week is Sun!"); break; default: System.out.println("Error!"); &#125; &#125;&#125; 12345678910111213141516171819public class BMICalculator &#123; public static void main(String[] args) &#123; float weight = Float.parseFloat(args[0]); float height = Float.parseFloat(args[1]) / 100; float BMI = weight / (height * height); System.out.println("Your weight: " + weight + " kg"); System.out.println("Your height: " + height + " m"); System.out.printf("Your BMI: %4.2fn", BMI); if (BMI &lt; 18.5F) &#123; System.out.println("You are in the Underweight range."); &#125; else if (BMI &lt; 25F) &#123; System.out.println("You are in the Normal range."); &#125; else if (BMI &lt; 30F) &#123; System.out.println("You are in the Overweight range."); &#125; else &#123; System.out.println("You are in the Obese range."); &#125; &#125;&#125; 123456789public class DoublingNumbers1 &#123; public static void main(String[] args) &#123; int i = 1; do &#123; System.out.println("The double of " + i + " is " + 2 * i); i++; &#125; while (i &lt; 11); &#125;&#125; 1234567public class DoublingNumbers2 &#123; public static void main(String[] args) &#123; for (int i = 1; i &lt; 11; i++) &#123; System.out.println("The double of " + i + " is " + 2 * i); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双十一~]]></title>
    <url>%2F2015-Double-11.html</url>
    <content type="text"><![CDATA[好久不在小站上写东西了，一个半月里经历了很多，却什么都不想写，到了双十一了，早早看好的东西却下架了，我买不了 T_T，所以双十一只做了这么一件事。。。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>双十一</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小学期完成]]></title>
    <url>%2FComputer-Internship.html</url>
    <content type="text"><![CDATA[小学期。。。给我最深刻的启发就是。。。这辈子打死我都不做程序员。。。太TM累了。。。 小学期的任务是这样的： 题目概述：某学校近年来招生规模不断扩大，每个院系的专业、班级、学生的数量急剧增加，在校学生管理的各种信息量也成倍增长。旧有的人工操作的学生信息管理工作，重复工作多，工作量大，效率低。因此，迫切需要电子化办公来提高管理工作的效率。请设计并实现一个学生选课管理系统或一个图书借阅系统来实现选课或图书借阅的电子化。并且要求：使用 C 语言；两个题目，任选其一；分组完成，五人一组，自愿组合；开发环境：Turbo C++ 或其它 C 编程环境；提供命令行操作，无需图形界面；模块化结构；遵守编程规范；界面友好；运行正确；具有容错机制 我的小学期是这样的：第一天我写了学生老师的登录注册系统，第二天修改为使用数据结构，并且定义了如何传递接受参数。接下来和龙仔商量了一下，认为该写老师添加课程了，于是龙仔投入到了这中间。而我，开始了漫漫无终点的修改之路（说起来这是一件相当蛋疼的事情）本来龙仔写的是基本没有 BUG 的。。。但是。。。就是这个但是，我看着不爽，写的和我的格式不一样。。。在我看来写程序不极致精简，格式不整齐简直就是折磨人，现在看来倒是我这个想法折磨了我自己。。。后来我逐渐放弃了优化。。。开始专注整合龙仔写的各个函数。。。就这样。每天忙到 1 点才睡觉。。。 验收前两天晚上两点半才睡，前一天晚上。。。简直要吐血。。。看起来好像所有的函数都整合的挺好了。。。结果运行测试选课删除课程 BUG 就出来了。。。连夜赶工修改。。。硬生生把代码从 2400 行整到了 3500 行。。。然后终于了没了 BUG。。。已经是 4 点 40 了。。。 啊啊啊啊啊早上起来就是验收了啊啊啊啊啊该肿么办。。。 早上带着黑圆圈就晃晃悠悠的去了。。。趴了一上午。。。一直等到了最后一个才验收我们的。。。找的是个女老师，看起来我花一天时间专门修改的提示语没有白费，又很装逼的演示了一下强大的容错功能，看起来分数不会低啦~ 附几张图来看看：（简直羞耻）]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>小学期</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(๑و•̀ω•́)و]]></title>
    <url>%2FXX.html</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>XX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谷歌称 CNNIC 发布伪造 CA 证书]]></title>
    <url>%2FCNNIC-Forged-CA-Certificates.html</url>
    <content type="text"><![CDATA[根据 谷歌在线安全博客 报道和 Mozilla 安全博客 报道，谷歌发现 CNNIC 颁发了多个针对谷歌域名的伪造 CA 假证书。这个名为 MCS 集团的中级证书颁发机构发行了多个谷歌域名的假证书，而 MCS 集团的中级证书则来自中国的 CNNIC。 该证书冒充成受信任的谷歌的域名，被用于部署到网络防火墙中，用于劫持所有处于该防火墙后的HTTPS网络通信，而绕过浏览器警告。 谷歌联系了 CNNIC，CNNIC 在 3 月 22 日回应称，CNNIC 向 MCS 发行了一个无约束的中级证书，MCS 本应该只向它拥有的域名发行证书，但 MCS 将其安装在一个防火墙设备上充当中间人代理，伪装成目标域名，用于执行加密连接拦截(SSL MITM)。企业如出于法律或安全理由需要监控员工的加密连接，必须限制在企业内网中，然而防火墙设备却在用户访问外部服务时发行了不受其控制的域名的证书，这种做法严重违反了证书信任系统的规则。尽管这种解释看起来符合事实，然而，CNNIC 还是签发了不适合 MCS 持有的证书。 CNNIC 作为根 CA 被几乎所有操作系统和浏览器信任，谷歌已经将这些情况通知了所有的主流浏览器，谷歌所有版本的 Chrome 浏览器（包括 Windows、OS X、Linux 版）、Firefox 浏览器都会拦截这些证书，Firefox 从 37 版开始引入 OneCRL 机制，建立证书黑名单，拦截被滥用及不安全的证书。 这件事情再次显示，互联网证书颁发机制公开透明的必要性。 谷歌英文博客原文：Maintaining digital certificate security Mozilla 英文博客原文：Revoking Trust in one CNNIC Intermediate Certificate 后续： MCS 回应称，该证书用于测试环境，并且是人为操作错误引起的。 CNNIC 回应称，1、CNNIC 未发布用于中间人攻击的证书。2、CNNIC 服务器证书业务合作方 MCS 公司确认其不当签发的测试证书仅用于其实验室内部测试。3、CNNIC 已于 3 月 22 日撤销对 MCS 公司的业务授权。 中国互联网络信息中心（China Internet Network Information Center，缩写为 CNNIC），是经中华人民共和国国务院主管部门批准，于 1997 年 6 月 3 日成立的互联网管理和服务机构。中国互联网络信息中心成立伊始，由中国科学院主管；2014 年末，改由中央网络安全和信息化领导小组办公室、国家互联网信息办公室主管。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>CNNIC</tag>
        <tag>证书</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Coursework 2015]]></title>
    <url>%2FCoursework-2015.html</url>
    <content type="text"><![CDATA[QuestionWrite a program that will help elementary school pupils practice math. a) The program will first ask the user for his/her ID number (including two letters &amp; 4 digits), e.g.:Please input your four digit ID no: AB1234The program should have input validation.Then the program prompts three choices: Start a test Check scores Exit b) Test: the program will give 10 math problems, e.g.: 12 * 3 = 36 48 + 32 = 80 … 56 / 28 = 2 Note:i) Pupils will answer each problem before the next one is given.ii) The problems should include addition, subtraction, multiplication and division. They are randomly generated.iii) Randomly generates numbers for problems. However, must ensure that both the problem and the result are no larger than two digits. The problem and the result should be greater than or equal to zero. The divisor cannot be zero.iv) After ten problems are finished, record the time used by the student to do the ten problems.v) Gives a score to each student. Saves this student’s ID, his/her score and the time used into a file named ‘record.txt’.vi) Print the following information on the screen:Prob. | Correct Answ. | Ur Answ c) Check scores: Searches the file ‘record.txt’ and lists all the historical scores for this student, e.g.:Your previous records are: AB1234 80 150 seconds AB1234 50 182 seconds AB1234 90 98 seconds You will be marked based on your program’s: Correctiveness Readability Robustness Conciseness Answer关于这个大作业，我写了一天后来又改动了一天半，这才有了下面第一个版本。不过这个版本并没有完成题目中的所有要求，尤其是最后输出所有的题目与正确答案和输入答案。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; //随机函数相关的头文件#include &lt;time.h&gt; //时间函数相关的头文件#include &lt;ctype.h&gt; //判断数字字母函数相关的头文件#include &lt;string.h&gt; //判断字符串相等函数的头文件char ID[7]; //定义全局变量，以便多个函数引用int main()&#123; int choice(),cycle(); printf("Please type in your ID No:"); //欢迎提示 gets(ID); //获得输入数据 if(ID[6]=='\0'&amp;&amp;isalpha(ID[0])&amp;&amp;isalpha(ID[1])&amp;&amp;isdigit(ID[2])&amp;&amp;isdigit(ID[3])&amp;&amp;isdigit(ID[4])&amp;&amp;isdigit(ID[5])) //检验ID是否符合格式 choice(); else main(); cycle(); return 0;&#125;int choice() //判断选择函数&#123; int work(),grades(),i; char typein[2]; printf("Next, what do you want to do?n1) Start a test.n2) Check scoresn3) ExitnPlease type in your choice:n"); //给出选择提示 gets(typein); //获得输入数据 if(typein[1]!='' || isdigit(typein[0])==0) //检验是否输入一位字符 &#123; printf("Please type in a number.n"); choice(); &#125; switch(typein[0]) //用ASCII检验是否为数字 &#123; case 49: //判断进行测试 work(); break; case 50: //判断查询分数 grades(); break; case 51: //判断选择退出 printf("Bye! Thanks for using my program!n"); exit(0); default: //输入错误的选择 printf("Please type in a number.n"); choice(); &#125; return 0;&#125;int work() //计算题目函数&#123; int addition(),subtraction(),multiplication(),division(),choice(),n,o,i=0; long start,end; FILE *data; srand((unsigned)time(NULL)); //利用时间进行播种，以生成真正的随机数 printf("Test Will start! Are you ready?"); //提示测试将要开始 getchar(); //等待按下任意键开始测试 time(&amp;start); //记录开始测试时的时间 for(o=0;o&lt;10;o++) //循环10次给出问题 &#123; n=rand()%4; //使用随机数来选择加减乘除 switch(n) &#123; case 0: i+=addition(); //回答正确时函数返回值为1，记录下总和，即为答对题目数 break; case 1: i+=subtraction(); //回答正确时函数返回值为1，记录下总和，即为答对题目数 break; case 2: i+=multiplication(); //回答正确时函数返回值为1，记录下总和，即为答对题目数 break; case 3: i+=division(); //回答正确时函数返回值为1，记录下总和，即为答对题目数 &#125; &#125; time(&amp;end); //记录测试结束时的时间 i*=10; //将答对的题目数扩大10倍成为分数 printf("You have got %3d score(s).n",i); //提示得分 data=fopen("record.txt","a+"); fprintf(data,"%s %3d %3ldn",ID,i,end-start); //将ID 得分 时间写入文件 fclose(data); return 0;&#125;int addition() //加法运算函数&#123; int a,b; char convert[3],typein[3]; a=rand()%100; //在[0,100)的范围内取随机数 b=rand()%(100-a); //由于是加法运算，可以在[0,100-a)的范围内取随机数 printf("%2d + %2d = ",a,b); //打印题目 gets(typein); //扫描回答 itoa(a+b,convert,10); //将正确答案转换为字符串 if(strcmp(convert,typein)) //判断回答是否正确 &#123; printf("%2d + %2d = %2d | Your answer: %s Wrong!n",a,b,a+b,typein); return 0; &#125; else &#123; printf("%2d + %2d = %2d | Your answer: %s Right!n",a,b,a+b,typein); return 1; &#125;&#125;int subtraction() //减法运算函数&#123; int a,b; char convert[3],typein[3]; a=rand()%100; //在[0,100)的范围内取随机数 b=rand()%(a+1); //由于是减法运算，可以在[0,a+1)的范围内取随机数 printf("%2d - %2d = ",a,b); //打印题目 gets(typein); //扫描回答 itoa(a-b,convert,10); //将正确答案转换为字符串 if(strcmp(convert,typein)) //判断回答是否正确 &#123; printf("%2d - %2d = %2d | Your answer: %s Wrong!n",a,b,a-b,typein); return 0; &#125; else &#123; printf("%2d - %2d = %2d | Your answer: %s Right!n",a,b,a-b,typein); return 1; &#125;&#125;int multiplication() //乘法运算函数&#123; int a,b; char convert[3],typein[3]; while(1) //循环进行随机，直到有符合要求的题目 &#123; a=rand()%100; //在[0,100)的范围内取随机数 b=rand()%100; //在[0,100)的范围内取随机数 if(a*b&lt;100) //判断两个随机数的乘积是否小于100 break; &#125; printf("%2d * %2d = ",a,b); //打印题目 gets(typein); //扫描回答 itoa(a*b,convert,10); //将正确答案转换为字符串 if(strcmp(convert,typein)) //判断回答是否正确 &#123; printf("%2d * %2d = %2d | Your answer: %s Wrong!n",a,b,a*b,typein); return 0; &#125; else &#123; printf("%2d * %2d = %2d | Your answer: %s Right!n",a,b,a*b,typein); return 1; &#125;&#125;int division() //除法运算函数&#123; int a,b; char convert[3],typein[3]; while(1) //循环进行随机，直到有符合要求的题目 &#123; a=rand()%100; //在[0,100)的范围内取随机数 b=rand()%a+1; //由于是除法运算，可以在[1,a+1)的范围内取随机数 if(a%b==0) //判断前一个随机数是否可以被后一个随机数整除 break; &#125; printf("%2d / %2d = ",a,b); //打印题目 gets(typein); //扫描回答 itoa(a/b,convert,10); //将正确答案转换为字符串 if(strcmp(convert,typein)) //判断回答是否正确 &#123; printf("%2d / %2d = %2d | Your answer: %s Wrong!n",a,b,a/b,typein); return 0; &#125; else &#123; printf("%2d / %2d = %2d | Your answer: %s Right!n",a,b,a/b,typein); return 1; &#125;&#125;int grades() //查询成绩函数&#123; int i=0,grade=-1,time,cycle(); char scan[7]; FILE *fp; if((fp=fopen("record.txt","r"))==NULL) &#123; printf("Now program doesn't hava any grades.n"); //如果文件不存在，提示不存在成绩 cycle(); &#125; printf("Your previous records are:nID: Grades: Time:n"); //给出成绩提示 while(!feof(fp)) &#123; memset(scan,0,sizeof(scan)); fseek(fp,i,SEEK_SET); //将文件读写指针移动到i指定的位置 fgets(scan,7,fp); //一次读取(7-1)个字符 if(strcmp(scan,ID)==0) //判断读取的字符和ID是否相同 &#123; fseek(fp,i+7,SEEK_SET); //将文件读写指针移动到i指定的位置，即当前成绩条目的起始位置 fscanf(fp,"%3d %3d",&amp;grade,&amp;time); //扫描成绩与答题时间 printf("%s %3d %3d secondsn",ID,grade,time); //打印ID 成绩 时间 &#125; i+=16; &#125; if(grade&lt;0) //初始化grade的值为-1，若未查找到成绩，则grade的值不变，仍为-1，以此判断是否存在成绩 printf("You have never do the test before.n"); return 0;&#125;int cycle() //循环函数&#123; int choice(),i; char typein[2]; printf("Do you want continue?n1)NO, exit.n2)Yes, and change ID.n3)Yes, but not change ID.n");//给出选择提示 gets(typein); //获得输入数据 if(typein[1]!=''||isdigit(typein[0])==0) //检验是否输入一位数字 &#123; printf("Please type in a number:n"); cycle(); &#125; switch(typein[0]) //用ASCII码判断选择 &#123; case 49: printf("Bye! Thanks for using my program!n"); exit(0); case 50: main(); case 51: choice(); default: printf("Please type in a number:n"); cycle(); &#125; return 0;&#125; 后来在看到室友的代码后由 goto 受到了启发，于是大幅精简，合并函数，完成了第二个版本，并加上了第一个版本缺失的功能。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; //随机函数相关的头文件#include &lt;time.h&gt; //时间函数相关的头文件#include &lt;ctype.h&gt; //判断数字字母函数相关的头文件#include &lt;string.h&gt; //判断字符串相等函数的头文件int main()&#123; int n,i,score=0,a[10],b[10],result[10],grade=-1,readtime,count=0; long start,end; char ID[7],typein[3],convert[3],input[10][3],scan[7],symbol[10]; FILE *data; printf("Welcome!\n"); //欢迎提示 inputID: do &#123; printf("Please type in your ID No:"); //提示输入学号 gets(ID); //获得输入数据 &#125; while(!(ID[6]=='\0'&amp;&amp;isalpha(ID[0])&amp;&amp;isalpha(ID[1])&amp;&amp;isdigit(ID[2])&amp;&amp;isdigit(ID[3])&amp;&amp;isdigit(ID[4])&amp;&amp;isdigit(ID[5]))); //检验ID是否符合格式 choice: //选择功能部分 printf("(Please type in a number.)\nWhat do you want to do?\n1) Start a test.\n2) Check scores\n3) Exit\nPlease type in your choice:\n"); //给出选择提示 gets(typein); //获得输入数据 if(typein[1]!='\0'||isdigit(typein[0])==0) //检验是否输入一位字符 goto choice; switch(typein[0]) //用ASCII检验是否为数字 &#123; case 49: //判断进行测试 srand(time(NULL)); //利用时间进行播种，以生成真正的随机数 printf("Test Will start! Are you ready?"); //提示测试将要开始 getchar(); //等待按下任意键开始测试 time(&amp;start); //记录开始测试时的时间 for(i=0;i&lt;10;i++) //循环10次给出问题 &#123; n=rand()%4; //使用随机数来选择加减乘除 giveProblem: a[i]=rand()%100; //在[0,100)的范围内取随机数 b[i]=rand()%100; //在[0,100)的范围内取随机数 switch(n) &#123; case 0: symbol[i]='+'; result[i]=a[i]+b[i]; break; case 1: symbol[i]='-'; result[i]=a[i]-b[i]; break; case 2: symbol[i]='*'; result[i]=a[i]*b[i]; break; case 3: symbol[i]='/'; result[i]=a[i]/b[i]; &#125; if(result[i]&gt;99||result[i]&lt;0) goto giveProblem; if(n==3&amp;&amp;(a[i]%b[i]!=0)) goto giveProblem; printf("%2d %c %2d = ",a[i],symbol[i],b[i]); //打印题目 itoa(result[i],convert,10); //将正确答案转换为字符串 gets(input[i]); //扫描回答 if(!strcmp(convert,input[i])) //判断回答是否正确 score+=10; //正确加10分 &#125; time(&amp;end); //记录测试结束时的时间 printf("You have got %3d score(s).\n",score); //提示得分 printf("Prob. | Correct Answ. | Ur Answ.\n"); //打印每道题的答案 for(i=0;i&lt;10;i++) printf("%2d %c %2d = %3d %s\n",a[i],symbol[i],b[i],result[i],input[i]); data=fopen("record.txt","a"); fprintf(data,"%s %3d %3ld\n",ID,score,end-start); //将ID 得分 时间写入文件 fclose(data); break; case 50: //判断查询分数 if((data=fopen("record.txt","r"))==NULL) &#123; printf("Now program doesn't hava any grades.\n"); //如果文件不存在，提示不存在成绩 goto cycle; &#125; i=0; while(!feof(data)) &#123; memset(scan,0,7); //将scan的内容清空 fseek(data,i,SEEK_SET); //将文件读写指针移动到i指定的位置 fgets(scan,7,data); //一次读取(7-1)个字符 if(strcmp(scan,ID)==0) //判断读取的字符和ID是否相同 &#123; fseek(data,i+7,SEEK_SET); //将文件读写指针移动到i+7指定的位置，即当前成绩条目的位置 fscanf(data,"%3d %3d",&amp;grade,&amp;readtime); //扫描成绩与答题时间 if(!(count++)) printf("Your previous records are:\nID: Grades: Time:\n"); //给出成绩提示 printf("%s %3d %3d seconds\n",ID,grade,readtime); //打印ID 成绩 时间 &#125; i+=16; &#125; if(grade&lt;0) //初始化grade的值为-1，若未查找到成绩，则grade的值不变，仍为-1，以此判断是否存在成绩 printf("You have never do the test before.\n"); fclose(data); break; case 51: //判断选择退出 printf("Bye! Thanks for using my program!\n"); exit(0); default: //输入错误的选择 printf("Please type in a number.\n"); goto choice; &#125; cycle: printf("(Please type in a number.)\nDo you want continue?\n1)NO, exit.\n2)Yes, and change ID.\n3)Yes, but not change ID.\n");//给出选择提示 gets(typein); //获得输入数据 if(typein[1]!='\0'||isdigit(typein[0])==0) //检验是否输入一位数字 &#123; printf("Please type in a number:\n"); goto cycle; &#125; switch(typein[0]) //用ASCII码判断选择 &#123; case 49: printf("Bye! Thanks for using my program!\n"); exit(0); case 50: goto inputID; case 51: goto choice; default: goto cycle; &#125;&#125; 我这里将所有的输入部分都进行了正确性检测，所以代码稍微长了一点点，另外又多于要求多了一个循环的功能，目测仅按题目最小要求做可以控制在一百行以内。 以上。 ——-更新：2016-3-1——- 惭愧，假期里又看了看我这代码感觉写的好傻，目不忍视，遂又重写了一遍，改进一下。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; //随机函数相关的头文件#include &lt;time.h&gt; //时间函数相关的头文件#include &lt;ctype.h&gt; //判断数字字母函数相关的头文件#include &lt;string.h&gt; //判断字符串相等函数的头文件struct information &#123; int score; long int time; char ID[7];&#125; infor[1000];int main(int argc, char const *argv[]) &#123; int n, score = 0, a[10], b[10], result[10], grade = -1, readtime, count = 0, i; time_t start, end; char ID[7], typein[3], convert[3], input[10][3], scan[7], symbol[10]; FILE *data; printf("Welcome!\n"); inputID: do &#123; printf("Please type in your ID No: (Like AB1234)\n"); gets(ID); &#125; while(ID[6] != '\0' || !isupper(ID[0]) || !isupper(ID[1]) || !isdigit(ID[2]) || !isdigit(ID[3]) || !isdigit(ID[4]) || !isdigit(ID[5])); choice: do &#123; printf("What do you want to do? (Please type in a number)\n1) Start a test.\n2) Check scores\n3) Exit\nPlease type in your choice:\n"); gets(typein); &#125; while(typein[1] != '\0' || typein[0] &lt; 49 || typein[0] &gt; 51); if (typein[0] == 49) &#123; srand((unsigned)time(NULL)); //利用时间进行播种，以生成真正的随机数 printf("Test Will start! Are you ready?"); getchar(); //等待按下任意键开始测试 time(&amp;start); //记录开始测试时的时间 for (i = 0; i &lt; 10; i++) &#123; n = rand() % 4; do &#123; a[i] = rand() % 100; b[i] = rand() % 100; switch (n) &#123; case 0: symbol[i] = '+'; result[i] = a[i] + b[i]; break; case 1: symbol[i] = '-'; result[i] = a[i] - b[i]; break; case 2: symbol[i] = '*'; result[i] = a[i] * b[i]; break; case 3: symbol[i] = '/'; result[i] = a[i] / b[i]; &#125; &#125; while(result[i] &gt; 99 || result[i] &lt; 0 || n==3 &amp;&amp; a[i] % b[i] != 0); printf("%2d %c %2d = ", a[i], symbol[i], b[i]); itoa(result[i], convert, 10); gets(input[i]); if (!strcmp(convert, input[i])) &#123; score += 10; &#125; &#125; time(&amp;end); //记录测试结束时的时间 printf("You have got %3d score(s).\n", score); //提示得分 printf("Prob. | Correct Answ. | Ur Answ.\n"); //打印每道题的答案 for (i = 0; i &lt; 10; i++) &#123; printf("%2d %c %2d = %3d %s\n", a[i], symbol[i], b[i], result[i], input[i]); &#125; data = fopen("record.txt", "a+"); fprintf(data, "%s %3d %3ld\n", ID, score, end - start); //将ID 得分 时间写入文件 fclose(data); &#125; if (typein[0] == 50) &#123; data = fopen("record.txt", "a+"); for (i = 0, n = 0; !feof(data); i++) &#123; fscanf(data, "%s %d %ld", infor[i].ID, &amp;infor[i].score, &amp;infor[i].time); if (!strcmp(infor[i].ID, ID)) &#123; n++; printf("%s %d %ld seconds", infor[i].ID, infor[i].score, infor[i].time); &#125; &#125; fclose(data); i -= 2; if (n == 0) &#123; printf("You have never do the test before.\n"); &#125; &#125; if (typein[0] == 51) &#123; printf("Bye! Thanks for using my program!\n"); exit(0); &#125; do &#123; printf("Do you want continue? (Please type in a number)\n1)No, exit.\n2)Yes, and change ID.\n3)Yes, but not change ID.\n");//给出选择提示 gets(typein); &#125; while(typein[1] != '\0' || typein[0] &lt; 49 || typein[0] &gt; 51); switch (typein[0]) &#123; case 49: printf("Bye! Thanks for using my program!\n"); exit(0); case 50: goto inputID; case 51: goto choice; &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习11]]></title>
    <url>%2FEX11.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float annualSalary[5], monthlySalary[5]; char name[5][81], linein[81]; FILE *fp; for (int i = 0; i &lt; 5; i++) &#123; printf("Please type in employee's name and annual salary:\n"); gets(linein); sscanf(linein, "%s %f", &amp;name[i], &amp;annualSalary[i]); &#125; fp = fopen("salary.txt", "a+"); fprintf(fp, "No. Employee's Name Annual Salary Monthly payment after tax\n"); for (int i = 0; i &lt; 5; i++) &#123; monthlySalary[i] = annualSalary[i] / 12 * 0.8; fprintf(fp, "%2d %15s %13.3f %25.3f\n", i + 1, name[i], annualSalary[i], monthlySalary[i]); &#125; fclose(fp); return 0;&#125; 12345678910111213141516171819#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int distance[20]; char line1[20][81], linein[81]; FILE *fp; for(int i = 0; i &lt; 20; i++) &#123; printf("Please type in No.%2d town's name and the distance from London:\n", i + 1); gets(linein); sscanf(linein, "%s %d", &amp;line1[i], &amp;distance[i]); &#125; fp = fopen("data.txt", "a+"); fprintf(fp, "No. Town's Name Distance from London\n"); for(int i = 0; i &lt; 20; i++) &#123; fprintf(fp, "%2d %11s %20d\n", i + 1, line1[i], distance[i]); &#125; fclose(fp); return 0;&#125; 1234567891011121314151617181920#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int j, distance[20]; char line1[20][81]; FILE *input, *output; input = fopen("data.txt", "r"); output = fopen("newdata.txt", "a+"); fseek(input, 42, SEEK_SET); fprintf(output, "No. Town's Name Distance from London\n"); for(int i = 0; i &lt; 20; i++) &#123; fscanf(input, "%2d %11s %20d", &amp;j, &amp;line1[i], &amp;distance[i]); if(distance[i] &lt; 100) &#123; fprintf(output, "%2d %11s %20d\n", i + 1, line1[i], distance[i]); &#125; &#125; fclose(input); fclose(output); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习10]]></title>
    <url>%2FEX10.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int num[5], *p; for (int i = 0; i &lt; 5; i++) &#123; printf("Please type in an integer:\n"); scanf("%d", &amp;num[i]); &#125; printf("First:\n"); for (int i = 4; i &gt;= 0; i--) &#123; printf("%d\n", num[i]); &#125; printf("Second:\n"); for (int i = 0; i &gt;= 0; i--) &#123; printf("%d\n", *(num + i)); &#125; p = num; printf("Third:\n"); for (int i = 0; i &gt;= 0; i--) &#123; printf("%d\n", p[i]); &#125; printf("Fourth:\n"); for (int i = 4; i &gt;= 0; i--) &#123; printf("%d\n", *(p + i)); &#125; return 0;&#125; 1234567891011121314151617#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float num[8], sum; for (int i = 0; i &lt; 8; i++) &#123; printf("Please type in a float number:\n"); scanf("%f", &amp;num[i]); &#125; for (int i = 1; i &lt; 8; i += 2) &#123; printf("%d: %f\n", i + 1, *(num + i)); &#125; for (int i = 0; i &lt; 8; i += 2) &#123; sum += *(num + i); &#125; printf("Sum is %f", sum); return 0;&#125; 12345678910111213141516171819202122#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int num[6], maxmin(int[], int); for (int i = 0; i &lt; 6; i++) &#123; printf("Please type in an integer:\n"); scanf("%d", &amp;num[i]); &#125; maxmin(num, 6); return 0;&#125;int maxmin(int number[], int n) &#123; int max, min; max = min = number[0]; for (int i = 1; i &lt; n; i++) &#123; max = max &gt; number[i] ? max : number[i]; min = min &lt; number[i] ? min : number[i]; &#125; printf("max = %d\nmin = %d", max, min); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习09]]></title>
    <url>%2FEX09.html</url>
    <content type="text"><![CDATA[1234567891011121314151617#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int dist[5]; char towns[5][81], linein[81]; for (int i = 0; i &lt; 5; i++) &#123; printf("Please type in the town's name and its distance to London:\n"); gets(linein); sscanf(linein, "%s %d", towns[i], &amp;dist[i]); &#125; for (int i = 0; i &lt; 5; i++) &#123; if (dist[i] &lt; 100) &#123; printf("%s to London is less than 100 miles.\n", towns[i]); &#125; &#125; return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char const *argv[]) &#123; int eofs; char linein[81]; printf("Type in a string:\n"); gets(linein); for (int i = 0; linein[i] != '\0'; i++) &#123; eofs = i - 1; &#125; for (int i = eofs; i &gt;= 0; i--) &#123; if (linein[i] == ' ') &#123; for (int j = i + 1; linein[j] != '\0' &amp;&amp; linein[j] != ' '; j++) &#123; printf("%c", linein[j]); &#125; printf(" "); &#125; &#125; for (int i = 0; linein[i] != '\0' &amp;&amp; linein[i] != ' '; i++) &#123; printf("%c", linein[i]); &#125; printf("\n"); for (int i = 0; linein[i] != '\0'; i++) &#123; if (linein[i] == ' ') &#123; for (int j = i - 1; j &gt;= 0 &amp;&amp; linein[j] != ' '; j--) &#123; printf("%c", linein[j]); &#125; printf(" "); &#125; &#125; for (int j = i - 1; j &gt;= 0 &amp;&amp; linein[j] != ' '; j--) &#123; printf("%c", linein[j]); &#125; printf("\n"); for (int i = eofs; i &gt;= 0; i--) &#123; printf("%c", linein[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[慢慢的，就没有了，就像从未存在过]]></title>
    <url>%2FSorrow.html</url>
    <content type="text"><![CDATA[几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许 90 后、95 后会慢慢不知道谷歌是什么网站。 那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？ 今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。 没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？ 多年前，我们也是可以登陆 Facebook 的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。 然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。 多年前，我们也是可以登陆 Twitter 的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。 然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。 多年前，我们也是可以登陆 YouTube 的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有 YouTube，我们中国人会很快让优酷超过 YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在 YouTube 上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。 哦，对了。Instagram，有些人可能感觉它和 QQ 空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。 可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter 也是这么没的，Facebook 也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。 我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。 对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。 可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。 没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。 没有 Facebook，我可以用校内呀。可你想发只有在 Facebook 上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。 没有 YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个 idea 本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫 YouTube。 没有 Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。 慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。 接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。 游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。 你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。 一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。 天黑了，那么睡觉吧，但愿长醉不复醒。 最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Facebook</tag>
        <tag>Twitter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[360 被国际评测机构取消奖项]]></title>
    <url>%2F360SB.html</url>
    <content type="text"><![CDATA[4 月 30 日，国际评测机构 AV-Comparatives（简称 AV-C）等发布声明，称 360、百度、腾讯等中国厂商使用特殊版本参加测试，剥夺了 360 在 2015 年最新测试的奖项。对此，360 方面在微博发表公开声明，对评测机构的突然发难表示震惊，并表示在测试中一直保持公开、透明的态度，对参测版本一事并无隐瞒，希望评测机构对此事进行调查，如不能还其清白，将不排除不再参加任何评测的可能。 AV-C 在声明中表示，360 在评测版本中仅默认开启了 BD 引擎，并以此为理由剥夺了 360 在 2015 年的最新测试奖项。而 360 方面则认为，在测试的全部过程中，360 默认开启 BD 引擎的行为是公开透明的，并没有对评测机构隐瞒，因此对 AV-C 的发难感到疑惑和不解。 据 AV-C 的调查，奇虎在送测的所有产品中都默认开启了 Bitdefender 引擎，但奇虎自家的 QVM 引擎却从来没有被开启。相反，在奇虎 360 的主要市场区域里，默认的设置都是 Bitdefender 关闭而 QVM 引擎开启。如此设置的结果会显著降低防护级别，并显著增加误报率。而且奇虎 360 在被要求提供此行为解释时，承认了参测产品的某些设置经过人为修改，包括开启对注册机和破解软件的检测，以及将云查询重定向到距离测试机构较近的服务器。在反复要求其提供第三方引擎的具体信息后，他们也最终承认了参测的引擎设置和用户使用的引擎设置是不同的。 对于为何在普通用户版本中为何没有默认开启 BD 引擎，360 方面指出这是因为中国存在大量低配电脑，360 杀毒为保证用户的正常使用体验，为国内用户提供了较为轻巧的安装包。而用户完全可以根据自己的实际情况，在 360 杀毒主界面打开或关闭 BD 引擎。 360 声称，由于 AV-C 等评测机构的评测标准并不完全适用于中国国情。比如按照标准评测规则，破解器、外挂软件都会被定义为恶意软件，而此类软件在中国有大量用户在使用。实际上这些软件并没有侵害用户权益的恶意行为，因此安全软件不会对此类软件进行报警、查杀。360 认为，正是因为诸如此类的问题，让中国安全软件的国内版本并不适合在国际赛场上参赛，因为这会造成评测结果与其真实实力之间的巨大差距，而这对国产安全厂商显然是不公平的。 截至目前为止，三家知名测试机构 AV-Comparatives，AV-TEST，和 Virus Bulletin，一致撤销奇虎 360 产品今年以来的所有认证和评级，且会在今后的测试中坚持公开公平地对待参测 厂商，保证用户收到的是最准确的信息，以防今后再有厂商作弊的行为发生。]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>360</tag>
        <tag>AV-C</tag>
        <tag>杀毒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习08]]></title>
    <url>%2FEX08.html</url>
    <content type="text"><![CDATA[123456789101112131415#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int num[10]; float avg = 0; for (int i = 0; i &lt; 10; i++) &#123; printf("Please input an integer:\n"); scanf("%d", &amp;num[i]); &#125; for (int i = 0; i &lt; 10; i++) &#123; avg += num[i]; &#125; printf("Average is %f", avg / 10); return 0;&#125; 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int a[2][5], max1, max2, min1, min2, max, min; for (int i = 0; i &lt; 2; i++) &#123; for (int j = 0; j &lt; 5; j++) &#123; scanf("%d", &amp;a[i][j]); &#125; &#125; max1 = min1 = a[0][0]; for (int j = 0; j &lt; 5; j++) &#123; max1 = max1 &gt; a[0][j] ? max1 : a[0][j]; min1 = min1 &lt; a[0][j] ? min1 : a[0][j]; &#125; max2 = min2 = a[1][0]; for (int j = 0; j &lt; 5; j++) &#123; max2 = max2 &gt; a[1][j] ? max2 : a[1][j]; min2 = min2 &lt; a[1][j] ? min2 : a[1][j]; &#125; max = max1 &gt; max2 ? max1 : max2; min = min1 &lt; min2 ? min1 : min2; printf("The maximum in row 1 is %d\n", max1); printf("The minimun in row i is %d\n", min1); printf("The maximum in row 2 is %d\n", max2); printf("The minimun in row 2 is %d\n", min2); printf("The maximun is %dn", max); printf("The minimun is %dn", min); return 0;&#125; 12345678910111213141516171819202122232425#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int i = 0, number[20]; do &#123; printf("Please type in an integer between 10 and 100 inclusive:\n"); scanf("%d", &amp;number[i]); if (number[i] &gt;= 10 &amp;&amp; number[i] &lt;= 100) &#123; if (i == 0) &#123; i++; continue; &#125; for (int j = 0; j &lt; i; j++) &#123; if (number[i] == number[j]) &#123; printf("Same number: %d\n", number[i]); break; &#125; &#125; &#125; else &#123; continue; &#125; i++; &#125; while(i &lt; 11); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习07]]></title>
    <url>%2FEX07.html</url>
    <content type="text"><![CDATA[1234567891011121314151617#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int num, evenNum(int); printf("Please input an integer: (Crtl+Z to stop)\n"); while (scanf("%d", &amp;num) != EOF) &#123; if (evenNum(num)) &#123; printf("%d is an even number!\n", num); &#125; printf("Next integer:\n"); &#125; return 0;&#125;int evenNum(int a) &#123; return (a + 1) % 2;&#125; 1234567891011121314151617#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int a ,b, integerPower1(int, int); printf("Please input base and exponent:\n"); scanf("%d %d", &amp;a, &amp;b); printf("Result is %d", integerPower1(a, b)); return 0;&#125;int integerPower1(int a, int b) &#123; int sum = 1; for (int i = 1; i &lt;= b; i++) &#123; sum *= a; &#125; return sum;&#125; 1234567891011121314151617#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int a, b, integerPower2(int, int); printf("Please input base and exponent:\n"); scanf("%d %d", &amp;a, &amp;b); printf("Result is %d", integerPower2(a, b)); return 0;&#125;int integerPower2(int m, int n) &#123; if (!n) &#123; return 1; &#125; else &#123; return m * integerPower2(m, n - 1); &#125;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习06]]></title>
    <url>%2FEX06.html</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425#include &lt;stdio.h&gt;void main(int argc, char const *argv[]) &#123; int iNter = 0, round_to_nearest(float); float num = 0; while (true) &#123; printf("This program will round the number you have input to the nearest integer.(Input 0 to exit)\nPlease input:\n"); scanf("%f", &amp;num); if (num == 0) &#123; printf("Bye!"); exit(0); &#125; else if (num &lt; 0) &#123; num = -num; iNter = round_to_nearest(num); printf("%d\n", -iNter); &#125; else &#123; iNter = round_to_nearest(num); printf("%d\n", iNter); &#125; &#125;&#125;int round_to_nearest(float n) &#123; return (int) (n + 0.5);&#125; 12345678910111213141516171819#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float larger(float, float); float a, b, c, d, e, f, total; printf("This program will ask you for three pairs of numbers, and will help you adds the larger of each pair.\nPlease input the first pair:(e.g. 9.99 10.01)\n"); scanf("%f %f", &amp;a, &amp;b); printf("The second pair:\n"); scanf("%f %f", &amp;c, &amp;d); printf("The third pair:\n"); scanf("%f %f", &amp;e, &amp;f); total = larger(a, b) + larger(c, d) + larger(e, f); printf("Total is %f", total); return 0;&#125;float larger(float x, float y)&#123; return (x &gt; y ? x : y);&#125; 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main(int argc, char const *argv[]) &#123; float time1, time2, time3, fee1, fee2, fee3, calcCharge(float); printf("This program help you calculate the parking charges for each of 3 customers.\nPlease input how many hours the first customer have parked car:(hours)\n"); scanf("%f", &amp;time1); printf("The second:\n"); scanf("%f", &amp;time2); printf("The third:\n"); scanf("%f", &amp;time3); if (time1 &lt;= 0 || time2 &lt;= 0 || time3 &lt;= 0 || time1 &gt;24 || time2 &gt; 24 || time3 &gt; 24) &#123; printf("You have input wrong data! Please open this program again.\n"); &#125; else &#123; fee1 = calcCharge(time1); fee2 = calcCharge(time2); fee3 = calcCharge(time3); printf("Car Hours Charge\n"); printf("1%10.1f%7.2f\n", time1, fee1); printf("2%10.1f%7.2f\n", time2, fee2); printf("3%10.1f%7.2f\n", time3, fee3); printf("TOTAL%6.1f%7.2f", time1 + time2 + time3, fee1 + fee2 + fee3); &#125; return 0;&#125;float calcCharge(float hours) &#123; float charge; hours = (float) ceil(hours); charge = (hours + 1) * 0.5; if (charge &lt; 2) &#123; return 2; &#125; if (charge &gt; 10) &#123; return 10; &#125; return charge;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习05]]></title>
    <url>%2FEX05.html</url>
    <content type="text"><![CDATA[1234567891011#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main(int argc, char const *argv[]) &#123; int i = 1; do &#123; printf("%4.0f\n", pow(2, i)); i++; &#125; while(i &lt; 11); return 0;&#125; 123456789#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main(int argc, char const *argv[]) &#123; for (int i = 0; i &lt; 11; i++) &#123; printf("%4.0f\n", pow(2, i)); &#125; return 0;&#125; 12345678910111213141516#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main(int argc, char const *argv[]) &#123; int num = 0, odd = 0, i = 0; double pi = 0; printf("This program calculates constant π by the infinite series:nπ=4-4/3+4/5-4/7+4/9-4/11...\nHow many terms do you want to calculate?\n"); scanf("%d", &amp;num); do &#123; odd = 2 * i + 1; pi = pi + 4 / (pow(-1, i) * odd); i++; &#125; while(i &lt; num); printf("Result is %f\n", pi); return 0;&#125; 123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char const *argv[]) &#123; for (int i = 4; abs(i) &lt;= 4; i--) &#123; for (int j = 1; j &lt;= abs(i); j++) &#123; printf(" "); &#125; for (int j = 1; j &lt;= 9 - abs(i) * 2; j++) &#123; printf("*"); &#125; printf("\n"); &#125; return 0;&#125; 1234567891011#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; for (int i = 1; i &lt; 10; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; printf("%d*%d=%2d", i, j, i * j); &#125; printf("\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 修改 SSH 端口号]]></title>
    <url>%2FLinux-Change-SSH-Port.html</url>
    <content type="text"><![CDATA[管理自己的主机，一般都是用 SSH 的方式，默认使用 22 端口。为了安全着想，最好修改默认端口。 找到 /etc/ssh/sshd_config，打开修改，将1#Port 22 修改为1Port 2333 在这里 2333 设置为自己想要的端口。 不要忘记把 2333 端口加入防火墙规则里面，否则就无法管理主机了。 最后重启一下 SSH 服务1$ service sshd restart]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习04]]></title>
    <url>%2FEX04.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int day, month, year; printf("This program help you to transfer date.\n"); while (true) &#123; printf("Please input date: (For example: 1996 08 16)\n"); scanf("%d %d %d", &amp;year, &amp;month, &amp;day); if (year &lt; 0 || month &lt; 0 || month &gt;12 || day &lt; 0 || day &gt;31) &#123; printf("You have input an wrong date!\n"); continue; &#125; if ((month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp; day &gt; 30) &#123; printf("You have input an wrong date!\n"); continue; &#125; if (month == 2) &#123; if (year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0)) &#123; if (day &gt; 29) &#123; printf("You have input an wrong date!\n"); continue; &#125; &#125; if (day &gt; 28) &#123; printf("You have input an wrong date!\n"); continue; &#125; &#125; break; &#125; switch (day) &#123; case 1: case 21: case 31: printf("%dst ", day); break; case 2: case 22: printf("%dnd ", day); break; case 3: case 23: printf("%drd ", day); break; default: printf("%dth ", day); &#125; switch (month) &#123; case 1: printf("January "); break; case 2: printf("February "); break; case 3: printf("March "); break; case 4: printf("April "); break; case 5: printf("May "); break; case 6: printf("June "); break; case 7: printf("July "); break; case 8: printf("August "); break; case 9: printf("September "); break; case 10: printf("October "); break; case 11: printf("Novenber "); break; case 12: printf("December "); &#125; printf("%d", year); return 0;&#125; 123456789101112#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int total = 0, i = 2; printf("This program calculates 2+4+6+8+...+30.\n"); while (i &lt;= 30) &#123; total += i; i += 2; &#125; printf("The total is %d\n", total); return 0;&#125; 123456789101112131415#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float sales = 0; while (true) &#123; printf("Enter sales in pound(enter -1 to end):\n"); scanf("%f", &amp;sales); if(sales &lt; 0) &#123; break; &#125; else &#123; printf("Salary is %.2f\n", 200 + sales * 0.09); &#125; &#125; return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int pronum, quantity; float value; printf("Product Number Retail Price(in pounds)\n 1 2.98\n 2 4.50\n 3 9.98\n 4 4.49\n 5 6.87\n"); while (true) &#123; printf("Please type in Product number and the quantity sold for one day: (-1 to end)\n"); scanf("%d", &amp;pronum); if (pronum &lt; 0) &#123; break; &#125; scanf("%d", &amp;quantity); switch (pronum) &#123; case 1: value += 2.98 * quantity; break; case 2: value += 4.50 * quantity; break; case 3: value += 9.98 * quantity; break; case 4: value += 4.49 * quantity; break; case 5: value += 6.87 * quantity; break; default: printf("You have typed in wrong data!\n"); &#125; &#125; printf("Total is %f", value); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习03]]></title>
    <url>%2FEX03.html</url>
    <content type="text"><![CDATA[123456789101112131415#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int grade = 0; printf("Input student's grade:\n"); scanf("%d", &amp;grade); if (grade &gt;= 0 &amp;&amp; grade &lt; 60) &#123; printf("Failed!"); &#125; else if (grade &gt;= 60 &amp;&amp; grade &lt;= 100) &#123; printf("Passed!"); &#125; else &#123; printf("Error!"); &#125; return 0;&#125; 12345678910111213141516#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int num = 0; printf("Please input an integer number:\n"); scanf("%d", &amp;num); if (num &lt; 0) &#123; num = -num; &#125; if (num % 2 == 1) &#123; printf("Odd number!"); &#125; else &#123; printf("Even number!"); &#125; return 0;&#125; 123456789101112131415#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; int a = 0, b = 0, c = 0; printf("Input three integer numbers.\nThe first:\n"); scanf("%d", &amp;a); printf("The second:\n"); scanf("%d", &amp;b); printf("The third:\n"); scanf("%d", &amp;c); a = a &gt; b ? a : b; a = a &gt; c ? a : c; printf("The largest number is %d", a); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习02]]></title>
    <url>%2FEX02.html</url>
    <content type="text"><![CDATA[123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("Net price is 889 $, sales tax rate is 6%.\nSo the total purchase price is %f $.", 889 * 1.06); return 0;&#125; 1234567891011#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float radius = 0, pi = 3.14159; printf("Please input radius:\n"); scanf("%f", &amp;radius); printf("The diameter of this circle is %f\n", radius * 2); printf("The circumference of this circle is %f\n", 2 * pi * radius); printf("The area of this circle is %f\n", pi * radius * radius); return 0;&#125; 1234567891011#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; float startingBalance, interestrate; printf("Interest calculation programnStarting balance ?\n"); scanf("%f", &amp;startingBalance); printf("Annual interest rate percntage ?\n"); scanf("%f", &amp;interestrate); printf("Balance after one year: %f", startingBalance * (1 + interestrate / 100)); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言 练习01]]></title>
    <url>%2FEX01.html</url>
    <content type="text"><![CDATA[123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("This is my first program!"); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("This is my second program!"); return 0;&#125; 123456789#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("1 "); printf("2 "); printf("3 "); printf("4 "); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("1 2 3 4 "); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("%d %d %d %d", 1, 2, 3, 4); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("The number of minutes in 15 days is %d.", 15 * 24 * 60); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("180 minutes equal to %d hours.", 180 / 60); return 0;&#125; 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[]) &#123; printf("174 minutes: %d hours and %d minutes", 174 / 60, 174 % 60); return 0;&#125;]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装配置 Shadowsocks-Libev]]></title>
    <url>%2FInstall-Shadowsocks-Libev.html</url>
    <content type="text"><![CDATA[本文最后更新于 2018年3月16日 可能会因为没有更新而失效。如已失效或需要修正，请留言！ Shadowsocks 目前是众多梯子中非常出色的一款，本文记录一下 Shadowsocks-Libev 版在 Linux 系统下的安装步骤。 Shadowsocks 可以指：一种基于 Socks5 代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当前包使用 Python、C、C++、C#、Go 语言等编程语言开发，大部分主要实现（iOS 平台的除外）采用 Apache 许可证、GPL、MIT 许可证等多种自由软件许可协议开放源代码。Shadowsocks 分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。 WikipediaShadowsocks Ubuntu 18.04在新版系统中，官方软件源已经包含了 Shadowsocks-libev，所以一行命令即可安装。1$ sudo apt install shadowsocks-libev 之后直接开始配置即可。 另外，Ubuntu 18.04 配置开机启动项的方法在这篇文章。 以下操作均在终端中执行 首先安装必要组件如果是 Debian/Ubuntu1$ sudo apt-get install --no-install-recommends gettext build-essential autoconf libtool libpcre3-dev asciidoc xmlto libev-dev libc-ares-dev automake 如果是 CentOS/Fedora/RHEL1$ sudo yum install gettext gcc autoconf libtool automake make asciidoc xmlto c-ares-devel libev-devel 然后安装加密组件安装一行一行的复制粘贴执行就可以了。1234567891011121314151617$ export LIBSODIUM_VER=1.0.16$ wget https://download.libsodium.org/libsodium/releases/libsodium-$LIBSODIUM_VER.tar.gz$ tar xvf libsodium-$LIBSODIUM_VER.tar.gz$ pushd libsodium-$LIBSODIUM_VER$ ./configure --prefix=/usr &amp;&amp; make$ sudo make install$ popd$ sudo ldconfig$ export MBEDTLS_VER=2.7.0$ wget https://tls.mbed.org/download/mbedtls-$MBEDTLS_VER-gpl.tgz$ tar xvf mbedtls-$MBEDTLS_VER-gpl.tgz$ pushd mbedtls-$MBEDTLS_VER$ make SHARED=1 CFLAGS=-fPIC$ sudo make DESTDIR=/usr install$ popd$ sudo ldconfig 接下来编译安装同样是一行一行地执行。12345$ git clone https://github.com/shadowsocks/shadowsocks-libev.git$ cd shadowsocks-libev$ git submodule update --init --recursive$ ./autogen.sh &amp;&amp; ./configure &amp;&amp; make$ sudo make install 至此，Shadowsocks-Libev 的安装已经结束。 接下来设置端口密码加密方式首先创建配置文件123$ mkdir /etc/shadowsocks-libev$ touch /etc/shadowsocks-libev/config.json$ nano /etc/shadowsocks-libev/config.json 如果提示 command not found，那就执行一下 sudo apt-get install nano，安装 nano 之后再次执行上面的最后一行代码。 然后将下列内容复制粘贴进去1234567891011121314&#123; "server":["[::0]", "0.0.0.0"], "server_port": 这里换成你想要的端口, "password": "这里换成你想要的密码", "method": "这里换成你想要的加密方式", "timeout": 1800, "fast_open": true, "mode": "tcp_and_udp", "nameserver": "8.8.8.8", "ipv6_first": true, "no_delay": true&#125; 将上面的对应信息修改一下，只能替换中文文字，任何其他的字符包括引号都不要修改，加密方式有这些可选1aes-128-gcm, aes-192-gcm, aes-256-gcm, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-ctr, aes-192-ctr, aes-256-ctr, camellia-128-cfb, camellia-192-cfb, camellia-256-cfb, bf-cfb, chacha20-ietf-poly1305, xchacha20-ietf-poly1305, salsa20, chacha20, chacha20-ietf 这些加密方式随便选择一个就可以了，注意不要包含空格逗号，推荐这些 aes-256-cfb, aes-256-gcm, chacha20-ietf-poly1305 最后添加开机启动打开 rc.local 文件1$ nano /etc/rc.local 将下列代码添加在 exit 0 之前的空行内1nohup ss-server -c /etc/shadowsocks-libev/config.json &gt; /dev/null 2&gt;&amp;1 &amp; 别忘了防火墙如果是 Ubuntu(&gt;=16)1$ sudo ufw allow 端口 如果是 CentOS(&gt;=7)123$ sudo firewall-cmd --add-port=端口/tcp --permanent$ sudo firewall-cmd --add-port=端口/udp --permanent$ sudo firewall-cmd --reload 所有的工作都完成了！重启一下你的 VPS，在你的客户端上配置好，就可以开始使用了。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typecho 首页显示摘要]]></title>
    <url>%2FTypecho-Excerpt.html</url>
    <content type="text"><![CDATA[网上有很多 Typecho 首页文章显示摘要的方法介绍，但是，使用了后发现，效果并不太好，尤其是文章的开头部分有多种格式的内容时，在首页只会显示纯文字，各种格式都会消失不见。还有一个专门显示摘要的插件，但是那个插件只是将文章输出的高度限制了，在打开首页时，仍然会加载所有的内容，而且有些图片会被截断显示。或者还有个添加 &lt;!--more--&gt; 标签的方法，但是太麻烦，需要每次都添加，而且容易忘记添加。 但是前段时间自己鼓捣研究了一下，有了更好的显示摘要效果。 方法： 编辑模板的 index.php 文件，找到这一行代码：1&lt;?php $this-&gt;content('阅读剩余部分...'); ?&gt; 将其替换为：1&lt;?php $this-&gt;summary(); ?&gt;&lt;p class="more"&gt;&lt;a href="&lt;?php $this-&gt;permalink() ?&gt;"&gt;展开阅读&lt;/a&gt;&lt;/p&gt; 保存，刷新你的首页看看效果吧！ 如果以同样的方法修改模板的 archive.php 文件，那么在文章分类显示页也可以做到显示摘要。]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Typecho</tag>
        <tag>摘要</tag>
      </tags>
  </entry>
</search>
